connected component forward field first f1 f1 forward field second f1 f0 public static final class neighbor with component i would join implement join function tuple2 long long tuple2 long long tuple2 long long override public tuple2 long long join tuple2 long long vertex with component tuple2 long long edge return new tuple2 long long edge f1 vertex with component f1 
connected component forward field first public static final class component id filter implement flat join function tuple2 long long tuple2 long long tuple2 long long override public void join tuple2 long long candidate tuple2 long long old collector tuple2 long long out if candidate f1 old f1 out collect candidate 
web log analysis forward field first public static class anti join visit implement co group function tuple3 integer string integer tuple1 string tuple3 integer string integer if the visit iterator be empty all pair of the rank iterator be emit otherwise no pair be emit p output format rank url avg duration override public void co group iterable tuple3 integer string integer rank iterable tuple1 string visit collector tuple3 integer string integer out check if there be a entry in the visit relation if visit iterator have next for tuple3 integer string integer next rank emit all rank pair out collect next 
join operator forward field first forward field second internal private static final class default flat join function t1 t2 extend rich flat join function t1 t2 tuple2 t1 t2 private static final long serial version u i d 1 l private final tuple2 t1 t2 out tuple new tuple2 override public void join t1 first t2 second collector tuple2 t1 t2 out throw exception out tuple f0 first out tuple f1 second out collect out tuple 
semantic property translation test forward field first private static class forward first annotation join x implement join function tuple2 x x tuple2 x x tuple3 x x x override public tuple3 x x x join tuple2 x x first tuple2 x x second throw exception return null 
semantic property translation test forward field first forward field second private static class forward both annotation join a b c d implement join function tuple2 a b tuple2 c d tuple2 b d override public tuple2 b d join tuple2 a b first tuple2 c d second return new tuple2 b d first f1 second f1 
degree annotation function forward field first forward field second public static class join vertex with vertex degree k vv implement join function vertex k vv vertex k long value vertex k long value private long value zero new long value private vertex k long value output new vertex override public vertex k long value join vertex k vv vertex vertex k long value vertex degree throw exception output f0 vertex f0 output f1 vertex degree null zero vertex degree f1 return output 
degree annotation function forward field first 2.0 forward field second 2.1 public static class join edge with vertex degree k ev d implement join function edge k ev vertex k d edge k tuple2 ev d private tuple2 ev d value and degree new tuple2 private edge k tuple2 ev d output new edge null null value and degree override public edge k tuple2 ev d join edge k ev edge vertex k d vertex throw exception output f0 edge f0 output f1 edge f1 value and degree f0 edge f2 value and degree f1 vertex f1 return output 
degree annotation function forward field first 2.0 2.1 forward field second 2.2 public static class join edge degree with vertex degree k ev d implement join function edge k tuple2 ev d vertex k d edge k tuple3 ev d d private tuple3 ev d d value and degree new tuple3 private edge k tuple3 ev d d output new edge null null value and degree override public edge k tuple3 ev d d join edge k tuple2 ev d edge vertex k d vertex throw exception tuple2 ev d value and degree edge f2 output f0 edge f0 output f1 edge f1 value and degree f0 value and degree f0 value and degree f1 value and degree f1 value and degree f2 vertex f1 return output 
vertex degree forward field first forward field second private static class join vertex with vertex degree t tv implement join function vertex t tv vertex t degree vertex t degree private vertex t degree output new vertex null new degree override public vertex t degree join vertex t tv vertex vertex t degree vertex degree throw exception if vertex degree null output f0 vertex f0 return output else return vertex degree 
maximum degree forward field first private static class project vertex t vt implement flat join function vertex t vt tuple1 t vertex t vt override public void join vertex t vt vertex tuple1 t id collector vertex t vt out throw exception if id null out collect vertex 
maximum degree forward field first private static class project edge t et implement flat join function edge t et tuple1 t edge t et override public void join edge t et edge tuple1 t id collector edge t et out throw exception if id null out collect edge 
bipartite graph forward field first 2.0 forward field second 2.1 private static class projection top simple kt kb ev implement flat join function bipartite edge kt kb ev bipartite edge kt kb ev edge kt tuple2 ev ev private tuple2 ev ev edge value new tuple2 private edge kt tuple2 ev ev edge new edge null null edge value override public void join bipartite edge kt kb ev first bipartite edge kt kb ev second collector edge kt tuple2 ev ev out throw exception if first f0 equal second f0 edge f0 first f0 edge f1 second f0 edge value f0 first f2 edge value f1 second f2 out collect edge 
bipartite graph forward field first 2.0 forward field second 2.1 private static class projection bottom simple kt kb ev implement flat join function bipartite edge kt kb ev bipartite edge kt kb ev edge kb tuple2 ev ev private tuple2 ev ev edge value new tuple2 private edge kb tuple2 ev ev edge new edge null null edge value override public void join bipartite edge kt kb ev first bipartite edge kt kb ev second collector edge kb tuple2 ev ev out throw exception if first f1 equal second f1 edge f0 first f1 edge f1 second f1 edge value f0 first f2 edge value f1 second f2 out collect edge 
bipartite graph forward field first 2.0 2.4 2.2 2.1 forward field second 2.5 2.3 private static class projection top full kt kb ev vvt vvb implement flat join function tuple5 kt kb ev vvt vvb tuple5 kt kb ev vvt vvb edge kt projection kb vvb vvt ev private projection kb vvb vvt ev projection new projection private edge kt projection kb vvb vvt ev edge new edge null null projection override public void join tuple5 kt kb ev vvt vvb first tuple5 kt kb ev vvt vvb second collector edge kt projection kb vvb vvt ev out throw exception if first f0 equal second f0 edge f0 first f0 edge f1 second f0 projection f0 first f1 projection f1 first f4 projection f2 first f3 projection f3 second f3 projection f4 first f2 projection f5 second f2 out collect edge 
bipartite graph forward field first 2.4 2.1 2.2 forward field second 2.5 2.3 private static class projection bottom full kt kb ev vvt vvb implement flat join function tuple5 kt kb ev vvt vvb tuple5 kt kb ev vvt vvb edge kb projection kt vvt vvb ev private projection kt vvt vvb ev projection new projection private edge kb projection kt vvt vvb ev edge new edge null null projection override public void join tuple5 kt kb ev vvt vvb first tuple5 kt kb ev vvt vvb second collector edge kb projection kt vvt vvb ev out throw exception if first f1 equal second f1 edge f0 first f1 edge f1 second f1 projection f0 first f0 projection f1 first f3 projection f2 first f4 projection f3 second f4 projection f4 first f2 projection f5 second f2 out collect edge 
graph forward field first f1 f2 forward field second f0 f1 f2 f3 private static final class project edge with src value k vv ev implement flat join function vertex k vv edge k ev tuple4 k k vv ev override public void join vertex k vv vertex edge k ev edge collector tuple4 k k vv ev collector throw exception collector collect new tuple4 edge get source edge get target vertex get value edge get value 
graph forward field first f0 f1 f2 f3 f4 forward field second f1 f3 private static final class project edge with vertex value k vv ev implement flat join function tuple4 k k vv ev vertex k vv triplet k vv ev override public void join tuple4 k k vv ev triplet with src val set vertex k vv vertex collector triplet k vv ev collector throw exception collector collect new triplet triplet with src val set f0 triplet with src val set f1 triplet with src val set f2 vertex get value triplet with src val set f3 
graph forward field first f0 f1 f2 private static final class project edge k vv ev implement flat join function edge k ev vertex k vv edge k ev public void join edge k ev first vertex k vv second collector edge k ev out out collect first 
graph forward field first f0 f1 f2 private static final class join with vertex on trg k vv ev implement join function edge k ev vertex k vv edge k ev override public edge k ev join edge k ev edge vertex k vv vertex throw exception return edge 
graph forward field first f0 forward field second f1 private static final class project neighbor value k vv ev implement flat join function tuple3 k k edge k ev vertex k vv tuple2 k vv public void join tuple3 k k edge k ev key with edge vertex k vv neighbor collector tuple2 k vv out out collect new tuple2 key with edge f0 neighbor get value 
graph forward field first f0 f2 f1 forward field second f2 private static final class project edge with neighbor k vv ev implement flat join function tuple3 k k edge k ev vertex k vv tuple3 k edge k ev vertex k vv public void join tuple3 k k edge k ev key with edge vertex k vv neighbor collector tuple3 k edge k ev vertex k vv out out collect new tuple3 key with edge f0 key with edge f2 neighbor 
local clustering coefficient forward field first vertex id0 1.0 degree forward field second vertex id0 private static class join vertex degree with triangle count t implement join function vertex t degree tuple2 t long value result t private long value zero new long value private result t output new result override public result t join vertex t degree vertex and degree tuple2 t long value vertex and triangle count throw exception output set vertex id0 vertex and degree f0 output set degree vertex and degree f1 f0 output set triangle count vertex and triangle count null zero vertex and triangle count f1 return output 
triangle listing forward field first vertex id0 vertex id1 vertex id2 forward field second vertex id0 vertex id1 private static final class project triangle t implement join function tuple4 t t t byte value tuple3 t t byte value result t private result t output new result override public result t join tuple4 t t t byte value triplet tuple3 t t byte value edge throw exception output set vertex id0 triplet f0 output set vertex id1 triplet f1 output set vertex id2 triplet f2 output set bitmask byte triplet f3 get value edge f2 get value return output 
local clustering coefficient forward field first vertex id0 degree forward field second vertex id0 private static class join vertex degree with triangle count t implement join function vertex t long value tuple2 t long value result t private long value zero new long value private result t output new result override public result t join vertex t long value vertex and degree tuple2 t long value vertex and triangle count throw exception output set vertex id0 vertex and degree f0 output set degree vertex and degree f1 output set triangle count vertex and triangle count null zero vertex and triangle count f1 return output 
triangle listing forward field first vertex id0 vertex id1 vertex id2 forward field second vertex id0 vertex id1 private static final class project triangle t implement join function tuple3 t t t tuple2 t t result t private result t output new result override public result t join tuple3 t t t triplet tuple2 t t edge throw exception output set vertex id0 triplet f0 output set vertex id1 triplet f1 output set vertex id2 triplet f2 return output 
hit forward field first forward field second private static class hubbiness t implement co group function tuple3 t double value double value tuple2 t t tuple2 t double value private tuple2 t double value output new tuple2 override public void co group iterable tuple3 t double value double value vertex iterable tuple2 t t edge collector tuple2 t double value out throw exception output f1 vertex iterator next f2 for tuple2 t t edge edge output f0 edge f0 out collect output 
hit forward field first forward field second private static class authority t implement co group function tuple2 t double value tuple2 t t tuple2 t double value private tuple2 t double value output new tuple2 override public void co group iterable tuple2 t double value vertex iterable tuple2 t t edge collector tuple2 t double value out throw exception output f1 vertex iterator next f1 for tuple2 t t edge edge output f0 edge f1 out collect output 
hit forward field first forward field second private static class join and normalize hub and authority t extend rich join function tuple2 t double value tuple2 t double value tuple3 t double value double value private tuple3 t double value double value output new tuple3 null new double value new double value private double hubbiness root sum square private double authority root sum square override public void open configuration parameter throw exception super open parameter collection double value hubbiness sum square get runtime context get broadcast variable hubbiness sum square iterator double value hubbiness sum square iterator hubbiness sum square iterator this hubbiness root sum square hubbiness sum square iterator have next math sqrt hubbiness sum square iterator next get value double na n collection double value authority sum square get runtime context get broadcast variable authority sum square iterator double value authority sum square iterator authority sum square iterator authority root sum squared authority sum square iterator have next math sqrt authority sum square iterator next get value double na n override public tuple3 t double value double value join tuple2 t double value hubbiness tuple2 t double value authority throw exception output f0 authority null hubbiness f0 authority f0 output f1 set value hubbiness null 0.0 hubbiness f1 get value hubbiness root sum square output f2 set value authority null 0.0 authority f1 get value authority root sum square return output 
hit forward field first forward field second private static class change in score t extend rich join function tuple3 t double value double value tuple3 t double value double value tuple3 t double value double value private boolean be initial superstep private double change in score override public void open configuration parameter throw exception super open parameter be initial superstep get iteration runtime context get superstep number change in score be initial superstep 1.0 0.0 override public void close throw exception super close double sum aggregator agg get iteration runtime context get iteration aggregator change in score agg aggregate change in score override public tuple3 t double value double value join tuple3 t double value double value first tuple3 t double value double value second throw exception if be initial superstep change in score math abs second f1 get value first f1 get value change in score math abs second f2 get value first f2 get value return second 
page rank forward field first forward field second private static class change in score t extend rich join function tuple2 t double value tuple2 t double value tuple2 t double value private double change in score override public void open configuration parameter throw exception super open parameter change in score 0.0 override public void close throw exception super close double sum aggregator agg get iteration runtime context get iteration aggregator change in score agg aggregate change in score override public tuple2 t double value join tuple2 t double value first tuple2 t double value second throw exception change in score math abs second f1 get value first f1 get value return second 
vertex centric iteration suppress warning serial forward field first f0 forward field second f1 f1 private static final class append vertex state k vv message implement join function vertex k vv tuple2 k either null value message tuple2 vertex k vv either null value message private tuple2 vertex k vv either null value message out tuple new tuple2 public tuple2 vertex k vv either null value message join vertex k vv vertex tuple2 k either null value message message out tuple f0 vertex out tuple f1 message f1 return out tuple 
co group connect component i t case forward field first f1 f1 forward field second f0 f0 private static final class min id and update implement co group function tuple2 long long tuple2 long long tuple2 long long private static final long serial version u i d 1 l override public void co group iterable tuple2 long long first iterable tuple2 long long second collector tuple2 long long out throw exception iterator tuple2 long long current second iterator if current have next throw new exception error id not encounter before tuple2 long long old current next long old id old f1 long minimum component i d long max value for tuple2 long long candidate first long candidate component i d candidate f1 if candidate component i d minimum component i d minimum component i d candidate component i d if minimum component i d old id out collect new tuple2 old f0 minimum component i d 
co group connect component second i t case forward field first forward field second private static final class min id and update extend rich co group function tuple2 long long tuple2 long long tuple2 long long override public void co group iterable tuple2 long long candidate iterable tuple2 long long current collector tuple2 long long out iterator tuple2 long long iterator current iterator if iterator have next throw new runtime exception error id not encounter before tuple2 long long old iterator next long minimum component i d long max value for tuple2 long long candidate candidate long candidate component i d candidate f1 if candidate component i d minimum component i d minimum component i d candidate component i d if minimum component i d old f1 old f1 minimum component i d out collect old 
relational query compiler test forward field first f0 f1 private static class join li o implement flat join function tuple2 long integer tuple2 long double tuple3 long integer double override public void join tuple2 long integer first tuple2 long double second collector tuple3 long integer double out throw exception not go to be execute 
connected component co group test forward field first f0 f0 forward field second f0 f0 private static class dummy co group function implement co group function tuple2 long long tuple2 long long tuple2 long long override public void co group iterable tuple2 long long first iterable tuple2 long long second collector tuple2 long long out throw exception win t be execute 
