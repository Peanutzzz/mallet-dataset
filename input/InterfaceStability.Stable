configuration suppress warning all interface audience public interface stability stable public class configuration implement iterable map entry string string writable private static final logger log logger factory get logger configuration class private static final logger log deprecation logger factory get logger org apache hadoop conf configuration deprecation private boolean quietmode true private static final string default string check testingforemptydefaultvalue private static boolean restrict system prop default false private boolean restrict system prop restrict system prop default private boolean allow null value property false private static class resource private final object resource private final string name private final boolean restrict parser public resource object resource this resource resource to string public resource object resource boolean use restrict parser this resource resource to string use restrict parser public resource object resource string name this resource name get restrict parser default resource public resource object resource string name boolean restrict parser this resource resource this name name this restrict parser restrict parser public string get name return name public object get resource return resource public boolean be parser restrict return restrict parser override public string to string return name private static boolean get restrict parser default object resource if resource instanceof string return false user group information user try user user group information get current user catch i o exception e throw new runtime exception unable to determine current user e return user get real user null list of configuration resource private array list resource resource new array list resource the value report as the setting resource when a key be set by code rather than a file resource by dump configuration static final string unknown resource unknown list of configuration parameter mark b final b private set string final parameter collection new set from map new concurrent hash map string boolean private boolean load default true configuration object private static final weak hash map configuration object registry new weak hash map configuration object list of default resource resource be load in the order of the list entry private static final copy on write array list string default resource new copy on write array list string private static final map class loader map string weak reference class cache class new weak hash map class loader map string weak reference class sentinel value to store negative cache result in link cache class private static final class negative cache sentinel negative cache sentinel class store the mapping of key to the resource which modify or load the key most recently create lazily to avoid waste memory private volatile map string string update resource specify exact input factory to avoid time find correct one factory be reusable across un synchronize thread once initialize private static final wstx input factory xml input factory new wstx input factory class to keep the information about the key which replace the deprecate one this class store the new key which replace the deprecate key and also give a provision to have a custom message for each of the deprecate key that be be replace it also provide method to get the appropriate warning message which can be log whenever the deprecate key be use private static class deprecate key info private final string new key private final string custom message private final atomic boolean access new atomic boolean false deprecate key info string new key string custom message this new key new key this custom message custom message private final string get warn message string key return get warn message key null method to provide the warning message it give the custom message if non null and default message otherwise param key the associate deprecate key param source the property source return message that be to be log when a deprecate key be use private string get warn message string key string source string warning message if custom message null string builder message new string builder key if source null message append in source message append be deprecate instead use for int i i new key length i message append new key i if i new key length message append warn message message to string else warn message custom message return warn message boolean get and set access return access get and set true public void clear access access set false a pend addition to the global set of deprecate key public static class deprecation delta private final string key private final string new key private final string custom message deprecation delta string key string new key string custom message precondition check not null key precondition check not null new key precondition check argument new key length this key key this new key new key this custom message custom message public deprecation delta string key string new key string custom message this key new string new key custom message public deprecation delta string key string new key this key new string new key null public string get key return key public string get new key return new key public string get custom message return custom message the set of all key which be deprecate deprecation context object be immutable private static class deprecation context store the deprecate key the new key which replace the deprecate key and custom message if any provide private final map string deprecate key info deprecate key map store a mapping from superseding key to the key which they deprecate private final map string string reverse deprecate key map create a new deprecation context by copy a previous deprecation context and add some delta param other the previous deprecation context to copy or null to start from nothing param delta the delta to apply suppress warning unchecked deprecation context deprecation context other deprecation delta delta hash map string deprecate key info new deprecate key map new hash map string deprecate key info hash map string string new reverse deprecate key map new hash map string string if other null for entry string deprecate key info entry other deprecate key map entry set new deprecate key map put entry get key entry get value for entry string string entry other reverse deprecate key map entry set new reverse deprecate key map put entry get key entry get value for deprecation delta delta delta if new deprecate key map contain key delta get key deprecate key info new key info new deprecate key info delta get new key delta get custom message new deprecate key map put delta key new key info for string new key delta get new key new reverse deprecate key map put new key delta key this deprecate key map unmodifiable map decorate new deprecated key map this reverse deprecate key map unmodifiable map decorate new reverse deprecate key map map string deprecate key info get deprecate key map return deprecate key map map string string get reverse deprecate key map return reverse deprecate key map private static deprecation delta default deprecation new deprecation delta new deprecation delta topology script file name common configuration key net topology script file name key new deprecation delta topology script number arg common configuration key net topology script number arg key new deprecation delta hadoop configure node mapping common configuration key net topology configure node mapping key new deprecation delta topology node switch mapping impl common configuration key net topology node switch mapping impl key new deprecation delta df df interval common configuration key fs df interval key new deprecation delta f default name common configuration key f default name key new deprecation delta df umaskmode common configuration key fs permission umask key new deprecation delta dfs nf export allow host common configuration key nf export allow host key the global deprecation context private static atomic reference deprecation context deprecation context new atomic reference deprecation context new deprecation context null default deprecation add a set of deprecate key to the global deprecation this method be lockless it work by means of create a new deprecation context base on the old one and then atomically swap in the new context if someone else update the context in between we read the old context and swap in the new one we try again until we win the race param delta the deprecation to add public static void add deprecation deprecation delta delta deprecation context prev next do prev deprecation context get next new deprecation context prev delta while deprecation context compare and set prev next add the deprecate key to the global deprecation map it do not override any exist entry in the deprecation map this be to be use only by the developer in order to add deprecation of key and attempt to call this method after loading resource once would lead to tt unsupported operation exception tt if a key be deprecate in favor of multiple key they be all treat as alias of each other and set any one of they reset all the other to the new value if you have multiple deprecation entry to add it be more efficient to use add deprecation deprecation delta delta instead param key param new key param custom message deprecate use link add deprecation string key string new key string custom message instead deprecate public static void add deprecation string key string new key string custom message add deprecation new deprecation delta new deprecation delta key new key custom message add the deprecate key to the global deprecation map it do not override any exist entry in the deprecation map this be to be use only by the developer in order to add deprecation of key and attempt to call this method after loading resource once would lead to tt unsupported operation exception tt if you have multiple deprecation entry to add it be more efficient to use add deprecation deprecation delta delta instead param key param new key param custom message public static void add deprecation string key string new key string custom message add deprecation key new string new key custom message add the deprecate key to the global deprecation map when no custom message be provide it do not override any exist entry in the deprecation map this be to be use only by the developer in order to add deprecation of key and attempt to call this method after loading resource once would lead to tt unsupported operation exception tt if a key be deprecate in favor of multiple key they be all treat as alias of each other and set any one of they reset all the other to the new value if you have multiple deprecation entry to add it be more efficient to use add deprecation deprecation delta delta instead param key key that be to be deprecate param new key list of key that take up the value of deprecate key deprecate use link add deprecation string key string new key instead deprecate public static void add deprecation string key string new key add deprecation key new key null add the deprecate key to the global deprecation map when no custom message be provide it do not override any exist entry in the deprecation map this be to be use only by the developer in order to add deprecation of key and attempt to call this method after loading resource once would lead to tt unsupported operation exception tt if you have multiple deprecation entry to add it be more efficient to use add deprecation deprecation delta delta instead param key key that be to be deprecate param new key key that take up the value of deprecate key public static void add deprecation string key string new key add deprecation key new string new key null check whether the give code key code be deprecate param key the parameter which be to be check for deprecation return code true code if the key be deprecate and code false code otherwise public static boolean be deprecate string key return deprecation context get get deprecate key map contain key key private static string get deprecate key string key return deprecation context get get reverse deprecate key map get key private static deprecate key info get deprecate key info string key return deprecation context get get deprecate key map get key set all deprecate property that be not currently set but have a correspond new property that be set useful for iterate the property when all deprecate property for currently set property need to be present public void set deprecate property deprecation context deprecation deprecation context get property prop get prop property overlay get overlay for map entry string deprecate key info entry deprecation get deprecate key map entry set string dep key entry get key if overlay contain dep key for string new key entry get value new key string val overlay get property new key if val null prop set property dep key val overlay set property dep key val break check for the presence of the property code name code in the deprecation map return the first of the list of new key if present in the deprecation map or the code name code itself if the property be not presently set but the property map contain a entry for the deprecate key the value of the deprecate key be set as the value for the provide property name param deprecation deprecation context param name the property name return the first property in the list of property map the code name code or the code name code itself private string handle deprecation deprecation context deprecation string name if null name name name trim initialize the return value with request name string name new string name deprecate key be log once and a update name be return deprecate key info key info deprecation get deprecate key map get name if key info null if key info get and set access log deprecation key info get warn message name override return value for deprecate key name key info new key if there be no overlay value we can return early property overlay property get overlay if overlay property be empty return name update property and overlay with reverse lookup value for string n name string deprecate key deprecation get reverse deprecate key map get n if deprecate key null overlay property contain key n string deprecate value overlay property get property deprecate key if deprecate value null get prop set property n deprecate value overlay property set property n deprecate value return name private void handle deprecation log debug handle deprecation for all property in config deprecation context deprecation deprecation context get set object key new hash set object key add all get prop key set for object item key log debug handle deprecation for string item handle deprecation deprecation string item static add default resource add default resource core default shade xml add default resource core default testing xml private property property private property overlay private class loader class loader class loader thread current thread get context class loader if class loader null class loader configuration class get class loader a new configuration public configuration this true a new configuration where the behavior of read from the default resource can be turn off if the parameter code load default be false the new instance will not load resource from the default file param load default specify whether to load from the default file public configuration boolean load default this load default load default synchronize configuration class registry put this null a new configuration with the same setting clone from another param other the configuration from which to clone setting suppress warning unchecked public configuration configuration other this resource array list resource other resource clone synchronize other if other property null this property property other property clone if other overlay null this overlay property other overlay clone this restrict system prop other restrict system prop if other update resource null this update resource new concurrent hash map string string other update resource this final parameter collection new set from map new concurrent hash map string boolean this final parameter add all other final parameter synchronize configuration class registry put this null this class loader other class loader this load default other load default set quiet mode other get quiet mode reload exist configuration instance public static synchronize void reload exist configuration if log be debug enable log debug reload registry key set size exist configuration for configuration conf registry key set conf reload configuration add a default resource resource be load in the order of the resource add param name file name file should be present in the classpath public static synchronize void add default resource string name if default resource contain name default resource add name for configuration conf registry key set if conf load default conf reload configuration public static void set restrict system property default boolean val restrict system prop default val public void set restrict system property boolean val this restrict system prop val add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param name resource to be add the classpath be examine for a file with that name public void add resource string name add resource object new resource name public void add resource string name boolean restricted parser add resource object new resource name restrict parser add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param url url of the resource to be add the local filesystem be examine directly to find the resource without refer to the classpath public void add resource url url add resource object new resource url public void add resource url url boolean restricted parser add resource object new resource url restrict parser add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param file file path of resource to be add the local filesystem be examine directly to find the resource without refer to the classpath public void add resource path file add resource object new resource file public void add resource path file boolean restricted parser add resource object new resource file restrict parser add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a warn the contents of the input stream will be cache by this method so use this sparingly because it do increase the memory consumption param in input stream to deserialize the object from in will be read from when a get or set be call next after it be read the stream will be close public void add resource input stream in add resource object new resource in public void add resource input stream in boolean restricted parser add resource object new resource in restricted parser add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param in input stream to deserialize the object from param name the name of the resource because input stream to string be not very descriptive some time public void add resource input stream in string name add resource object new resource in name public void add resource input stream in string name boolean restricted parser add resource object new resource in name restrict parser add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param conf configuration object from which to load property public void add resource configuration conf add resource object new resource conf get prop conf restrict system prop reload configuration from previously add resource this method will clear all the configuration read from the add resource and final parameter this will make the resource to be read again before access the value value that be add via set method will overlay value read from the resource public synchronize void reload configuration property null trigger reload final parameter clear clear site limit private synchronize void add resource object resource resource resource add resource add to resource restrict system prop resource be parser restrict reload configuration private static final int max subst private static final int sub start idx private static final int sub end idx sub start idx this be a manual implementation of the follow regex u0020 it can be 15x more efficient than a regex matcher as demonstrate by hadoop this be noticeable with hadoop app build on the assumption configuration get be a o hash table lookup especially when the eval be a long string param eval a string that may contain variable require expansion return a element int array re such that eval substring re res be var for the leave most occurrence of var in eval if no variable be find be return private static int find sub variable string eval int result int match start int left brace scan for a brace first because it be less frequent than that can occur in nest class name match loop for match start left brace eval index of match start minimum left brace position follow left brace right brace of a smallest valid expression c leave brace c length eval length left brace eval index of match start int match len if eval char at left brace int sub start left brace after for int i sub start i eval length i switch eval char at i case if match len match result sub start idx sub start result sub end idx sub start match len break match loop fall through to skip char case case match start i continue match loop default match len scan from to the end of eval and no reset via no match break match loop else not a start of a variable match start left brace return result attempt to repeatedly expand the value code expr by replace the leave most substring of the form var in the follow precedence order ol li by the value of the environment variable var if define li li by the value of the java system property var if define li li by the value of the configuration key var if define li ol if var be unbounded the current state of expansion prefix var suffix be return p this function also detect self referential substitution i e pre code foo bar foo bar pre if a cycle be detect then the original expr be return loop involve multiple substitution be not detect param expr the literal value of a config key return null if expr be null otherwise the value result from expand expr use the algorithm above throw illegal argument exception when more than link configuration max subst replacement be require private string substitute var string expr if expr null return null string eval expr for int s s max subst s final int var bound find sub variable eval if var bound sub start idx return eval final string var eval substring var bound sub start idx var bound sub end idx string val null if restrict system prop try if var start with env var length string v var substring int i for i have length i char c v char at i if c i have length v char at i val getenv v substr i if val null val length val v substr i break else if c val getenv v substr i if val null val v substr i break if i have length val getenv v else val get property var catch security exception se log warn unexpected security exception in configuration se if val null val get raw var if val null return eval return literal var var be unbound final int dollar var bound sub start idx length final int after right brace var bound sub end idx length final string ref var eval substr dollar after right brace detect self referential value if val contain ref var return expr return original expression if there be a loop substitute eval eval substr dollar val eval substring after right brace throw new illegal state exception variable substitution depth too large max subst expr string getenv string name return system getenv name string get property string key return system get property key get the value of the code name code property code null code if no such property exist if the key be deprecate it return the value of the first key which replace the deprecate key and be not null value be process for a href variable expansion variable expansion a before be return param name the property name will be trim before get value return the value of the code name code or its replace property or null if no such property exist public string get string name string name handle deprecation deprecation context get name string result null for string n name result substitute var get prop get property n return result set configuration to allow key without value during setup intend for use during testing param val if true will allow configuration to store key without value visible for test public void set allow null value property boolean val this allow null value property val public void set restrict system prop boolean val this restrict system prop val return existence of the code name code property but only for name which have no valid value usually non existent or comment out in xml param name the property name return true if the property code name code exist without value visible for test public boolean only key exist string name string name handle deprecation deprecation context get name for string n name if get prop get property n default string check equal default string check return true return false get the value of the code name code property as a trim code string code code null code if no such property exist if the key be deprecate it return the value of the first key which replace the deprecate key and be not null value be process for a href variable expansion variable expansion a before be return param name the property name return the value of the code name code or its replace property or null if no such property exist public string get trim string name string value get name if null value return null else return value trim get the value of the code name code property as a trim code string code code default value code if no such property exist see configuration get trim for more detail param name the property name param default value the property default value return the value of the code name code or default value if it be not set public string get trim string name string default value string ret get trim name return ret null default value ret get the value of the code name code property without do a href variable expansion variable expansion a if the key be deprecate it return the value of the first key which replace the deprecate key and be not null param name the property name return the value of the code name code property or its replace property and null if no such property exist public string get raw string name string name handle deprecation deprecation context get name string result null for string n name result get prop get property n return result return alternative name non deprecate key or previously set deprecate key for a give non deprecate key if the give key be deprecate return null param name property name return alternative name private string get alternative name string name string alt name null deprecate key info key info null deprecation context cur deprecation context get string dep key cur get reverse deprecate key map get name if dep key null key info cur get deprecate key map get dep key if key info new key length if get prop contain key dep key if deprecate key be previously set explicitly list string list new array list string list add all array as list key info new key list add dep key alt name list to array new string list size else alt name key info new key return alt name set the code value code of the code name code property if code name code be deprecate or there be a deprecated name associate to it it set the value to both name name will be trim before put into configuration param name property name param value property value public void set string name string value set name value null set the code value code of the code name code property if code name code be deprecate it also set the code value code to the key that replace the deprecate key name will be trim before put into configuration param name property name param value property value param source the place that this configuration value come from for debugging throw illegal argument exception when the value or name be null public void set string name string value string source precondition check argument name null property name must not be null precondition check argument value null the value of property s must not be null name name name trim deprecation context deprecation deprecation context get if deprecation get deprecate key map be empty get prop get overlay set property name value get prop set property name value string new source source null programmatically source if be deprecate name put into update resource name new string new source string alt name get alternative name name if alt name null for string n alt name if n equal name get overlay set property n value get prop set property n value put into update resource n new string new source else string name handle deprecation deprecation context get name string alt source because name be deprecate for string n name get overlay set property n value get prop set property n value put into update resource n new string alt source visible for test void log deprecation string message log deprecation info message void log deprecation once string name string source deprecate key info key info get deprecate key info name if key info null key info get and set access log deprecation info key info get warn message name source unset a previously set property public synchronize void unset string name string name null if be deprecate name name get alternative name name if name null name new string name else name handle deprecation deprecation context get name for string n name get overlay remove n get prop remove n set a property if it be currently unset param name the property name param value the new value public synchronize void set if unset string name string value if get name null set name value private synchronize property get overlay if overlay null overlay new property return overlay get the value of the code name code if the key be deprecate it return the value of the first key which replace the deprecate key and be not null if no such property exist then code default value code be return param name property name will be trim before get value param default value default value return property value or code default value code if the property doesn t exist public string get string name string default value string name handle deprecation deprecation context get name string result null for string n name result substitute var get prop get property n default value return result get the value of the code name code property as a code int code if no such property exist the provide default value be return or if the specify value be not a valid code int code then a error be throw param name property name param default value default value throw number format exception when the value be invalid return property value as a code int code or code default value code public int get int string name int default value string value string get trim name if value string null return default value string hex string get hex digit value string if hex string null return integer parse int hex string return integer parse int value string get the value of the code name code property as a set of comma delimit code int code value if no such property exist a empty array be return param name property name return property value interpret as a array of comma delimit code int code value public int get int string name string string get trim string name int int new int string length for int i i string length i int i integer parse int string i return int set the value of the code name code property to a code int code param name property name param value code int code value of the property public void set int string name int value set name integer to string value get the value of the code name code property as a code long code if no such property exist the provide default value be return or if the specify value be not a valid code long code then a error be throw param name property name param default value default value throw number format exception when the value be invalid return property value as a code long code or code default value code public long get long string name long default value string value string get trim name if value string null return default value string hex string get hex digit value string if hex string null return long parse long hex string return long parse long value string get the value of the code name code property as a code long code or human readable format if no such property exist the provide default value be return or if the specify value be not a valid code long code or human readable format then a error be throw you can use the follow suffix case insensitive k kilo m mega g giga t tera p peta e exa param name property name param default value default value throw number format exception when the value be invalid return property value as a code long code or code default value code public long get long byte string name long default value string value string get trim name if value string null return default value return string util traditional binary prefix string2long value string private string get hex digit string value boolean negative false string str value string hex string null if value start with negative true str value substr if str start with 0x str start with 0 x hex string str substring if negative hex string hex string return hex string return null set the value of the code name code property to a code long code param name property name param value code long code value of the property public void set long string name long value set name long to string value get the value of the code name code property as a code float code if no such property exist the provide default value be return or if the specify value be not a valid code float code then a error be throw param name property name param default value default value throw number format exception when the value be invalid return property value as a code float code or code default value code public float get float string name float default value string value string get trim name if value string null return default value return float parse float value string set the value of the code name code property to a code float code param name property name param value property value public void set float string name float value set name float to string value get the value of the code name code property as a code double code if no such property exist the provide default value be return or if the specify value be not a valid code double code then a error be throw param name property name param default value default value throw number format exception when the value be invalid return property value as a code double code or code default value code public double get double string name double default value string value string get trim name if value string null return default value return double parse double value string set the value of the code name code property to a code double code param name property name param value property value public void set double string name double value set name double to string value get the value of the code name code property as a code boolean code if no such property be specify or if the specify value be not a valid code boolean code then code default value code be return param name property name param default value default value return property value as a code boolean code or code default value code public boolean get boolean string name boolean default value string value string get trim name if null value string value string be empty return default value if string util equal ignore case true value string return true else if string util equal ignore case false value string return false else return default value set the value of the code name code property to a code boolean code param name property name param value code boolean code value of the property public void set boolean string name boolean value set name boolean to string value set the give property if it be currently unset param name property name param value new value public void set boolean if unset string name boolean value set if unset name boolean to string value set the value of the code name code property to the give type this be equivalent to code set lt name gt value to string code param name property name param value new value public t extend enum t void set enum string name t value set name value to string return value match this enumerate type note that the return value be trim by this method param name property name param default value value return if no mapping exist throw illegal argument exception if mapping be illegal for the type provide public t extend enum t t get enum string name t default value final string val get trim name return null val default value enum value of default value get declare class val enum parse time duration n time unit unit return time unit nanosecond string suffix return n we time unit unit return time unit microsecond string suffix return we ms time unit unit return time unit millisecond string suffix return ms s time unit unit return time unit seconds string suffix return s m time unit unit return time unit minute string suffix return m h time unit unit return time unit hour string suffix return h d time unit unit return time unit day string suffix return d abstract time unit unit abstract string suffix static parse time duration unit for string s for parsed time duration ptd value iteration order be in decl order so seconds match last if s end with ptd suffix return ptd return null static parse time duration unit for time unit unit for parsed time duration ptd value if ptd unit unit return ptd return null set the value of code name code to the give time duration this be equivalent to code set lt name gt value lt time suffix gt code param name property name param value time duration param unit unit of time public void set time duration string name long value time unit unit set name value parse time duration unit for unit suffix return time duration in the give time unit valid unit be encode in property as suffix nanosecond ns microsecond we millisecond ms seconds s minute be hour h and day d param name property name param default value value return if no mapping exist param unit unit to convert the store property if it exist throw number format exception if the property strip of its unit be not a number public long get time duration string name long default value time unit unit string v str get name if null v str return default value else return get time duration helper name v str unit public long get time duration string name string default value time unit unit string v str get name if null v str return get time duration helper name default value unit else return get time duration helper name v str unit return time duration in the give time unit valid unit be encode in property as suffix nanosecond ns microsecond we millisecond ms seconds s minute be hour h and day d param name property name param v str the string value with time unit suffix to be convert param unit unit to convert the store property if it exist public long get time duration helper string name string v str time unit unit v str v str trim v str string util to lower case v str parse time duration v unit parse time duration unit for v str if null v unit log deprecation no unit for name v str assume unit v unit parse time duration unit for unit else v str v str substr v str last index of v unit suffix long raw long parse long v str long convert unit convert raw v unit unit if v unit unit convert converted unit raw log deprecation possible loss of precision convert v str v unit suffix to unit for name return convert public long get time duration string name time unit unit string string get trim string name long duration new long string length for int i i string length i duration i get time duration helper name string i unit return duration get the storage size from the config or return the default value the unit of return value be specify in target unit param name key name param default value default value e g mb param target unit the unit that we want result to be in return double format in target unit public double get storage size string name string default value storage unit target unit precondition check state be not blank name key can not be blank string v string get name if be blank v string v string default value please note there be a bit of subtlety here if the user specify the default unit as 1 g b but the request unit be mb we will return the format in mb even think the default string be specify in gb convert a string like 1 g b to to unit specify in target unit storage size measure storage size parse v string return convert storage unit measure get value measure get unit target unit get storage size from a config file param name key to read param default value the default value to return in case the key be not present param target unit the storage unit that should be use for the return value return double value in the storage unit specify public double get storage size string name double default value storage unit target unit precondition check not null target unit conversion unit can not be null precondition check state be not blank name name can not be blank string v string get name if be blank v string return target unit get default default value storage size measure storage size parse v string return convert storage unit measure get value measure get unit target unit set storage size for the specify key param name key to set param value the numeric value to set param unit storage unit to be use public void set storage size string name double value storage unit unit set name value unit get short name convert the value from one storage unit to another param value value param source unit source unit to convert from param target unit target unit return double private double convert storage unit double value storage unit source unit storage unit target unit double byte value source unit to byte value return target unit from byte byte value get the value of the code name code property as a code pattern code if no such property be specify or if the specify value be not a valid code pattern code then code default value code be return note that the return value be not trim by this method param name property name param default value default value return property value as a compile pattern or default value public pattern get pattern string name pattern default value string val string get name if null val string val string be empty return default value try return pattern compile val string catch pattern syntax exception pse log warn regular expression val string for property name not valid use default pse return default value set the give property to code pattern code if the pattern be pass as null set the empty pattern which result in further call to get pattern return the default value param name property name param pattern new value public void set pattern string name pattern pattern assert pattern null pattern can not be null set name pattern pattern get information about why a property be set typically this be the path to the resource object file url etc the property come from but it can also indicate that it be set programmatically or because of the command line param name the property name to get the source of return null if the property or its source wasn t find otherwise return a list of the source of the resource the older source be the first one in the list so for example if a configuration be set from the command line and then write out to a file that be read back in the first entry would indicate that it be set from the command line while the second one would indicate the file that the new configuration be read in from interface stability unstable public synchronize string get property source string name if property null if property be null it mean a resource be newly add but the prop be clear so as to load it upon future request so let force a load by ask a property list get prop return a null right away if we property still haven t load or the resource mapping isn t define if property null update resource null return null else string source update resource get name if source null return null else return array copy of source source length a class that represent a set of positive integer range it parse string of the form 2 - 3 5,7 where range be separate by comma and the lower upper bound be separate by dash either the lower or upper bind may be omit mean all value up to or over so the string above means and public static class integer range implement iterable integer private static class range int start int end private static class range number iterator implement iterator integer iterator range internal int at int end public range number iterator list range range if range null internal range iterator at end override public boolean have next if at end return true else if internal null return internal have next return false override public integer next if at end at return at else if internal null range find internal next if find null at find start end find end at return at return null override public void remove throw new unsupported operation exception list range range new array list range public integer range public integer range string new value string tokenizer itr new string tokenizer new value while itr have more token string rng itr next token trim string part rng split if part length part length throw new illegal argument exception integer range badly form rng range be new range be start convert to int part if part length be end convert to int part integer max value else be end be start if r start r end throw new illegal argument exception integer range from r start to r end be invalid range add r convert a string to a int treat empty string as the default value param value the string value param default value the value for if the string be empty return the desire integer private static int convert to int string value int default value string trim value trim if trim length return default value return integer parse int trim be the give value in the set of range param value the value to check return be the value in the range public boolean be include int value for range be range if r start value value r end return true return false return true if there be no value in this range else false public boolean be empty return range null range be empty override public string to string string builder result new string builder boolean first true for range be range if first first false else result append result append r start result append result append r end return result to string get range start for the first integer range return range start public int get range start if range null range be empty return range be range get return be start override public iterator integer iterator return new range number iterator range parse the give attribute as a set of integer range param name the attribute name param default value the default value if it be not set return a new set of range from the configure value public integer range get range string name string default value return new integer range get name default value get the comma delimit value of the code name code property as a collection of code string code s if no such property be specify then empty collection be return p this be a optimize version of link get string string param name property name return property value as a collection of code string code s public collection string get string collection string name string value string get name return string util get string collection value string get the comma delimit value of the code name code property as a array of code string code s if no such property be specify then code null code be return param name property name return property value as a array of code string code s or code null code public string get string string name string value string get name return string util get string value string get the comma delimit value of the code name code property as a array of code string code s if no such property be specify then default value be return param name property name param default value the default value return property value as a array of code string code s or default value public string get string string name string default value string value string get name if value string null return default value else return string util get string value string get the comma delimit value of the code name code property as a collection of code string code s trimmed of the lead and trail whitespace if no such property be specify then empty code collection code be return param name property name return property value as a collection of code string code s or empty code collection code public collection string get trim string collection string name string value string get name if null value string collection string empty new array list string return empty return string util get trim string collection value string get the comma delimit value of the code name code property as a array of code string code s trimmed of the lead and trail whitespace if no such property be specify then a empty array be return param name property name return property value as a array of trim code string code s or empty array public string get trim string string name string value string get name return string util get trim string value string get the comma delimit value of the code name code property as a array of code string code s trimmed of the lead and trail whitespace if no such property be specify then default value be return param name property name param default value the default value return property value as a array of trim code string code s or default value public string get trim string string name string default value string value string get name if null value string return default value else return string util get trim string value string set the array of string value for the code name code property as as comma delimit value param name property name param value the value public void set string string name string value set name string util array to string value get the value for a know password configuration element in order to enable the elimination of clear text password in config this method attempt to resolve the property name as a alias through the credential provider api and conditionally fallsback to config param name property name return password public char get password string name throw i o exception char pass null pass get password from credential provider name if pass null pass get password from config name return pass get the credential entry by name from a credential provider handle key deprecation param provider a credential provider param name alias of the credential return the credential entry or null if not find private credential entry get credential entry credential provider provider string name throw i o exception credential entry entry provider get credential entry name if entry null return entry the old name be store in the credential provider string old name get deprecate key name if old name null entry provider get credential entry old name if entry null log deprecation once old name provider to string return entry the name be deprecate deprecate key info key info get deprecate key info name if key info null key info new key null for string new name key info new key entry provider get credential entry new name if entry null log deprecation once name null return entry return null try and resolve the provide element name as a credential provider alias param name alias of the provision credential return password or null if not find throw i o exception protect char get password from credential provider string name throw i o exception char pass null try list credential provider provider credential provider factory get provider this if provider null for credential provider provider provider try credential entry entry get credential entry provider name if entry null pass entry get credential break catch i o exception ioe throw new i o exception can t get key name from key provider of type provider get class get name ioe catch i o exception ioe throw new i o exception configuration problem with provider path ioe return pass fallback to clear text password in configuration param name return clear text password or null protected char get password from config string name char pass null if get boolean credential provider clear text fallback common configuration key public hadoop security credential clear text fallback default string pass str get name if pass str null pass pass str to char array return pass get the socket address for code host property code as a code inet socket address code if code host property code be code null code code address property code will be use this be useful for case where we want to differentiate between host bind address and address client should use to establish connection param host property bind host property name param address property address property name param default address value the default value param default port the default port return inet socket address public inet socket address get socket addr string host property string address property string default address value int default port inet socket address bind addr get socket addr address property default address value default port final string host get host property if host null host be empty return bind addr return net util create socket addr host bind addr get port host property get the socket address for code name code property as a code inet socket address code param name property name param default address the default value param default port the default port return inet socket address public inet socket address get socket addr string name string default address int default port final string address get trim name default address return net util create socket addr address default port name set the socket address for the code name code property as a code host port code public void set socket addr string name inet socket address addr set name net util get host port string addr set the socket address a client can use to connect for the code name code property as a code host port code the wildcard address be replace with the local host s address if the host and address property be configure the host component of the address will be combine with the port component of the addr to generate the address this be to allow optional control over which host name be use in multi home bind host case where a host can have multiple name param host property the bind host configuration name param address property the service address configuration name param default address value the service default address configuration value param addr inet socket address of the service listener return inet socket address for client to connect public inet socket address update connect addr string host property string address property string default address value inet socket address addr final string host get host property final string connect host port get trim address property default address value if host null host be empty connect host port null connect host port be empty not we case fall back to original logic return update connect addr address property addr final string connect host connect host port split create connect address use client address hostname and server port return update connect addr address property net util create socket addr for host connect host addr get port set the socket address a client can use to connect for the code name code property as a code host port code the wildcard address be replace with the local host s address param name property name param addr inet socket address of a listener to store in the give property return inet socket address for client to connect public inet socket address update connect addr string name inet socket address addr final inet socket address connect addr net util get connect address addr set socket addr name connect addr return connect addr load a class by name param name the class name return the class object throw class not find exception if the class be not find public class get class by name string name throw class not find exception class ret get class by name or null name if ret null throw new class not find exception class name not find return ret load a class by name return null rather than throw a exception if it couldn t be load this be to avoid the overhead of create a exception param name the class name return the class object or null if it could not be find public class get class by name or null string name map string weak reference class map synchronize cache class map cache class get class loader if map null map collection synchronize map new weak hash map string weak reference class cache class put class loader map class clazz null weak reference class ref map get name if ref null clazz ref get if clazz null try clazz class for name name true class loader catch class not find exception e leave a marker that the class isn t find map put name new weak reference class negative cache sentinel return null two putter can race here but they will put the same class map put name new weak reference class clazz return clazz else if clazz negative cache sentinel return null not find else cache hit return clazz get the value of the code name code property as a array of code class code the value of the property specify a list of comma separate class name if no such property be specify then code default value code be return param name the property name param default value default value return property value as a code class code or code default value code public class get class string name class default value string value string get raw name if null value string return default value string classname get trim string name try class class new class classname length for int i i classname length i class i get class by name classname i return class catch class not find exception e throw new runtime exception e get the value of the code name code property as a code class code if no such property be specify then code default value code be return param name the class name param default value default value return property value as a code class code or code default value code public class get class string name class default value string value string get trim name if value string null return default value try return get class by name value string catch class not find exception e throw new runtime exception e get the value of the code name code property as a code class code implement the interface specify by code xface code if no such property be specify then code default value code be return a exception be throw if the return class do not implement the name interface param name the class name param default value default value param xface the interface implement by the name class return property value as a code class code or code default value code public u class extend u get class string name class extend u default value class u xface try class the class get class name default value if the class null xface be assignable from the class throw new runtime exception the class not xface get name else if the class null return the class as subclass xface else return null catch exception e throw new runtime exception e get the value of the code name code property as a code list code of object implement the interface specify by code xface code a exception be throw if any of the class do not exist or if it do not implement the name interface param name the property name param xface the interface implement by the class name by code name code return a code list code of object implement code xface code suppress warning unchecked public u list u get instance string name class u xface list u ret new array list u class class get class name for class cl class if xface be assignable from cl throw new runtime exception cl do not implement xface ret add u reflection util new instance cl this return ret set the value of the code name code property to the name of a code the class code implement the give interface code xface code a exception be throw if code the class code do not implement the interface code xface code param name property name param the class property value param xface the interface implement by the name class public void set class string name class the class class xface if xface be assignable from the class throw new runtime exception the class not xface get name set name the class get name get a local file under a directory name by i dir prop i with the give i path i if i dir prop i contain multiple directory then one be choose base on i path i s hash code if the select directory do not exist a attempt be make to create it param dir prop directory in which to locate the file param path file path return local file under the directory with the give path public path get local path string dir prop string path throw i o exception string dir get trim string dir prop int hash code path hash code file system f file system get local this for int i i dir length i try each local dir int index hash code i integer max value dir length path file new path dir index path path dir file get parent if f mkdir dir f exist dir return file log warn could not make path in local directory from dir prop for int i i dir length i int index hash code i integer max value dir length log warn dir prop index dir index throw new i o exception no valid local directory in property dir prop get a local file name under a directory name in i dir prop i with the give i path i if i dir prop i contain multiple directory then one be choose base on i path i s hash code if the select directory do not exist a attempt be make to create it param dir prop directory in which to locate the file param path file path return local file under the directory with the give path public file get file string dir prop string path throw i o exception string dir get trim string dir prop int hash code path hash code for int i i dir length i try each local dir int index hash code i integer max value dir length file file new file dir index path file dir file get parent file if dir exist dir mkdir return file throw new i o exception no valid local directory in property dir prop get the link url for the name resource param name resource name return the url for the name resource public url get resource string name return class loader get resource name get a input stream attach to the configuration resource with the give code name code param name configuration resource name return a input stream attach to the resource public input stream get conf resource as input stream string name try url url get resource name if url null log info name not find return null else log info find resource name at url return url open stream catch exception e return null get a link reader attach to the configuration resource with the give code name code param name configuration resource name return a reader attach to the resource public reader get conf resource as reader string name try url url get resource name if url null log info name not find return null else log info find resource name at url return new input stream reader url open stream charset utf catch exception e return null get the set of parameter mark final return final parameter set public set string get final parameter set string set final param collection new set from map new concurrent hash map string boolean set final param add all final parameter return set final param protect synchronize property get prop if property null property new property map string string backup update resource null new concurrent hash map string string update resource null load resource property resource quietmode if overlay null property put all overlay if backup null for map entry object object item overlay entry set string key string item get key string source backup get key if source null update resource put key source return property return the number of key in the configuration return number of key in the configuration public int size return get prop size clear all key from the configuration public void clear get prop clear get overlay clear get a link iterator to go through the list of code string code key value pair in the configuration return a iterator over the entry override public iterator map entry string string iterator get a copy of just the string to string pair after the old object method that allow non string to be put into configuration be remove we could replace property with a map string string and get rid of this code map string string result new hash map string string for map entry object object item get prop entry set if item get key instanceof string item get value instanceof string result put string item get key string item get value return result entry set iterator construct a mapping of configuration and include all property that start with the specify configuration prefix property name in the mapping be trim to remove the configuration prefix param conf prefix configuration prefix return mapping of configuration property with prefix strip public map string string get prop with prefix string conf prefix property prop get prop enumeration e prop property name map string string config map new hash map string name null while e have more element name string e next element if name start with conf prefix string value prop get property name name name substr conf prefix length config map put name value return config map private x m l stream reader parse url url boolean restrict throw i o exception x m l stream exception if quietmode if log be debug enable log debug parse url url if url null return null u be l connection connection url open connection if connection instanceof jar u r l connection disable cache for jar u r l connection to avoid share jar file with other user connection set use cache false return parse connection get input stream url to string restrict private x m l stream reader parse input stream be string system id str boolean restrict throw i o exception x m l stream exception if quietmode log debug parse input stream be if be null return null system id system id system id construct system id str reader config reader config xml input factory create private config if restricted reader config set property x m l input factory support dtd false return xml input factory create s r reader config system id stream bootstrapper get instance null system id be false true private void load resource property property array list resource resource boolean quiet if load default for string resource default resource load resource property new resource resource false quiet for int i i resource size i resource ret load resource property resource get i quiet if ret null resource set i ret private resource load resource property property resource wrapper boolean quiet string name unknown resource try object resource wrapper get resource name wrapper get name x m l stream reader2 reader null boolean return cache property false boolean be restrict wrapper be parser restrict if resource instanceof url a url resource reader x m l stream reader2 parse url resource be restrict else if resource instanceof string a classpath resource url url get resource string resource reader x m l stream reader2 parse url be restrict else if resource instanceof path a file resource can t use file system api or we get a infinite loop since file system use configuration api use java io file instead file file new file path resource to uri get path get absolute file if file exist if quiet log debug parse file file reader x m l stream reader2 parse new buffer input stream new file input stream file path resource to string be restrict else if resource instanceof input stream reader x m l stream reader2 parse input stream resource null be restrict return cache property true else if resource instanceof property overlay property property resource if reader null if quiet return null throw new runtime exception resource not find property to add to property if return cache property to add to new property deprecation context deprecation deprecation context get string builder token new string builder string conf name null string conf value null string conf include null boolean conf final false boolean fallback allow false boolean fallback enter false boolean parse token false link list string conf source new link list string while reader have next switch reader next case x m l stream constant start element switch reader get local name case property conf name null conf value null conf final false conf source clear first test for short format configuration int attr count reader get attribute count for int i i attr count i string property attr reader get attribute local name i if name equal property attr conf name string interner weak intern reader get attribute value i else if value equal property attr conf value string interner weak intern reader get attribute value i else if final equal property attr conf final true equal reader get attribute value i else if source equal property attr conf source add string interner weak intern reader get attribute value i break case name case value case final case source parse token true token set length break case include determine href for xi include conf include null attr count reader get attribute count for int i i attr count i string attr name reader get attribute local name i if href equal attr name conf include reader get attribute value i if conf include null break if be restrict throw new runtime exception error parse resource wrapper x include be not support for restricted resource determine if the include resource be a classpath resource otherwise fallback to a file resource xi include be treat as inline and retain current source url include get resource conf include if include null resource classpath resource new resource include name wrapper be parser restrict load resource property classpath resource quiet else url url try url new url conf include url open connection connect catch i o exception ioe file href new file conf include if href be absolute include resource be relative to the current resource file base file new file name get parent file href new file base file href get path if href exist resource error be non fatal iff there be xi fallback fallback allow true break url href to u be i to u be l resource uri resource new resource url name wrapper be parser restrict load resource property uri resource quiet break case fallback fallback enter true break case configuration break default break break case x m l stream constant character if parse token char text reader get text character token append text reader get text start reader get text length break case x m l stream constant end element switch reader get local name case name if token length conf name string interner weak intern token to string trim break case value if token length conf value string interner weak intern token to string break case final conf final true equal token to string break case source conf source add string interner weak intern token to string break case include if fallback allow fallback enter throw new i o exception fetch fail on include for conf include with no fallback while loading name fallback allow false fallback enter false break case property if conf name null fallback allow fallback enter break conf source add name deprecate key info key info deprecation get deprecate key map get conf name if key info null key info clear access for string key key info new key update new key with deprecate key s value load property to add to name key conf value conf final conf source to array new string conf source size else load property to add to name conf name conf value conf final conf source to array new string conf source size break default break default break reader close if return cache property overlay property to add to return new resource to add to name wrapper be parser restrict return null catch i o exception e log error error parse conf name e throw new runtime exception e catch x m l stream exception e log error error parse conf name e throw new runtime exception e private void overlay property to property from for entry object object entry from entry set to put entry get key entry get value private void load property property property string name string attr string value boolean final parameter string source if value null allow null value property if value null value default string check if final parameter contain attr property set property attr value if source null put into update resource attr source else this be a final parameter so check for override check for override this property name attr value if this property property check for override property name attr value if final parameter attr null final parameter add attr print a warning if a property with a give name already exist with a different value private void check for override property property string name string attr string value string property value property get property attr if property value null property value equal value log warn name a attempt to override final parameter attr ignore write out the non default property in this configuration to the give link output stream use utf encode param out the output stream to write to public void write xml output stream out throw i o exception write xml new output stream writer out utf public void write xml writer out throw i o exception write xml null out write out the non default property in this configuration to the give link writer li when property name be not empty and the property exist in the configuration this method write the property and its attribute to the link writer li p li when property name be null or empty this method write all the configuration property and they attribute to the link writer li p li when property name be not empty but the property doesn t exist in the configuration this method throw a link illegal argument exception li p param out the writer to write to public void write xml string property name writer out throw i o exception illegal argument exception document doc as xml document property name try d o m source source new d o m source doc stream result result new stream result out transformer factory trans factory transformer factory new instance transformer transformer trans factory new transformer important to not hold configuration log while write result since out may be a hdfs stream which need to lock this configuration from another thread transformer transform source result catch transformer exception te throw new i o exception te return the xml dom correspond to this configuration private synchronize document as xml document string property name throw i o exception illegal argument exception document doc try doc document builder factory new instance new document builder new document catch parser configuration exception pe throw new i o exception pe element conf doc create element configuration doc append child conf conf append child doc create text node n handle deprecation ensure property be set and deprecation be handle if string be null or empty property name if property contain key property name give property not find illegal argument throw new illegal argument exception property property name not find else give property be find write single property append x m l property doc conf property name conf append child doc create text node n else append all element for enumeration object e property key e have more element append x be l property doc conf string e next element conf append child doc create text node n return doc append a property with its attribute to a give link document if the property be find in configuration param doc param conf param property name private synchronize void append x m l property document doc element conf string property name skip write if give property name be empty or null if string be null or empty property name string value property get property property name if value null element prop node doc create element property conf append child prop node element name node doc create element name name node append child doc create text node property name prop node append child name node element value node doc create element value value node append child doc create text node property get property property name prop node append child value node element final node doc create element final final node append child doc create text node string value of final parameter contain property name prop node append child final node if update resource null string source update resource get property name if source null for string s source element source node doc create element source source node append child doc create text node s prop node append child source node write property and they attribute final and resource to the give link writer li when property name be not empty and the property exist in the configuration the format of the output would be pre property key key1 value value1 be final key1 be final resource key1 resource pre li li when property name be null or empty it behave same as link dump configuration configuration writer the output would be pre property key key1 value value1 be final key1 be final resource key1 resource key key2 value value2 be final ke2 be final resource key2 resource pre li li when property name be not empty and the property be not find in the configuration this method will throw a link illegal argument exception li p param config the configuration param property name property name param out the writer to write to throw i o exception throw illegal argument exception when property name be not empty and the property be not find in configuration public static void dump configuration configuration config string property name writer out throw i o exception if string be null or empty property name dump configuration config out else if string be null or empty config get property name throw new illegal argument exception property property name not find else json factory dump factory new json factory json generator dump generator dump factory create generator out dump generator write start object dump generator write field name property append j s o n property dump generator config property name new config redactor config dump generator write end object dump generator flush write out all property and they attribute final and resource to the give link writer the format of the output would be pre property key key1 value value1 be final key1 be final resource key1 resource key key2 value value2 be final ke2 be final resource key2 resource pre it do not output the property of the configuration object which be load from a input stream p param config the configuration param out the writer to write to throw i o exception public static void dump configuration configuration config writer out throw i o exception json factory dump factory new json factory json generator dump generator dump factory create generator out dump generator write start object dump generator write field name property dump generator write start array dump generator flush config redactor redactor new config redactor config synchronize config for map entry object object item config get prop entry set append j s o n property dump generator config item get key to string redactor dump generator write end array dump generator write end object dump generator flush write property and its attribute as json format to give link json generator param json gen json writer param config configuration param name property name throw i o exception private static void append j s o n property json generator json gen configuration config string name config redactor redactor throw i o exception skip write if give property name be empty or null if string be null or empty name json gen null json gen write start object json gen write string field key name json gen write string field value redactor redact name config get name json gen write boolean field be final config final parameter contain name string resource config update resource null config update resource get name null string resource unknown resource if resource null resource length resource resource json gen write string field resource resource json gen write end object get the link class loader for this job return the correct class loader public class loader get class loader return class loader set the class loader that will be use to load the various object param class loader the new class loader public void set class loader class loader class loader this class loader class loader override public string to string string builder sb new string builder sb append configuration if load default to string default resource sb if resource size sb append to string resource sb return sb to string private t void to string list t resource string builder sb list iterator t i resource list iterator while i have next if i next index sb append sb append i next set the quietness mode in the quiet mode error and informational message might not be log param quietmode code true code to set quiet mode on code false code to turn it off public synchronize void set quiet mode boolean quietmode this quietmode quietmode synchronize boolean get quiet mode return this quietmode for debugging list non default property to the terminal and exit public static void main string arg throw exception new configuration write xml system out override public void read field datum input in throw i o exception clear int size writable util read v int in for int i i size i string key org apache hadoop io text read string in string value org apache hadoop io text read string in set key value string source writable util read compressed string array in if source null put into update resource key source override override public void write datum output out throw i o exception property prop get prop writable util write v int out prop size for map entry object object item prop entry set org apache hadoop io text write string out string item get key org apache hadoop io text write string out string item get value writable util write compress string array out update resource null update resource get item get key null get key match the the regex param regex return map string string with match key public map string string get val by regex string regex pattern p pattern compile regex map string string result new hash map string string matcher m for map entry object object item get prop entry set if item get key instanceof string item get value instanceof string m p matcher string item get key if m find match result put string item get key substitute var get prop get property string item get key return result a unique class which be use as a sentinel value in the caching for get class by name link configuration get class by name or null string private static abstract class negative cache sentinel public static void dump deprecate key deprecation context deprecation deprecation context get for map entry string deprecate key info entry deprecation get deprecate key map entry set string builder new key new string builder for string new key entry get value new key new key append new key append t system out println entry get key t new key to string return whether or not a deprecated name have be warn if the name be not deprecate then always return false public static boolean have warn deprecation string name deprecation context deprecation deprecation context get if deprecation get deprecate key map contain key name if deprecation get deprecate key map get name access get return true return false private void put into update resource string key string value map string string local u r update resource if local u r null synchronize this local u r update resource if local u r null update resource local u be new concurrent hash map local u be put key value 
version info suppress warning all interface audience public interface stability stable public class version info private final property info protect version info string component info new property if common equal component info set property version 3.1 info set property revision 16b70619 a24cdcf5d3b0fcf4b58ca77238ccbe6d info set property branch branch 3.1 info set property user wtan info set property date 2018 - 04 03 t04 00 z info set property url git github com hortonwork hadoop common trunk git info set property src checksum 14182d20 c972b3e2105580a1ad6990 info set property protoc version 2.5 protect string get version return info get property version unknown protect string get revision return info get property revision unknown protect string get branch return info get property branch unknown protect string get date return info get property date unknown protect string get user return info get property user unknown protect string get url return info get property url unknown protect string get src checksum return info get property src checksum unknown protect string get build version return get version from get revision by get user source checksum get src checksum protect string get protoc version return info get property protoc version unknown private static final version info common version info new version info common public static string get version return common version info get version public static string get revision return common version info get revision public static string get branch return common version info get branch public static string get date return common version info get date public static string get user return common version info get user public static string get url return common version info get url public static string get src checksum return common version info get src checksum public static string get build version return common version info get build version public static string get protoc version return common version info get protoc version 
configuration interface audience public interface stability stable public class configuration implement iterable entry string string writable private static final log log log factory get log configuration class private static final log log deprecation log factory get log org apache hadoop conf configuration deprecation private boolean quietmode true private static final string default string check testingforemptydefaultvalue private boolean allow null value property false private static class resource private final object resource private final string name public resource object resource this resource resource to string public resource object resource string name this resource resource this name name public string get name return name public object get resource return resource override public string to string return name list of configuration resource private array list resource resource new array list resource the value report as the setting resource when a key be set by code rather than a file resource by dump configuration static final string unknown resource unknown list of configuration parameter mark b final b private set string final parameter collection new set from map new concurrent hash map string boolean private boolean load default true configuration object private static final weak hash map configuration object registry new weak hash map configuration object list of default resource resource be load in the order of the list entry private static final copy on write array list string default resource new copy on write array list string private static final map class loader map string weak reference class cache class new weak hash map class loader map string weak reference class sentinel value to store negative cache result in link cache class private static final class negative cache sentinel negative cache sentinel class store the mapping of key to the resource which modify or load the key most recently private map string string update resource class to keep the information about the key which replace the deprecate one this class store the new key which replace the deprecate key and also give a provision to have a custom message for each of the deprecate key that be be replace it also provide method to get the appropriate warning message which can be log whenever the deprecate key be use private static class deprecate key info private final string new key private final string custom message private final atomic boolean access new atomic boolean false deprecate key info string new key string custom message this new key new key this custom message custom message method to provide the warning message it give the custom message if non null and default message otherwise param key the associate deprecate key return message that be to be log when a deprecate key be use private final string get warn message string key string warn message if custom message null string builder message new string builder key string deprecate key suffix be deprecate instead use message append deprecate key suffix for int i i new key length i message append new key i if i new key length message append warn message message to string else warn message custom message return warn message boolean get and set access return access get and set true public void clear access access set false a pend addition to the global set of deprecate key public static class deprecation delta private final string key private final string new key private final string custom message deprecation delta string key string new key string custom message precondition check not null key precondition check not null new key precondition check argument new key length this key key this new key new key this custom message custom message public deprecation delta string key string new key string custom message this key new string new key custom message public deprecation delta string key string new key this key new string new key null public string get key return key public string get new key return new key public string get custom message return custom message the set of all key which be deprecate deprecation context object be immutable private static class deprecation context store the deprecate key the new key which replace the deprecate key and custom message if any provide private final map string deprecate key info deprecate key map store a mapping from superseding key to the key which they deprecate private final map string string reverse deprecate key map create a new deprecation context by copy a previous deprecation context and add some delta param other the previous deprecation context to copy or null to start from nothing param delta the delta to apply suppress warning unchecked deprecation context deprecation context other deprecation delta delta hash map string deprecate key info new deprecate key map new hash map string deprecate key info hash map string string new reverse deprecate key map new hash map string string if other null for entry string deprecate key info entry other deprecate key map entry set new deprecate key map put entry get key entry get value for entry string string entry other reverse deprecate key map entry set new reverse deprecate key map put entry get key entry get value for deprecation delta delta delta if new deprecate key map contain key delta get key deprecate key info new key info new deprecate key info delta get new key delta get custom message new deprecate key map put delta key new key info for string new key delta get new key new reverse deprecate key map put new key delta key this deprecate key map unmodifiable map decorate new deprecated key map this reverse deprecate key map unmodifiable map decorate new reverse deprecate key map map string deprecate key info get deprecate key map return deprecate key map map string string get reverse deprecate key map return reverse deprecate key map private static deprecation delta default deprecation new deprecation delta new deprecation delta topology script file name common configuration key net topology script file name key new deprecation delta topology script number arg common configuration key net topology script number arg key new deprecation delta hadoop configure node mapping common configuration key net topology configure node mapping key new deprecation delta topology node switch mapping impl common configuration key net topology node switch mapping impl key new deprecation delta df df interval common configuration key fs df interval key new deprecation delta hadoop native lib common configuration key io native lib available key new deprecation delta f default name common configuration key f default name key new deprecation delta df umaskmode common configuration key fs permission umask key new deprecation delta dfs nf export allow host common configuration key nf export allow host key the global deprecation context private static atomic reference deprecation context deprecation context new atomic reference deprecation context new deprecation context null default deprecation add a set of deprecate key to the global deprecation this method be lockless it work by means of create a new deprecation context base on the old one and then atomically swap in the new context if someone else update the context in between we read the old context and swap in the new one we try again until we win the race param delta the deprecation to add public static void add deprecation deprecation delta delta deprecation context prev next do prev deprecation context get next new deprecation context prev delta while deprecation context compare and set prev next add the deprecate key to the global deprecation map it do not override any exist entry in the deprecation map this be to be use only by the developer in order to add deprecation of key and attempt to call this method after loading resource once would lead to tt unsupported operation exception tt if a key be deprecate in favor of multiple key they be all treat as alias of each other and set any one of they reset all the other to the new value if you have multiple deprecation entry to add it be more efficient to use add deprecation deprecation delta delta instead param key param new key param custom message deprecate use link add deprecation string key string new key string custom message instead deprecate public static void add deprecation string key string new key string custom message add deprecation new deprecation delta new deprecation delta key new key custom message add the deprecate key to the global deprecation map it do not override any exist entry in the deprecation map this be to be use only by the developer in order to add deprecation of key and attempt to call this method after loading resource once would lead to tt unsupported operation exception tt if you have multiple deprecation entry to add it be more efficient to use add deprecation deprecation delta delta instead param key param new key param custom message public static void add deprecation string key string new key string custom message add deprecation key new string new key custom message add the deprecate key to the global deprecation map when no custom message be provide it do not override any exist entry in the deprecation map this be to be use only by the developer in order to add deprecation of key and attempt to call this method after loading resource once would lead to tt unsupported operation exception tt if a key be deprecate in favor of multiple key they be all treat as alias of each other and set any one of they reset all the other to the new value if you have multiple deprecation entry to add it be more efficient to use add deprecation deprecation delta delta instead param key key that be to be deprecate param new key list of key that take up the value of deprecate key deprecate use link add deprecation string key string new key instead deprecate public static void add deprecation string key string new key add deprecation key new key null add the deprecate key to the global deprecation map when no custom message be provide it do not override any exist entry in the deprecation map this be to be use only by the developer in order to add deprecation of key and attempt to call this method after loading resource once would lead to tt unsupported operation exception tt if you have multiple deprecation entry to add it be more efficient to use add deprecation deprecation delta delta instead param key key that be to be deprecate param new key key that take up the value of deprecate key public static void add deprecation string key string new key add deprecation key new string new key null check whether the give code key code be deprecate param key the parameter which be to be check for deprecation return code true code if the key be deprecate and code false code otherwise public static boolean be deprecate string key return deprecation context get get deprecate key map contain key key set all deprecate property that be not currently set but have a correspond new property that be set useful for iterate the property when all deprecate property for currently set property need to be present public void set deprecate property deprecation context deprecation deprecation context get property prop get prop property overlay get overlay for entry string deprecate key info entry deprecation get deprecate key map entry set string dep key entry get key if overlay contain dep key for string new key entry get value new key string val overlay get property new key if val null prop set property dep key val overlay set property dep key val break check for the presence of the property code name code in the deprecation map return the first of the list of new key if present in the deprecation map or the code name code itself if the property be not presently set but the property map contain a entry for the deprecate key the value of the deprecate key be set as the value for the provide property name param name the property name return the first property in the list of property map the code name code or the code name code itself private string handle deprecation deprecation context deprecation string name if null name name name trim array list string name new array list string if be deprecate name deprecate key info key info deprecation get deprecate key map get name warn once if deprecate deprecation name for string new key key info new key if new key null name add new key if name size name add name for string n name string deprecate key deprecation get reverse deprecate key map get n if deprecate key null get overlay contain key n get overlay contain key deprecate key get prop set property n get overlay get property deprecate key get overlay set property n get overlay get property deprecate key return name to array new string name size private void handle deprecation log debug handle deprecation for all property in config deprecation context deprecation deprecation context get set object key new hash set object key add all get prop key set for object item key log debug handle deprecation for string item handle deprecation deprecation string item static print deprecation warning if hadoop site xml be find in classpath class loader c l thread current thread get context class loader if c l null c l configuration class get class loader if c l get resource hadoop site xml null log warn deprecated hadoop site xml find in the classpath usage of hadoop site xml be deprecate instead use core site xml mapr site xml and hdfs site xml to override property of core default shade xml mapr default xml and hdf default xml respectively add default resource core default shade xml add default resource core site xml private property property private property overlay private class loader class loader class loader thread current thread get context class loader if class loader null class loader configuration class get class loader a new configuration public configuration this true a new configuration where the behavior of read from the default resource can be turn off if the parameter code load default be false the new instance will not load resource from the default file param load default specify whether to load from the default file public configuration boolean load default this load default load default update resource new concurrent hash map string string synchronize configuration class registry put this null a new configuration with the same setting clone from another param other the configuration from which to clone setting suppress warning unchecked public configuration configuration other this resource array list resource other resource clone synchronize other if other property null this property property other property clone if other overlay null this overlay property other overlay clone this update resource new concurrent hash map string string other update resource this final parameter collection new set from map new concurrent hash map string boolean this final parameter add all other final parameter synchronize configuration class registry put this null this class loader other class loader this load default other load default set quiet mode other get quiet mode add a default resource resource be load in the order of the resource add param name file name file should be present in the classpath public static synchronize void add default resource string name if default resource contain name default resource add name for configuration conf registry key set if conf load default conf reload configuration add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param name resource to be add the classpath be examine for a file with that name public void add resource string name add resource object new resource name add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param url url of the resource to be add the local filesystem be examine directly to find the resource without refer to the classpath public void add resource url url add resource object new resource url add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param file file path of resource to be add the local filesystem be examine directly to find the resource without refer to the classpath public void add resource path file add resource object new resource file add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a warn the contents of the input stream will be cache by this method so use this sparingly because it do increase the memory consumption param in input stream to deserialize the object from in will be read from when a get or set be call next after it be read the stream will be close public void add resource input stream in add resource object new resource in add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param in input stream to deserialize the object from param name the name of the resource because input stream to string be not very descriptive some time public void add resource input stream in string name add resource object new resource in name add a configuration resource the property of this resource will override property of previously add resource unless they be mark a href final final a param conf configuration object from which to load property public void add resource configuration conf add resource object new resource conf get prop reload configuration from previously add resource this method will clear all the configuration read from the add resource and final parameter this will make the resource to be read again before access the value value that be add via set method will overlay value read from the resource public synchronize void reload configuration property null trigger reload final parameter clear clear site limit private synchronize void add resource object resource resource resource add resource add to resource reload configuration private static final int max subst private static final int sub start idx private static final int sub end idx sub start idx this be a manual implementation of the follow regex u0020 it can be 15x more efficient than a regex matcher as demonstrate by hadoop this be noticeable with hadoop app build on the assumption configuration get be a o hash table lookup especially when the eval be a long string param eval a string that may contain variable require expansion return a element int array re such that eval substring re res be var for the leave most occurrence of var in eval if no variable be find be return private static int find sub variable string eval int result int match start int left brace scan for a brace first because it be less frequent than that can occur in nest class name match loop for match start left brace eval index of match start minimum left brace position follow left brace right brace of a smallest valid expression c leave brace c length eval length left brace eval index of match start int match len if eval char at left brace int sub start left brace after for int i sub start i eval length i switch eval char at i case if match len match result sub start idx sub start result sub end idx sub start match len break match loop fall through to skip char case case match start i continue match loop default match len scan from to the end of eval and no reset via no match break match loop else not a start of a variable match start left brace return result attempt to repeatedly expand the value code expr by replace the leave most substring of the form var in the follow precedence order ol li by the value of the java system property var if define li li by the value of the configuration key var if define li ol if var be unbounded the current state of expansion prefix var suffix be return param expr the literal value of a config key return null if expr be null otherwise the value result from expand expr use the algorithm above throw illegal argument exception when more than link configuration max subst replacement be require private string substitute var string expr if expr null return null string eval expr for int s s max subst s final int var bound find sub variable eval if var bound sub start idx return eval final string var eval substring var bound sub start idx var bound sub end idx string val null try val system get property var catch security exception se log warn unexpected security exception in configuration se if val null val get raw var if val null return eval return literal var var be unbound final int dollar var bound sub start idx length final int after right brace var bound sub end idx length substitute eval eval substr dollar val eval substring after right brace throw new illegal state exception variable substitution depth too large max subst expr get the value of the code name code property code null code if no such property exist if the key be deprecate it return the value of the first key which replace the deprecate key and be not null value be process for a href variable expansion variable expansion a before be return param name the property name will be trim before get value return the value of the code name code or its replace property or null if no such property exist public string get string name string name handle deprecation deprecation context get name string result null for string n name result substitute var get prop get property n return result set configuration to allow key without value during setup intend for use during testing param val if true will allow configuration to store key without value visible for test public void set allow null value property boolean val this allow null value property val return existence of the code name code property but only for name which have no valid value usually non existent or comment out in xml param name the property name return true if the property code name code exist without value visible for test public boolean only key exist string name string name handle deprecation deprecation context get name for string n name if get prop get property n default string check equal default string check return true return false get the value of the code name code property as a trim code string code code null code if no such property exist if the key be deprecate it return the value of the first key which replace the deprecate key and be not null value be process for a href variable expansion variable expansion a before be return param name the property name return the value of the code name code or its replace property or null if no such property exist public string get trim string name string value get name if null value return null else return value trim get the value of the code name code property as a trim code string code code default value code if no such property exist see configuration get trim for more detail param name the property name param default value the property default value return the value of the code name code or default value if it be not set public string get trim string name string default value string ret get trim name return ret null default value ret get the value of the code name code property without do a href variable expansion variable expansion a if the key be deprecate it return the value of the first key which replace the deprecate key and be not null param name the property name return the value of the code name code property or its replace property and null if no such property exist public string get raw string name string name handle deprecation deprecation context get name string result null for string n name result get prop get property n return result return alternative name non deprecate key or previously set deprecate key for a give non deprecate key if the give key be deprecate return null param name property name return alternative name private string get alternative name string name string alt name null deprecate key info key info null deprecation context cur deprecation context get string dep key cur get reverse deprecate key map get name if dep key null key info cur get deprecate key map get dep key if key info new key length if get prop contain key dep key if deprecate key be previously set explicitly list string list new array list string list add all array as list key info new key list add dep key alt name list to array new string list size else alt name key info new key return alt name set the code value code of the code name code property if code name code be deprecate or there be a deprecated name associate to it it set the value to both name name will be trim before put into configuration param name property name param value property value public void set string name string value set name value null set the code value code of the code name code property if code name code be deprecate it also set the code value code to the key that replace the deprecate key name will be trim before put into configuration param name property name param value property value param source the place that this configuration value come from for debugging throw illegal argument exception when the value or name be null public void set string name string value string source precondition check argument name null property name must not be null precondition check argument value null the value of property name must not be null name name trim deprecation context deprecation deprecation context get if deprecation get deprecate key map be empty get prop get overlay set property name value get prop set property name value string new source source null programatically source if be deprecate name update resource put name new string new source string alt name get alternative name name if alt name null for string n alt name if n equal name get overlay set property n value get prop set property n value update resource put n new string new source else string name handle deprecation deprecation context get name string alt source because name be deprecate for string n name get overlay set property n value get prop set property n value update resource put n new string alt source private void warn once if deprecate deprecation context deprecation string name deprecate key info key info deprecation get deprecate key map get name if key info null key info get and set access log deprecation info key info get warn message name unset a previously set property public synchronize void unset string name string name null if be deprecate name name get alternative name name if name null name new string name else name handle deprecation deprecation context get name for string n name get overlay remove n get prop remove n set a property if it be currently unset param name the property name param value the new value public synchronize void set if unset string name string value if get name null set name value private synchronize property get overlay if overlay null overlay new property return overlay get the value of the code name code if the key be deprecate it return the value of the first key which replace the deprecate key and be not null if no such property exist then code default value code be return param name property name will be trim before get value param default value default value return property value or code default value code if the property doesn t exist public string get string name string default value string name handle deprecation deprecation context get name string result null for string n name result substitute var get prop get property n default value return result get the value of the code name code property as a code int code if no such property exist the provide default value be return or if the specify value be not a valid code int code then a error be throw param name property name param default value default value throw number format exception when the value be invalid return property value as a code int code or code default value code public int get int string name int default value string value string get trim name if value string null return default value string hex string get hex digit value string if hex string null return integer parse int hex string return integer parse int value string get the value of the code name code property as a set of comma delimit code int code value if no such property exist a empty array be return param name property name return property value interpret as a array of comma delimit code int code value public int get int string name string string get trim string name int int new int string length for int i i string length i int i integer parse int string i return int set the value of the code name code property to a code int code param name property name param value code int code value of the property public void set int string name int value set name integer to string value get the value of the code name code property as a code long code if no such property exist the provide default value be return or if the specify value be not a valid code long code then a error be throw param name property name param default value default value throw number format exception when the value be invalid return property value as a code long code or code default value code public long get long string name long default value string value string get trim name if value string null return default value string hex string get hex digit value string if hex string null return long parse long hex string return long parse long value string get the value of the code name code property as a code long code or human readable format if no such property exist the provide default value be return or if the specify value be not a valid code long code or human readable format then a error be throw you can use the follow suffix case insensitive k kilo m mega g giga t tera p peta e exa param name property name param default value default value throw number format exception when the value be invalid return property value as a code long code or code default value code public long get long byte string name long default value string value string get trim name if value string null return default value return string util traditional binary prefix string2long value string private string get hex digit string value boolean negative false string str value string hex string null if value start with negative true str value substr if str start with 0x str start with 0 x hex string str substring if negative hex string hex string return hex string return null set the value of the code name code property to a code long code param name property name param value code long code value of the property public void set long string name long value set name long to string value get the value of the code name code property as a code float code if no such property exist the provide default value be return or if the specify value be not a valid code float code then a error be throw param name property name param default value default value throw number format exception when the value be invalid return property value as a code float code or code default value code public float get float string name float default value string value string get trim name if value string null return default value return float parse float value string set the value of the code name code property to a code float code param name property name param value property value public void set float string name float value set name float to string value get the value of the code name code property as a code double code if no such property exist the provide default value be return or if the specify value be not a valid code double code then a error be throw param name property name param default value default value throw number format exception when the value be invalid return property value as a code double code or code default value code public double get double string name double default value string value string get trim name if value string null return default value return double parse double value string set the value of the code name code property to a code double code param name property name param value property value public void set double string name double value set name double to string value get the value of the code name code property as a code boolean code if no such property be specify or if the specify value be not a valid code boolean code then code default value code be return param name property name param default value default value return property value as a code boolean code or code default value code public boolean get boolean string name boolean default value string value string get trim name if null value string value string be empty return default value if string util equal ignore case true value string return true else if string util equal ignore case false value string return false else return default value set the value of the code name code property to a code boolean code param name property name param value code boolean code value of the property public void set boolean string name boolean value set name boolean to string value set the give property if it be currently unset param name property name param value new value public void set boolean if unset string name boolean value set if unset name boolean to string value set the value of the code name code property to the give type this be equivalent to code set lt name gt value to string code param name property name param value new value public t extend enum t void set enum string name t value set name value to string return value match this enumerate type note that the return value be trim by this method param name property name param default value value return if no mapping exist throw illegal argument exception if mapping be illegal for the type provide public t extend enum t t get enum string name t default value final string val get trim name return null val default value enum value of default value get declare class val enum parse time duration n time unit unit return time unit nanosecond string suffix return n we time unit unit return time unit microsecond string suffix return we ms time unit unit return time unit millisecond string suffix return ms s time unit unit return time unit seconds string suffix return s m time unit unit return time unit minute string suffix return m h time unit unit return time unit hour string suffix return h d time unit unit return time unit day string suffix return d abstract time unit unit abstract string suffix static parse time duration unit for string s for parsed time duration ptd value iteration order be in decl order so seconds match last if s end with ptd suffix return ptd return null static parse time duration unit for time unit unit for parsed time duration ptd value if ptd unit unit return ptd return null set the value of code name code to the give time duration this be equivalent to code set lt name gt value lt time suffix gt code param name property name param value time duration param unit unit of time public void set time duration string name long value time unit unit set name value parse time duration unit for unit suffix return time duration in the give time unit valid unit be encode in property as suffix nanosecond ns microsecond we millisecond ms seconds s minute be hour h and day d param name property name param default value value return if no mapping exist param unit unit to convert the store property if it exist throw number format exception if the property strip of its unit be not a number public long get time duration string name long default value time unit unit string v str get name if null v str return default value v str v str trim return get time duration helper name v str unit private long get time duration helper string name string v str time unit unit parse time duration v unit parse time duration unit for v str if null v unit log warn no unit for name v str assume unit v unit parse time duration unit for unit else v str v str substr v str last index of v unit suffix return unit convert long parse long v str v unit unit public long get time duration string name time unit unit string string get trim string name long duration new long string length for int i i string length i duration i get time duration helper name string i unit return duration get the value of the code name code property as a code pattern code if no such property be specify or if the specify value be not a valid code pattern code then code default value code be return note that the return value be not trim by this method param name property name param default value default value return property value as a compile pattern or default value public pattern get pattern string name pattern default value string val string get name if null val string val string be empty return default value try return pattern compile val string catch pattern syntax exception pse log warn regular expression val string for property name not valid use default pse return default value set the give property to code pattern code if the pattern be pass as null set the empty pattern which result in further call to get pattern return the default value param name property name param pattern new value public void set pattern string name pattern pattern assert pattern null pattern can not be null set name pattern pattern get information about why a property be set typically this be the path to the resource object file url etc the property come from but it can also indicate that it be set programatically or because of the command line param name the property name to get the source of return null if the property or its source wasn t find otherwise return a list of the source of the resource the older source be the first one in the list so for example if a configuration be set from the command line and then write out to a file that be read back in the first entry would indicate that it be set from the command line while the second one would indicate the file that the new configuration be read in from interface stability unstable public synchronize string get property source string name if property null if property be null it mean a resource be newly add but the prop be clear so as to load it upon future request so let force a load by ask a property list get prop return a null right away if we property still haven t load or the resource mapping isn t define if property null update resource null return null else string source update resource get name if source null return null else return array copy of source source length a class that represent a set of positive integer range it parse string of the form 2 - 3 5,7 where range be separate by comma and the lower upper bound be separate by dash either the lower or upper bind may be omit mean all value up to or over so the string above means and public static class integer range implement iterable integer private static class range int start int end private static class range number iterator implement iterator integer iterator range internal int at int end public range number iterator list range range if range null internal range iterator at end override public boolean have next if at end return true else if internal null return internal have next return false override public integer next if at end at return at else if internal null range find internal next if find null at find start end find end at return at return null override public void remove throw new unsupported operation exception list range range new array list range public integer range public integer range string new value string tokenizer itr new string tokenizer new value while itr have more token string rng itr next token trim string part rng split if part length part length throw new illegal argument exception integer range badly form rng range be new range be start convert to int part if part length be end convert to int part integer max value else be end be start if r start r end throw new illegal argument exception integer range from r start to r end be invalid range add r convert a string to a int treat empty string as the default value param value the string value param default value the value for if the string be empty return the desire integer private static int convert to int string value int default value string trim value trim if trim length return default value return integer parse int trim be the give value in the set of range param value the value to check return be the value in the range public boolean be include int value for range be range if r start value value r end return true return false return true if there be no value in this range else false public boolean be empty return range null range be empty override public string to string string builder result new string builder boolean first true for range be range if first first false else result append result append r start result append result append r end return result to string override public iterator integer iterator return new range number iterator range parse the give attribute as a set of integer range param name the attribute name param default value the default value if it be not set return a new set of range from the configure value public integer range get range string name string default value return new integer range get name default value get the comma delimit value of the code name code property as a collection of code string code s if no such property be specify then empty collection be return p this be a optimize version of link get string string param name property name return property value as a collection of code string code s public collection string get string collection string name string value string get name return string util get string collection value string get the comma delimit value of the code name code property as a array of code string code s if no such property be specify then code null code be return param name property name return property value as a array of code string code s or code null code public string get string string name string value string get name return string util get string value string get the comma delimit value of the code name code property as a array of code string code s if no such property be specify then default value be return param name property name param default value the default value return property value as a array of code string code s or default value public string get string string name string default value string value string get name if value string null return default value else return string util get string value string get the comma delimit value of the code name code property as a collection of code string code s trimmed of the lead and trail whitespace if no such property be specify then empty code collection code be return param name property name return property value as a collection of code string code s or empty code collection code public collection string get trim string collection string name string value string get name if null value string collection string empty new array list string return empty return string util get trim string collection value string get the comma delimit value of the code name code property as a array of code string code s trimmed of the lead and trail whitespace if no such property be specify then a empty array be return param name property name return property value as a array of trim code string code s or empty array public string get trim string string name string value string get name return string util get trim string value string get the comma delimit value of the code name code property as a array of code string code s trimmed of the lead and trail whitespace if no such property be specify then default value be return param name property name param default value the default value return property value as a array of trim code string code s or default value public string get trim string string name string default value string value string get name if null value string return default value else return string util get trim string value string set the array of string value for the code name code property as as comma delimit value param name property name param value the value public void set string string name string value set name string util array to string value get the value for a know password configuration element in order to enable the elimination of clear text password in config this method attempt to resolve the property name as a alias through the credential provider api and conditionally fallsback to config param name property name return password public char get password string name throw i o exception char pass null pass get password from credential provider name if pass null pass get password from config name return pass try and resolve the provide element name as a credential provider alias param name alias of the provision credential return password or null if not find throw i o exception protect char get password from credential provider string name throw i o exception char pass null try list credential provider provider credential provider factory get provider this if provider null for credential provider provider provider try credential entry entry provider get credential entry name if entry null pass entry get credential break catch i o exception ioe throw new i o exception can t get key name from key provider of type provider get class get name ioe catch i o exception ioe throw new i o exception configuration problem with provider path ioe return pass fallback to clear text password in configuration param name return clear text password or null protected char get password from config string name char pass null if get boolean credential provider clear text fallback true string pass str get name if pass str null pass pass str to char array return pass get the socket address for code host property code as a code inet socket address code if code host property code be code null code code address property code will be use this be useful for case where we want to differentiate between host bind address and address client should use to establish connection param host property bind host property name param address property address property name param default address value the default value param default port the default port return inet socket address public inet socket address get socket addr string host property string address property string default address value int default port inet socket address bind addr get socket addr address property default address value default port final string host get host property if host null host be empty return bind addr return net util create socket addr host bind addr get port host property get the socket address for code name code property as a code inet socket address code param name property name param default address the default value param default port the default port return inet socket address public inet socket address get socket addr string name string default address int default port final string address get trim name default address return net util create socket addr address default port name set the socket address for the code name code property as a code host port code public void set socket addr string name inet socket address addr set name net util get host port string addr set the socket address a client can use to connect for the code name code property as a code host port code the wildcard address be replace with the local host s address if the host and address property be configure the host component of the address will be combine with the port component of the addr to generate the address this be to allow optional control over which host name be use in multi home bind host case where a host can have multiple name param host property the bind host configuration name param address property the service address configuration name param default address value the service default address configuration value param addr inet socket address of the service listener return inet socket address for client to connect public inet socket address update connect addr string host property string address property string default address value inet socket address addr final string host get host property final string connect host port get trim address property default address value if host null host be empty connect host port null connect host port be empty not we case fall back to original logic return update connect addr address property addr final string connect host connect host port split create connect address use client address hostname and server port return update connect addr address property net util create socket addr for host connect host addr get port set the socket address a client can use to connect for the code name code property as a code host port code the wildcard address be replace with the local host s address param name property name param addr inet socket address of a listener to store in the give property return inet socket address for client to connect public inet socket address update connect addr string name inet socket address addr final inet socket address connect addr net util get connect address addr set socket addr name connect addr return connect addr load a class by name param name the class name return the class object throw class not find exception if the class be not find public class get class by name string name throw class not find exception class ret get class by name or null name if ret null throw new class not find exception class name not find return ret load a class by name return null rather than throw a exception if it couldn t be load this be to avoid the overhead of create a exception param name the class name return the class object or null if it could not be find public class get class by name or null string name map string weak reference class map synchronize cache class map cache class get class loader if map null map collection synchronize map new weak hash map string weak reference class cache class put class loader map class clazz null weak reference class ref map get name if ref null clazz ref get if clazz null try clazz class for name name true class loader catch class not find exception e leave a marker that the class isn t find map put name new weak reference class negative cache sentinel return null two putter can race here but they will put the same class map put name new weak reference class clazz return clazz else if clazz negative cache sentinel return null not find else cache hit return clazz get the value of the code name code property as a array of code class code the value of the property specify a list of comma separate class name if no such property be specify then code default value code be return param name the property name param default value default value return property value as a code class code or code default value code public class get class string name class default value string classname get trim string name if classname null return default value try class class new class classname length for int i i classname length i class i get class by name classname i return class catch class not find exception e throw new runtime exception e get the value of the code name code property as a code class code if no such property be specify then code default value code be return param name the class name param default value default value return property value as a code class code or code default value code public class get class string name class default value string value string get trim name if value string null return default value try return get class by name value string catch class not find exception e throw new runtime exception e get the value of the code name code property as a code class code implement the interface specify by code xface code if no such property be specify then code default value code be return a exception be throw if the return class do not implement the name interface param name the class name param default value default value param xface the interface implement by the name class return property value as a code class code or code default value code public u class extend u get class string name class extend u default value class u xface try class the class get class name default value if the class null xface be assignable from the class throw new runtime exception the class not xface get name else if the class null return the class as subclass xface else return null catch exception e throw new runtime exception e get the value of the code name code property as a code list code of object implement the interface specify by code xface code a exception be throw if any of the class do not exist or if it do not implement the name interface param name the property name param xface the interface implement by the class name by code name code return a code list code of object implement code xface code suppress warning unchecked public u list u get instance string name class u xface list u ret new array list u class class get class name for class cl class if xface be assignable from cl throw new runtime exception cl do not implement xface ret add u reflection util new instance cl this return ret set the value of the code name code property to the name of a code the class code implement the give interface code xface code a exception be throw if code the class code do not implement the interface code xface code param name property name param the class property value param xface the interface implement by the name class public void set class string name class the class class xface if xface be assignable from the class throw new runtime exception the class not xface get name set name the class get name get a local file under a directory name by i dir prop i with the give i path i if i dir prop i contain multiple directory then one be choose base on i path i s hash code if the select directory do not exist a attempt be make to create it param dir prop directory in which to locate the file param path file path return local file under the directory with the give path public path get local path string dir prop string path throw i o exception string dir get trim string dir prop int hash code path hash code file system f file system get local this for int i i dir length i try each local dir int index hash code i integer max value dir length path file new path dir index path path dir file get parent if f mkdir dir f exist dir return file log warn could not make path in local directory from dir prop for int i i dir length i int index hash code i integer max value dir length log warn dir prop index dir index throw new i o exception no valid local directory in property dir prop get a local file name under a directory name in i dir prop i with the give i path i if i dir prop i contain multiple directory then one be choose base on i path i s hash code if the select directory do not exist a attempt be make to create it param dir prop directory in which to locate the file param path file path return local file under the directory with the give path public file get file string dir prop string path throw i o exception string dir get trim string dir prop int hash code path hash code for int i i dir length i try each local dir int index hash code i integer max value dir length file file new file dir index path file dir file get parent file if dir exist dir mkdir return file throw new i o exception no valid local directory in property dir prop get the link url for the name resource param name resource name return the url for the name resource public url get resource string name return class loader get resource name get a input stream attach to the configuration resource with the give code name code param name configuration resource name return a input stream attach to the resource public input stream get conf resource as input stream string name try url url get resource name if url null log info name not find return null else log info find resource name at url return url open stream catch exception e return null get a link reader attach to the configuration resource with the give code name code param name configuration resource name return a reader attach to the resource public reader get conf resource as reader string name try url url get resource name if url null log info name not find return null else log info find resource name at url return new input stream reader url open stream charset utf catch exception e return null get the set of parameter mark final return final parameter set public set string get final parameter set string set final param collection new set from map new concurrent hash map string boolean set final param add all final parameter return set final param protect synchronize property get prop if property null property new property map string string backup new concurrent hash map string string update resource load resource property resource quietmode if overlay null property put all overlay for entry object object item overlay entry set string key string item get key string source backup get key if source null update resource put key source return property return the number of key in the configuration return number of key in the configuration public int size return get prop size clear all key from the configuration public void clear get prop clear get overlay clear get a link iterator to go through the list of code string code key value pair in the configuration return a iterator over the entry override public iterator entry string string iterator get a copy of just the string to string pair after the old object method that allow non string to be put into configuration be remove we could replace property with a map string string and get rid of this code map string string result new hash map string string for entry object object item get prop entry set if item get key instanceof string item get value instanceof string result put string item get key string item get value return result entry set iterator construct a mapping of configuration and include all property that start with the specify configuration prefix property name in the mapping be trim to remove the configuration prefix param conf prefix configuration prefix return mapping of configuration property with prefix strip public map string string get prop with prefix string conf prefix map string string config map new hash map for entry string string entry this string name entry get key if name start with conf prefix string value this get name name name substr conf prefix length config map put name value return config map private document parse document builder builder url url throw i o exception s a x exception if quietmode if log be debug enable log debug parse url url if url null return null u be l connection connection url open connection if connection instanceof jar u r l connection disable cache for jar u r l connection to avoid share jar file with other user connection set use cache false return parse builder connection get input stream url to string private document parse document builder builder input stream be string system id throw i o exception s a x exception if quietmode log debug parse input stream be if be null return null try return system id null builder parse be builder parse be system id finally be close private void load resource property property array list resource resource boolean quiet if load default for string resource default resource load resource property new resource resource quiet support the hadoop site xml as a deprecate case if get resource hadoop site xml null load resource property new resource hadoop site xml quiet for int i i resource size i resource ret load resource property resource get i quiet if ret null resource set i ret private resource load resource property property resource wrapper boolean quiet string name unknown resource try object resource wrapper get resource name wrapper get name document builder factory doc builder factory document builder factory new instance ignore all comment inside the xml file doc builder factory set ignore comment true allow include in the xml file doc builder factory set namespace aware true try doc builder factory set x include aware true catch unsupported operation exception e log error fail to set set x include aware true for parser doc builder factory e e document builder builder doc builder factory new document builder document doc null element root null boolean return cache property false if resource instanceof url a url resource doc parse builder url resource else if resource instanceof string a classpath resource url url get resource string resource doc parse builder url else if resource instanceof path a file resource can t use file system api or we get a infinite loop since file system use configuration api use java io file instead file file new file path resource to uri get path get absolute file if file exist if quiet log debug parse file file doc parse builder new buffer input stream new file input stream file path resource to string else if resource instanceof input stream doc parse builder input stream resource null return cache property true else if resource instanceof property overlay property property resource else if resource instanceof element root element resource if root null if doc null if quiet return null throw new runtime exception resource not find root doc get document element property to add to property if return cache property to add to new property if configuration equal root get tag name log fatal bad conf file top level element not configuration node list prop root get child node deprecation context deprecation deprecation context get for int i i prop get length i node prop node prop item i if prop node instanceof element continue element prop element prop node if configuration equal prop get tag name load resource to add to new resource prop name quiet continue if property equal prop get tag name log warn bad conf file element not property node list field prop get child node string attr null string value null boolean final parameter false link list string source new link list string for int j j field get length j node field node field item j if field node instanceof element continue element field element field node if name equal field get tag name field have child node attr string interner weak intern text field get first child get datum trim if value equal field get tag name field have child node value string interner weak intern text field get first child get datum if final equal field get tag name field have child node final parameter true equal text field get first child get datum if source equal field get tag name field have child node source add string interner weak intern text field get first child get datum source add name ignore this parameter if it have already be mark as final if attr null if deprecation get deprecate key map contain key attr deprecate key info key info deprecation get deprecate key map get attr key info clear access for string key key info new key update new key with deprecate key s value load property to add to name key value final parameter source to array new string source size else load property to add to name attr value final parameter source to array new string source size if return cache property overlay property to add to return new resource to add to name return null catch i o exception e log fatal error parse conf name e throw new runtime exception e catch d o m exception e log fatal error parse conf name e throw new runtime exception e catch s a x exception e log fatal error parse conf name e throw new runtime exception e catch parser configuration exception e log fatal error parse conf name e throw new runtime exception e private void overlay property to property from for entry object object entry from entry set to put entry get key entry get value private void load property property property string name string attr string value boolean final parameter string source if value null allow null value property if value null value default string check if final parameter contain attr property set property attr value if source null update resource put attr source else if value equal property get property attr log warn name a attempt to override final parameter attr ignore if final parameter attr null final parameter add attr write out the non default property in this configuration to the give link output stream use utf encode param out the output stream to write to public void write xml output stream out throw i o exception write xml new output stream writer out utf write out the non default property in this configuration to the give link writer param out the writer to write to public void write xml writer out throw i o exception document doc as xml document try d o m source source new d o m source doc stream result result new stream result out transformer factory trans factory transformer factory new instance transformer transformer trans factory new transformer important to not hold configuration log while write result since out may be a hdfs stream which need to lock this configuration from another thread transformer transform source result catch transformer exception te throw new i o exception te return the xml dom correspond to this configuration private synchronize document as xml document throw i o exception document doc try doc document builder factory new instance new document builder new document catch parser configuration exception pe throw new i o exception pe element conf doc create element configuration doc append child conf conf append child doc create text node n handle deprecation ensure property be set and deprecation be handle for enumeration object e property key e have more element string name string e next element object object property get name string value null if object instanceof string value string object else continue element prop node doc create element property conf append child prop node element name node doc create element name name node append child doc create text node name prop node append child name node element value node doc create element value value node append child doc create text node value prop node append child value node if update resource null string source update resource get name if source null for string s source element source node doc create element source source node append child doc create text node s prop node append child source node conf append child doc create text node n return doc write out all the parameter and they property final and resource to the give link writer the format of the output would be property key1 value1 key1 be final key1 resource key2 value2 key2 be final key2 resource it do not output the parameter of the configuration object which be load from a input stream param out the writer to write to throw i o exception public static void dump configuration configuration config writer out throw i o exception json factory dump factory new json factory json generator dump generator dump factory create json generator out dump generator write start object dump generator write field name property dump generator write start array dump generator flush synchronize config for entry object object item config get prop entry set dump generator write start object dump generator write string field key string item get key dump generator write string field value config get string item get key dump generator write boolean field be final config final parameter contain item get key string resource config update resource get item get key string resource unknown resource if resource null resource length resource resource dump generator write string field resource resource dump generator write end object dump generator write end array dump generator write end object dump generator flush get the link class loader for this job return the correct class loader public class loader get class loader return class loader set the class loader that will be use to load the various object param class loader the new class loader public void set class loader class loader class loader this class loader class loader override public string to string string builder sb new string builder sb append configuration if load default to string default resource sb if resource size sb append to string resource sb return sb to string private t void to string list t resource string builder sb list iterator t i resource list iterator while i have next if i next index sb append sb append i next set the quietness mode in the quiet mode error and informational message might not be log param quietmode code true code to set quiet mode on code false code to turn it off public synchronize void set quiet mode boolean quietmode this quietmode quietmode synchronize boolean get quiet mode return this quietmode for debugging list non default property to the terminal and exit public static void main string arg throw exception new configuration write xml system out override public void read field datum input in throw i o exception clear int size writable util read v int in for int i i size i string key org apache hadoop io text read string in string value org apache hadoop io text read string in set key value string source writable util read compressed string array in if source null update resource put key source override override public void write datum output out throw i o exception property prop get prop writable util write v int out prop size for entry object object item prop entry set org apache hadoop io text write string out string item get key org apache hadoop io text write string out string item get value writable util write compress string array out update resource get item get key get key match the the regex param regex return map string string with match key public map string string get val by regex string regex pattern p pattern compile regex map string string result new hash map string string matcher m for entry object object item get prop entry set if item get key instanceof string item get value instanceof string m p matcher string item get key if m find match result put string item get key substitute var get prop get property string item get key return result a unique class which be use as a sentinel value in the caching for get class by name see configuration get class by name or null string private static abstract class negative cache sentinel public static void dump deprecate key deprecation context deprecation deprecation context get for entry string deprecate key info entry deprecation get deprecate key map entry set string builder new key new string builder for string new key entry get value new key new key append new key append t system out println entry get key t new key to string return whether or not a deprecated name have be warn if the name be not deprecate then always return false public static boolean have warn deprecation string name deprecation context deprecation deprecation context get if deprecation get deprecate key map contain key name if deprecation get deprecate key map get name access get return true return false 
