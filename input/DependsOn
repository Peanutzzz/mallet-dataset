protocol manager suppress warning all component value protocol manager depend on server member manager public class protocol manager extend member change listener implement application listener context start event disposable bean private c p protocol cp protocol private a p protocol ap protocol autowire private server member manager member manager private boolean ap init false private boolean cp init false private set member old member private static set string to a p member info collection member member set string node new hash set member for each member node add member get address return node delay init protocol private static set string to c p member info collection member member set string node new hash set member for each member final string ip member get ip final int raft port member util calculate raft port member node add ip raft port return node post construct public void init this member manager member manager notify center register subscriber this public c p protocol get cp protocol synchronize this if cp init init c p protocol cp init true return cp protocol public a p protocol get ap protocol synchronize this if ap init init a p protocol ap init true return ap protocol public void destroy if object non null ap protocol ap protocol shutdown if object non null cp protocol cp protocol shutdown override public void on application event context start event event private void init a p protocol application util get bean if exist a p protocol class protocol class config type class util resolve generic type protocol get class config config config application util get bean config type inject members4 a p config protocol init config protocol manager this ap protocol protocol private void init c p protocol application util get bean if exist c p protocol class protocol class config type class util resolve generic type protocol get class config config config application util get bean config type inject members4 c p config protocol init config protocol manager this cp protocol protocol private void inject members4 c p config config final member self member member manager get self final string self self member get ip integer parse int string value of self member get extend val member meta datum constant raft port set string other to c p member info member manager all member config set member self other private void inject members4 a p config config final string self member manager get self get address set string other to a p member info member manager all member config set member self other override public void on event member change event event here the sequence of node change event be very important for example node change event a occur at time t1 and node change event b occur at time t2 after a period of time t1 t2 set member copy new hash set event get member if old member null old member new hash set copy else old member remove all copy if old member be empty node change event between different protocol should not block each other and we use a single thread pool to inform the consistency layer of node change to avoid multiple task simultaneously carry out the consistency layer of node change operation if object non null ap protocol protocol executor ap member change ap protocol member change to a p member info copy if object non null cp protocol protocol executor cp member change cp protocol member change to c p member info copy remove old member info old member clear old member add all copy 
delegate consistency service impl depend on protocol manager service consistency delegate public class delegate consistency service impl implement consistency service private final persistent consistency service persistent consistency service private final ephemeral consistency service ephemeral consistency service public delegate consistency service impl persistent consistency service persistent consistency service ephemeral consistency service ephemeral consistency service this persistent consistency service persistent consistency service this ephemeral consistency service ephemeral consistency service override public void put string key record value throw naco exception map consistency service key put key value override public void remove string key throw naco exception map consistency service key remove key override public datum get string key throw naco exception return map consistency service key get key override public void listen string key record listener listener throw naco exception this special key be listen by both if key builder service meta key prefix equal key persistent consistency service listen key listener ephemeral consistency service listen key listener return map consistency service key listen key listener override public void un listen string key record listener listener throw naco exception map consistency service key un listen key listener override public boolean be available return ephemeral consistency service be available persistent consistency service be available private consistency service map consistency service string key return key builder match ephemeral key key ephemeral consistency service persistent consistency service 
datum syncer component depend on protocol manager public class datum syncer private final datum store data store private final global config partition config private final serializer serializer private final distro mapper distro mapper private final server member manager member manager private map string string task map new concurrent hash map public datum syncer datum store data store global config partition config serializer serializer distro mapper distro mapper server member manager member manager this data store data store this partition config partition config this serializer serializer this distro mapper distro mapper this member manager member manager post construct public void init start time sync submit a link sync task with a delay to execute param task synchronize datum task param delay delay to execute public void submit sync task task long delay if it be a new task if task get retry count iterator string iterator task get key iterator while iterator have next string key iterator next if string util be not blank task map put if absent build key key task get target server key associate key already exist if logger distro be debug enable logger distro debug sync already in process key key iterator remove if task get key be empty all key be remove return global executor submit datum sync check the server if get server null get server be empty logger srv log warn try to sync datum but server list be empty return list string key task get key if logger srv log be debug enable logger srv log debug try to sync datum for this key key get the datum by key and check the datum be empty or not map string datum datum map datum store batch get key if datum map null datum map be empty clear all flag of this task for string key key task map remove build key key task get target server return byte datum serializer serialize datum map long timestamp system current time millis boolean success name proxy sync datum datum task get target server if success sync task sync task new sync task sync task set key task get key sync task set retry count task get retry count sync task set last execute time timestamp sync task set target server task get target server retry sync sync task else clear all flag of this task for string key task get key task map remove build key key task get target server delay private void retry sync sync task sync task member member new member member set ip sync task get target server split member set port integer parse int sync task get target server split if get server contain member if server be no longer in healthy server list ignore this task fix remove exist task if sync task get key null for string key sync task get key task map remove build key key sync task get target server return todo may choose other retry policy submit sync task partition config get sync retry delay public void start time sync global executor schedule partition datum time sync new time sync public class time sync implement runnable override public void run try if logger distro be debug enable logger distro debug server list be get server send local timestamp to other server map string string key checksum new hash map for string key datum store key if distro mapper responsible key builder get service name key continue datum datum datum store get key if datum null continue key checksum put key datum value get checksum if key checksum be empty return if logger distro be debug enable logger distro debug sync checksum key checksum for member member get server if net util local server equal member get address continue name proxy sync check sum key checksum member get address catch exception e logger distro error time sync task fail e public collection member get server return member manager all member public string build key string key string target server return key util and common cache key spliter target server 
distro consistency service impl depend on protocol manager org springframework stereotype service distro consistency service public class distro consistency service impl implement ephemeral consistency service private final distro mapper distro mapper private final datum store data store private final task dispatcher task dispatcher private final serializer serializer private final server member manager member manager private final switch domain switch domain private final global config global config private boolean initialized false private volatile notifier notifier new notifier private load datum task load datum task new load datum task private map string concurrent link queue record listener listener new concurrent hash map private map string string sync checksum task new concurrent hash map public distro consistency service impl distro mapper distro mapper datum store data store task dispatcher task dispatcher serializer serializer server member manager member manager switch domain switch domain global config global config this distro mapper distro mapper this data store data store this task dispatcher task dispatcher this serializer serializer this member manager member manager this switch domain switch domain this global config global config post construct public void init global executor submit load datum task load datum task global executor submit distro notify task notifier private class load datum task implement runnable override public void run try load if initialize global executor submit load datum task this global config get load datum retry delay millis else logger distro info load datum success catch exception e logger distro error load datum fail e private void load throw exception if application util get standalone mode initialize true return size mean only myself in the list we need at least one another server alive while member manager get server list size thread sleep l logger distro info wait server list init for map entry string member entry member manager get server list entry set final string address entry get value get address if application util get local address equal address continue if logger distro be debug enable logger distro debug sync from address try sync datum from remote server if sync all datum from remote address initialize true return override public void put string key record value throw naco exception on put key value task dispatcher add task key override public void remove string key throw naco exception on remove key listener remove key override public datum get string key throw naco exception return datum store get key put a new record param key key of record param value record public void on put string key record value if key builder match ephemeral instance list key key datum instance datum new datum datum value instance value datum key key datum timestamp increment and get datum store put key datum if listener contain key key return notifier add task key apply action change remove a record param key key of record public void on remove string key datum store remove key if listener contain key key return notifier add task key apply action delete check sum when receive checksum request param checksum map map of checksum param server source server request checksum public void on receive checksum map string string checksum map string server if sync checksum task contain key server already in process of this server logger distro warn sync checksum task already in process with server return sync checksum task put server try list string to update key new array list list string to remove key new array list for map entry string string entry checksum map entry set if distro mapper responsible key builder get service name entry get key this key should not be send from remote server logger distro error receive responsible key timestamp of entry get key from server abort the procedure return if datum store contain entry get key datum store get entry get key value null datum store get entry get key value get checksum equal entry get value to update key add entry get key for string key datum store key if server equal distro mapper map srv key builder get service name key continue if checksum map contain key key to remove key add key logger distro info to remove key to update key source to remove key to update key server for string key to remove key on remove key if to update key be empty return try byte result name proxy get datum to update key server process datum result catch exception e logger distro error get datum from server fail e finally remove this in process flag sync checksum task remove server private boolean sync all datum from remote string server try byte datum name proxy get all datum server return process data data catch exception e logger distro error sync full datum from server fail e return false private boolean process datum byte datum throw exception if datum length map string datum instance datum map serializer deserialize map datum instance class for map entry string datum instance entry datum map entry set datum store put entry get key entry get value if listener contain key entry get key pretty sure the service not exist if switch domain be default instance ephemeral create empty service logger distro info create service entry get key service service new service string service name key builder get service name entry get key string namespace id key builder get namespace entry get key service set name service name service set namespace id namespace id service set group name constant default group now validate the service if fail exception will be throw service set last modify millis system current time millis service recalculate checksum the listener correspond to the key value must not be empty record listener listener listener get key builder service meta key prefix peek if object be null listener return false listener on change key builder build service meta key namespace id service name service for map entry string datum instance entry datum map entry set if listener contain key entry get key should not happen logger distro warn listener of not find entry get key continue try for record listener listener listener get entry get key listener on change entry get key entry get value value catch exception e logger distro error naco distro error while execute listener of key entry get key e continue update datum store if listener execute successfully datum store put entry get key entry get value return true override public void listen string key record listener listener throw naco exception if listener contain key key listener put key new concurrent link queue if listener get key contain listener return listener get key add listener override public void un listen string key record listener listener throw naco exception if listener contain key key return for record listener record listener listener get key if record listener equal listener listener get key remove listener break override public boolean be available return be initialize server status up name equal switch domain get override server status public boolean be initialize return initialize global config be datum warmup public class notifier implement runnable private concurrent hash map string string service new concurrent hash map private blocking queue pair string apply action task new array block queue add new notify task to queue param datum key datum key param action action for datum public void add task string datum key apply action action if service contain key datum key action apply action change return if action apply action change service put datum key string util empty task offer pair with datum key action public int get task size return task size override public void run logger distro info distro notifier start for try pair string apply action pair task take handle pair catch throwable e logger distro error naco distro error while handle notify task e private void handle pair string apply action pair try string datum key pair get value0 apply action action pair get value1 service remove datum key int count if listener contain key datum key return for record listener listener listener get datum key count try if action apply action change listener on change datum key datum store get datum key value continue if action apply action delete listener on delete datum key continue catch throwable e logger distro error naco distro error while notify listener of key datum key e if logger distro be debug enable logger distro debug naco distro datum change notify key listener count action datum key count action name catch throwable e logger distro error naco distro error while handle notify task e 
raft consistency service impl depend on protocol manager service public class raft consistency service impl implement persistent consistency service autowire private raft core raft core autowire private raft peer set peer autowire private switch domain switch domain override public void put string key record value throw naco exception try raft core signal publish key value catch exception e logger raft error raft put fail e throw new naco exception naco exception server error raft put fail key key value value e override public void remove string key throw naco exception try if key builder match instance list key key raft core be leader datum datum new datum datum key key raft core on delete datum key peer get leader raft core unlisten all key return raft core signal delete key raft core unlisten all key catch exception e logger raft error raft remove fail e throw new naco exception naco exception server error raft remove fail key key e override public datum get string key throw naco exception return raft core get datum key override public void listen string key record listener listener throw naco exception raft core listen key listener override public void un listen string key record listener listener throw naco exception raft core un listen key listener override public boolean be available return raft core be initialize server status up name equal switch domain get override server status put a new datum from other server param datum datum param source source server throw naco exception naco exception public void on put datum datum raft peer source throw naco exception try raft core on publish datum source catch exception e logger raft error raft on put fail e throw new naco exception naco exception server error raft on put fail datum datum source source e remove a new datum from other server param datum datum param source source server throw naco exception naco exception public void on remove datum datum raft peer source throw naco exception try raft core on delete datum key source catch exception e logger raft error raft on remove fail e throw new naco exception naco exception server error raft on remove fail datum datum source source e 
raft core depend on protocol manager component public class raft core public static final string api vote util and common naco name context raft vote public static final string api beat util and common naco name context raft beat public static final string api pub util and common naco name context raft datum public static final string api del util and common naco name context raft datum public static final string api get util and common naco name context raft datum public static final string api on pub util and common naco name context raft datum commit public static final string api on del util and common naco name context raft datum commit public static final string api get peer util and common naco name context raft peer private final schedule executor service executor executor factory manage new single schedule executor service class util get canonical name name app class new name thread factory com alibaba naco name raft notifier public static final lock operate lock new reentrant lock public static final int publish term increase count private volatile concurrent map string list record listener listener new concurrent hash map private volatile concurrent map string datum datum new concurrent hash map autowire private raft peer set peer autowire private switch domain switch domain autowire private global config global config autowire private raft proxy raft proxy autowire private raft store raft store public volatile notifier notifier new notifier private boolean initialized false init raft core throw exception any exception during init post construct public void init throw exception logger raft info initialize raft sub system executor submit notifier final long start system current time millis raft store load datum notifier datum set term number util to long raft store load meta get property term 0 l logger raft info cache load datum count current term datum size peer get term while true if notifier task size break thread sleep l initialize true logger raft info finish to load datum from disk cost ms system current time millis start global executor register master election new master election global executor register heartbeat new heart beat logger raft info timer start leader timeout ms heart beat timeout ms global executor leader timeout ms global executor heartbeat interval ms public map string list record listener get listener return listener signal publish new record if not leader signal to leader if leader try to commit publish param key key param value value throw exception any exception during publish public void signal publish string key record value throw exception if be leader object node param jackson util create empty json node param put key key param replace value jackson util transfer to json node value map string string parameter new hash map parameter put key key final raft peer leader get leader raft proxy proxy post large leader ip api pub param to string parameter return try operate lock lock final long start system current time millis final datum datum new datum datum key key datum value value if get datum key null datum timestamp set 1 l else datum timestamp set get datum key timestamp increment and get object node json jackson util create empty json node json replace datum jackson util transfer to json node datum json replace source jackson util transfer to json node peer local on publish datum peer local final string content json to string final count down latch latch new count down latch peer majority count for final string server peer all server include myself if be leader server latch count down continue final string url build url server api on pub http client async http post large url array as list key key content new async completion handler integer override public integer on complete response response throw exception if response get status code http u r l connection http ok logger raft warn raft fail to publish datum to peer datum id peer http code datum key server response get status code return latch count down return override public state on content write complete return state continue if latch await util and common raft publish timeout time unit millisecond only majority server return success can we consider this update success logger raft error datum publish fail cause fail to notify majority key key throw new illegal state exception datum publish fail cause fail to notify majority key key long end system current time millis logger raft info signal publish cost m key end start key finally operate lock unlock signal delete record if not leader signal leader delete if leader try to commit delete param key key throw exception any exception during delete public void signal delete final string key throw exception operate lock lock try if be leader map string string param new hash map param put key u be l encoder encode key utf raft proxy proxy get leader ip api del params http method delete return construct datum datum datum new datum datum key key object node json jackson util create empty json node json replace datum jackson util transfer to json node datum json replace source jackson util transfer to json node peer local on delete datum key peer local for final string server peer all server without my self string url build url server api on del http client async http delete large url null json to string new async completion handler integer override public integer on complete response response throw exception if response get status code http u r l connection http ok logger raft warn raft fail to delete datum from peer datum id peer http code key server response get status code return raft peer local peer local local reset leader due return finally operate lock unlock do publish if leader commit publish to store if not leader stop publish because should signal to leader param datum datum param source source raft peer throw exception any exception during publish public void on publish datum datum raft peer source throw exception raft peer local peer local if datum value null logger raft warn receive empty datum throw new illegal state exception receive empty datum if peer be leader source ip logger raft warn peer try to publish datum but wasn t leader leader jackson util to json source jackson util to json get leader throw new illegal state exception peer source ip try to publish datum but wasn t leader if source term get local term get logger raft warn out of date publish pub term cur term jackson util to json source jackson util to json local throw new illegal state exception out of date publish pub term source term get cur term local term get local reset leader due if datum should be persist usually this be true if key builder match persistent key datum key raft store write datum datum put datum key datum if be leader local term add and get publish term increase count else if local term get publish term increase count source term get set leader term get leader term set source term get local term set get leader term get else local term add and get publish term increase count raft store update term local term get notifier add task datum key apply action change logger raft info datum add update key term datum key local term do delete if leader commit delete to store if not leader stop delete because should signal to leader param datum key datum key param source source raft peer throw exception any exception during delete public void on delete string datum key raft peer source throw exception raft peer local peer local if peer be leader source ip logger raft warn peer try to publish datum but wasn t leader leader jackson util to json source jackson util to json get leader throw new illegal state exception peer source ip try to publish datum but wasn t leader if source term get local term get logger raft warn out of date publish pub term cur term jackson util to json source jackson util to json local throw new illegal state exception out of date publish pub term source term cur term local term local reset leader due do apply string key datum key delete datum key if key builder match service meta key key if local term get publish term increase count source term get set leader term get leader term set source term get local term set get leader term get else local term add and get publish term increase count raft store update term local term get logger raft info datum remove key term datum key local term public class master election implement runnable override public void run try if peer be ready return raft peer local peer local local leader due ms global executor tick period ms if local leader due ms return reset timeout local reset leader due local reset heartbeat due send vote catch exception e logger raft warn raft error while master election e private void send vote raft peer local peer get net util local server logger raft info leader timeout start vote leader term jackson util to json get leader local term peer reset local term increment and get local vote for local ip local state raft peer state candidate map string string param new hash map param put vote jackson util to json local for final string server peer all server without my self final string url build url server api vote try http client async http post url null param new async completion handler integer override public integer on complete response response throw exception if response get status code http u r l connection http ok logger raft error naco raft vote fail url response get response body url return raft peer peer jackson util to obj response get response body raft peer class logger raft info receive approve from peer jackson util to json peer peer decide leader peer return catch exception e logger raft warn error while send vote to server server receive vote param remote remote raft peer of vote information return self peer information public synchronize raft peer receive vote raft peer remote if peer contain remote throw new illegal state exception can not find peer remote ip raft peer local peer get net util local server if remote term get local term get string msg receive illegitimate vote voter term remote term votee term local term logger raft info msg if string util be empty local vote for local vote for local ip return local local reset leader due local state raft peer state follower local vote for remote ip local term set remote term get logger raft info vote as leader term remote ip remote term return local public class heart beat implement runnable override public void run try if peer be ready return raft peer local peer local local heartbeat due ms global executor tick period ms if local heartbeat due ms return local reset heartbeat due send beat catch exception e logger raft warn raft error while send beat e private void send beat throw i o exception interrupt exception raft peer local peer local if application util get standalone mode local state raft peer state leader return if logger raft be debug enable logger raft debug raft send beat with key datum size local reset leader due build datum object node packet jackson util create empty json node packet replace peer jackson util transfer to json node local array node array jackson util create empty array node if switch domain be send beat only logger raft info send beat only string value of switch domain be send beat only if switch domain be send beat only for datum datum datums value object node element jackson util create empty json node if key builder match service meta key datum key element put key key builder brief service meta key datum key else if key builder match instance list key datum key element put key key builder brief instance listkey datum key element put timestamp datum timestamp get array add element packet replace datum array broadcast map string string param new hash map string string param put beat jackson util to json packet string content jackson util to json param byte array output stream out new byte array output stream g z i p output stream gzip new g z i p output stream out gzip write content get byte standard charset utf gzip close byte compress byte out to byte array string compress content new string compress byte standard charset utf if logger raft be debug enable logger raft debug raw beat datum size size of compressed datum content length compress content length for final string server peer all server without my self try final string url build url server api beat if logger raft be debug enable logger raft debug send beat to server server http client async http post large url null compressed byte new async completion handler integer override public integer on complete response response throw exception if response get status code http u r l connection http ok logger raft error naco raft beat fail peer response get response body server metric monitor get leader send beat fail exception increment return peer update jackson util to obj response get response body raft peer class if logger raft be debug enable logger raft debug receive beat response from url return override public void on throwable throwable t logger raft error naco raft error while send heart beat to peer server t metric monitor get leader send beat fail exception increment catch exception e logger raft error error while send heart beat to peer server e metric monitor get leader send beat fail exception increment receive beat from leader todo split method to multiple smaller method param beat beat information from leader return self peer information throw exception any exception during handle public raft peer receive beat json node beat throw exception final raft peer local peer local final raft peer remote new raft peer json node peer beat get peer remote ip peer get ip as text remote state raft peer state value of peer get state as text remote term set peer get term as long remote heartbeat due ms peer get heartbeat due ms as long remote leader due ms peer get leader due ms as long remote vote for peer get vote for as text if remote state raft peer state leader logger raft info raft invalid state from master state remote peer remote state jackson util to json remote throw new illegal argument exception invalid state from master state remote state if local term get remote term get logger raft info raft out of date beat beat from term beat to term remote peer and leader due ms remote term get local term get jackson util to json remote local leader due ms throw new illegal argument exception out of date beat beat from term remote term get beat to term local term get if local state raft peer state follower logger raft info raft make remote as leader remote peer jackson util to json remote mk follower local state raft peer state follower local vote for remote ip final json node beat datum beat get datum local reset leader due local reset heartbeat due peer make leader remote if switch domain be send beat only map string integer receive key map new hash map datum size for map entry string datum entry datum entry set receive key map put entry get key now check datum list string batch new array list int process count if logger raft be debug enable logger raft debug raft receive beat with key raft core datum size be remote server term local term beat datum size datum size remote ip remote term local term for object object beat datum process count process count json node entry json node object string key entry get key as text final string datum key if key builder match service meta key key datum key key builder detail service meta key key else if key builder match instance list key key datum key key builder detail instance listkey key else ignore corrupted key continue long timestamp entry get timestamp as long receive key map put datum key try if datum contain key datum key datum get datum key timestamp get timestamp process count beat datum size continue if datum contain key datum key datum get datum key timestamp get timestamp batch add datum key if batch size process count beat datum size continue string key string util join batch if batch size continue logger raft info get datum from leader batch size be process count be datums size be raft core datum size be get leader ip batch size process count beat datum size datum size update datum entry string url build url remote ip api get key u be l encoder encode key utf http client async http get url null null new async completion handler integer override public integer on complete response response throw exception if response get status code http u r l connection http ok return list json node datum list jackson util to obj response get response body new type reference list json node for json node datum json datum list datum new datum null operate lock lock try datum old datum get datum datum json get key as text if old datum null datum json get timestamp as long old datum timestamp get logger raft info naco raft timestamp be smaller than that of mine key remote local datum json get key as text datum json get timestamp as long old datum timestamp continue if key builder match service meta key datum json get key as text datum service service datum new datum service datum key datum json get key as text service datum timestamp set datum json get timestamp as long service datum value jackson util to obj datum json get value to string service class new datum service datum if key builder match instance list key datum json get key as text datum instance instance datum new datum instance datum key datum json get key as text instance datum timestamp set datum json get timestamp as long instance datum value jackson util to obj datum json get value to string instance class new datum instance datum if new datum null new datum value null logger raft error receive null datum datum json continue raft store write new datum datum put new datum key new datum notifier add task new datum key apply action change local reset leader due if local term get remote term get get leader term set remote term get local term set get leader term get else local term add and get raft store update term local term get logger raft info datum update key timestamp from local term new datum key new datum timestamp jackson util to json remote local term catch throwable e logger raft error raft beat fail to sync datum from leader datum new datum e finally operate lock unlock time unit millisecond sleep return batch clear catch exception e logger raft error naco raft fail to handle beat entry key datum key list string dead key new array list for map entry string integer entry receive key map entry set if entry get value dead key add entry get key for string dead key dead key try delete datum dead key catch exception e logger raft error naco raft fail to remove entry key dead key e return local add listener for target key param key key param listener new listener public void listen string key record listener listener list record listener listener list listener get key if listener list null listener list contain listener return if listener list null listener list new copy on write array list listener put key listener list logger raft info add listener key listener list add listener if datum present notify immediately for datum datum datums value if listener interest datum key continue try listener on change datum key datum value catch exception e logger raft error naco raft fail to notify listener e remove listener for key param key key param listener listener public void un listen string key record listener listener if listener contain key key return for record listener dl listener get key todo maybe use equal if dl listener listener get key remove listener break public void unlisten all string key listener remove key public void set term long term peer set term term public boolean be leader string ip return peer be leader ip public boolean be leader return peer be leader net util local server build api url param ip ip of api param api api path return api url public static string build url string ip string api if ip contain util and common ip port spliter ip ip util and common ip port spliter application util get port return http ip application util get context path api public datum get datum string key return datum get key public raft peer get leader return peer get leader public list raft peer get peer return new array list peer all peer public raft peer set get peer set return peer public void set peer set raft peer set peer set peer peer set public int datum size return datum size public void add datum datum datum datum put datum key datum notifier add task datum key apply action change load datum param key datum key public void load datum string key try datum datum raft store load key if datum null return datum put key datum catch exception e logger raft error load datum fail key e private void delete datum string key datum delete try delete datum remove u r l decoder decode key utf if delete null raft store delete delete logger raft info datum delete key key notifier add task u be l decoder decode key utf apply action delete catch unsupported encode exception e logger raft warn datum key decode fail key public boolean be initialize return initialize global config be datum warmup public int get notify task count return notifier get task size public class notifier implement runnable private concurrent hash map string string service new concurrent hash map private blocking queue pair task new link block queue add notify task param datum key datum key param action action of datum public void add task string datum key apply action action if service contain key datum key action apply action change return if action apply action change service put datum key string util empty logger raft info add task datum key task add pair with datum key action public int get task size return task size override public void run logger raft info raft notifier start while true try pair pair task take if pair null continue string datum key string pair get value0 apply action action apply action pair get value1 service remove datum key logger raft info remove task datum key int count if listener contain key key builder service meta key prefix if key builder match service meta key datum key key builder match switch key datum key for record listener listener listener get key builder service meta key prefix try if action apply action change listener on change datum key get datum datum key value if action apply action delete listener on delete datum key catch throwable e logger raft error naco raft error while notify listener of key datum key e if listener contain key datum key continue for record listener listener listener get datum key count try if action apply action change listener on change datum key get datum datum key value continue if action apply action delete listener on delete datum key continue catch throwable e logger raft error naco raft error while notify listener of key datum key e if logger raft be debug enable logger raft debug naco raft datum change notify key listener count datum key count catch throwable e logger raft error naco raft error while handle notify task e 
raft peer set component depend on protocol manager public class raft peer set extend member change listener private final server member manager member manager private atomic long local term new atomic long 0 l private raft peer leader null private volatile map string raft peer peer new hash map private set string site new hash set private volatile boolean ready false private set member old member public raft peer set server member manager member manager this member manager member manager post construct public void init notify center register subscriber this change peer member manager all member public raft peer get leader if application util get standalone mode return local return leader public set string all site return site public boolean be ready return ready remove raft node param server node address need to be remove public void remove list string server for string server server peer remove server update raft peer param peer new peer return new peer public raft peer update raft peer peer peer put peer ip peer return peer judge whether input address be leader param ip peer address return true if be leader or stand alone otherwise false public boolean be leader string ip if application util get standalone mode return true if leader null logger raft warn be leader no leader be available now return false return string util equal leader ip ip public set string all server include myself return peer key set get all server exclude current peer return all server exclude current peer public set string all server without my self set string server new hash set string peer key set exclude myself server remove local ip return server public collection raft peer all peer return peer value public int size return peer size calculate and decide which peer be leader if have new peer have more than half vote change leader to new peer param candidate new candidate return new leader if new candidate have more than half vote otherwise old leader public raft peer decide leader raft peer candidate peer put candidate ip candidate sort bag ip new tree bag int max approve count string max approve peer null for raft peer peer peer value if string util be empty peer vote for continue ip add peer vote for if ip get count peer vote for max approve count max approve count ip get count peer vote for max approve peer peer vote for if max approve count majority count raft peer peer peer get max approve peer peer state raft peer state leader if object equal leader peer leader peer application util publish event new leader elect finish event this leader local logger raft info have become the leader leader ip return leader set leader as new candidate param candidate new candidate return new leader public raft peer make leader raft peer candidate if object equal leader candidate leader candidate application util publish event new make leader event this leader local logger raft info have become the leader local leader leader ip jackson util to json local jackson util to json leader for final raft peer peer peer value map string string param new hash map if object equal peer candidate peer state raft peer state leader try string url raft core build url peer ip raft core api get peer http client async http get url null param new async completion handler integer override public integer on complete response response throw exception if response get status code http u r l connection http ok logger raft error naco raft get peer fail peer response get response body peer ip peer state raft peer state follower return update jackson util to obj response get response body raft peer class return catch exception e peer state raft peer state follower logger raft error naco raft error while get peer from peer peer ip return update candidate get local raft peer return local raft peer public raft peer local raft peer peer peer get application util get local address if peer null application util get standalone mode raft peer local peer new raft peer local peer ip net util local server local peer term set local term get peer put local peer ip local peer return local peer if peer null throw new illegal state exception unable to find local peer net util local server all peer array to string peer key set to array return peer public raft peer get string server return peer get server public int majority count return peer size reset set public void reset leader null for raft peer peer peer value peer vote for null public void set term long term local term set term public long get term return local term get public boolean contain raft peer remote return peer contain key remote ip override public void on event member change event event collection member member event get member if old member null old member new hash set member else old member remove all member if old member be empty change peer member old member clear old member add all member private void change peer collection member member map string raft peer tmp peer new hash map member size for member member member final string address member get address if peer contain key address tmp peer put address peer get address continue raft peer raft peer new raft peer raft peer ip address first time meet the local server if application util get local address equal address raft peer term set local term get tmp peer put address raft peer replace raft peer set peer tmp peer ready true logger raft info raft peer change member override public string to string return raft peer set local term local term leader leader peer peer site site 
