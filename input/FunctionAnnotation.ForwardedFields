semantic property precedence test function annotation forward field f0 private static class wildcard forward mapper with forward annotation t implement map function t t override public t map t value return value 
group combine operator test function annotation forward field 4 ; 1 3 ; 2 function annotation read field 0 ; 3 private static class dummy group combine function1 implement group combine function tuple5 integer long string long integer tuple5 integer long string long integer override public void combine iterable tuple5 integer long string long integer value collector tuple5 integer long string long integer out throw exception 
group reduce operator test function annotation forward field 4 ; 1 3 ; 2 function annotation read field 0 ; 3 private static class dummy group reduce function1 implement group reduce function tuple5 integer long string long integer tuple5 integer long string long integer override public void reduce iterable tuple5 integer long string long integer value collector tuple5 integer long string long integer out throw exception 
reduce operator test function annotation forward field 4 ; 1 3 ; 2 function annotation read field 0 ; 3 private static class dummy reduce function1 implement reduce function tuple5 integer long string long integer override public tuple5 integer long string long integer reduce tuple5 integer long string long integer v1 tuple5 integer long string long integer v2 throw exception return new tuple5 integer long string long integer 
circulant graph function annotation forward field f0 private static class link vertex to offset implement flat map function long value edge long value null value private final long vertex count private final list offset range offset range private long value target new long value private edge long value null value edge new edge null target null value get instance public link vertex to offset long vertex count list offset range offset range this vertex count vertex count this offset range offset range override public void flat map long value source collector edge long value null value out throw exception edge f0 source long source i d source get value for offset range offset range offset range long target i d source i d offset range get offset for long i offset range get length i i add positive offset target set value target i d vertex count out collect edge 
edge metric function annotation forward field 2.1 private static class edge stats t extend comparable t et implement map function edge t tuple3 et long value long value tuple3 t long value long value private long value zero new long value private long value one new long value private tuple3 t long value long value output new tuple3 override public tuple3 t long value long value map edge t tuple3 et long value long value edge throw exception tuple3 et long value long value degree edge f2 output f0 edge f0 output f1 degree f1 long source degree degree f1 get value long target degree degree f2 get value if source degree target degree source degree target degree edge f0 compare to edge f1 output f2 one else output f2 zero return output 
summarization suppress warning serial function annotation forward field private static final class vertex group item to summarize vertex filter k vv implement filter function vertex group item k vv override public boolean filter vertex group item k vv vertex group item throw exception return vertex group item get vertex group count equal 0 l 
summarization suppress warning serial function annotation forward field private static final class vertex group item to representative filter k vv implement filter function vertex group item k vv override public boolean filter vertex group item k vv vertex group item throw exception return vertex group item get vertex group count equal 0 l 
summarization suppress warning serial function annotation forward field f0 f1 private static final class vertex group item to vertex with representative mapper k vv implement map function vertex group item k vv vertex with representative k private final vertex with representative k reuse vertex with representative private vertex group item to vertex with representative mapper reuse vertex with representative new vertex with representative override public vertex with representative k map vertex group item k vv vertex group item throw exception reuse vertex with representative set vertex id vertex group item get vertex id reuse vertex with representative set group representative id vertex group item get group representative id return reuse vertex with representative 
triangle enumerator suppress warning serial function annotation forward field 0 ; 1 private static final class degree joiner k implement reduce function edge with degree k private final edge with degree k out edge new edge with degree override public edge with degree k reduce edge with degree k edge1 edge with degree k edge2 throw exception copy first edge out edge copy from edge1 set miss degree if edge1 get first degree edge1 get second degree out edge set first degree edge2 get first degree else if edge1 get first degree edge1 get second degree out edge set second degree edge2 get second degree return out edge 
triangle enumerator suppress warning serial function annotation forward field private static final class triad builder k extend comparable k implement group reduce function edge k null value triad k private final list k vertex new array list private final triad k out triad new triad override public void reduce iterable edge k null value edge iter collector triad k out throw exception final iterator edge k null value edge edge iter iterator clear vertex list vertex clear read first edge edge k null value first edge edge next out triad set first vertex first edge get source vertex add first edge get target build and emit triad while edge have next k higher vertex id edge next get target combine vertex with all previously read vertex for k lower vertex id vertex out triad set second vertex lower vertex id out triad set third vertex higher vertex id out collect out triad vertex add higher vertex id 
