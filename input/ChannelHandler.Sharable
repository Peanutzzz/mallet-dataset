mesos artifact server channel handler sharable public static class virtual file server handler extend simple channel inbound handler route request private file system f private path path public virtual file server handler path path throw i o exception this path path if path be absolute throw new illegal argument exception path must be absolute path to string this f path get file system if f exist path f get file status path be dir throw new illegal argument exception no such file path to string override protect void channel read0 channel handler context ctx route request route request throw exception http request request route request get request if log be debug enable log debug request for file request get method path if request get method get request get method head send method not allow ctx return final file status status try status f get file status path catch i o exception e log error unable to stat file e send error ctx go return compose the response http response response new default http response http ok http header set header response connection http header value close http header set header response cache control private http header set header response content type application octet stream http header set content length response status get len ctx write response if request get method get write the content netty will close the stream final f s datum input stream stream f open path try ctx write new chunked stream stream catch exception e stream close throw e channel future last content future ctx write and flush last http content empty last content last content future add listener channel future listener close override public void exception catch channel handler context ctx throwable cause if ctx channel be active log error catch exception cause send error ctx internal server error send the method not allow response param ctx the channel context to write the response to private static void send method not allow channel handler context ctx full http response response new default full http response http method not allow close the connection as soon as the error message be send ctx write and flush response add listener channel future listener close write a simple error response message param ctx the channel context to write the response to param status the response status private static void send error channel handler context ctx http response status status full http response response new default full http response http status unpool copy buffer failure status be n charset util utf http header set header response content type text plain charset utf close the connection as soon as the error message be send ctx write and flush response add listener channel future listener close 
mesos artifact server channel handler sharable public static class unknown file handler extend simple channel inbound handler object override protect void channel read0 channel handler context ctx object message send not find ctx private static void send not find channel handler context ctx full http response response new default full http response http not find close the connection as soon as the error message be send ctx write and flush response add listener channel future listener close 
abstract server handler internal channel handler sharable public abstract class abstract server handler req extend message body resp extend message body extend channel inbound handler adapter private static final logger log logger factory get logger abstract server handler class private static final long unknown request id the own server of this handler private final abstract server base req resp server the serializer use to de serialize message private final message serializer req resp serializer thread pool for query execution protect final executor service query executor expose server statistics private final kv state request stats stats create the handler param serializer the serializer use to de serialize message param stats statistics collector public abstract server handler final abstract server base req resp server final message serializer req resp serializer final kv state request stats stats this server precondition check not null server this serializer precondition check not null serializer this query executor server get query executor this stats precondition check not null stats protect string get server name return server get server name override public void channel active channel handler context ctx throw exception stats report active connection override public void channel inactive channel handler context ctx throw exception stats report inactive connection override public void channel read channel handler context ctx object msg throw exception req request null long request id unknown request id try final byte buf buf byte buf msg final message type msg type message serializer deserialize header buf request id message serializer get request id buf log trace handle request with id request id if msg type message type request message body request serializer deserialize request buf stats report request execute actual query async because it be possibly block e g file i o a submission failure be not treat as fatal query executor submit new async request task this ctx request id request stats else unexpected final string err msg unexpected message type msg type expect message type request final byte buf failure message serializer serialize server failure ctx alloc new illegal argument exception err msg log debug err msg ctx write and flush failure catch throwable t log error error while handle request with id request id unknown request id unknown request id t final string stringify cause exception util stringify exception t string err msg byte buf err if request null err msg fail request with id request id cause by stringified cause err message serializer serialize request failure ctx alloc request id new runtime exception err msg stats report fail request else err msg fail incoming message cause by stringified cause err message serializer serialize server failure ctx alloc new runtime exception err msg ctx write and flush err finally important we have to always recycle the incoming buffer otherwise we will leak memory out of netty s buffer pool if any operation ever hold on to the buffer it be the responsibility of that operation to retain the buffer and release it later reference count util release msg override public void exception catch channel handler context ctx throwable cause throw exception final string msg exception in server pipeline cause by exception util stringify exception cause final byte buf err message serializer serialize server failure ctx alloc new runtime exception msg log debug msg ctx write and flush err add listener channel future listener close handle a incoming request and return a link completable future contain the corresponding response p b note b this method be call by multiple thread param request id the id of the receive request to be handle param request the request to be handle return a future with the response to be forward to the client public abstract completable future resp handle request final long request id final req request shut down any handler specific resource e g thread pool etc and return a link completable future p if a exception be throw during the shutdown process then that exception will be include in the return future return a link completable future that will be complete when the shutdown process actually finish public abstract completable future void shutdown task to execute the actual query against the state instance private static class async request task req extend message body resp extend message body implement runnable private final abstract server handler req resp handler private final channel handler context ctx private final long request id private final req request private final kv state request stats stats private final long creation nano async request task final abstract server handler req resp handler final channel handler context ctx final long request id final req request final kv state request stats stats this handler precondition check not null handler this ctx precondition check not null ctx this request id request id this request precondition check not null request this stats precondition check not null stats this creation nano system nano time override public void run if ctx channel be active return handler handle request request id request when complete resp throwable try if throwable null throw throwable instanceof completion exception throwable get cause throwable if resp null throw new bad request exception handler get server name null return for request with id request id final byte buf serial resp message serializer serialize response ctx alloc request id resp int high watermark ctx channel config get write buffer high water mark channel future write if serial resp readable byte high watermark write ctx write and flush serial resp else write ctx write and flush new chunk byte buf serial resp high watermark write add listener new request write listener catch bad request exception e log debug bad request request id request id e try stats report fail request final byte buf err message serializer serialize request failure ctx alloc request id e ctx write and flush err catch i o exception io log error fail to respond with the error after fail request io catch throwable t log error error while handle request with id request id t try stats report fail request final string err msg fail request request id system line separator cause by exception util stringify exception t final byte buf err message serializer serialize request failure ctx alloc request id new runtime exception err msg ctx write and flush err catch i o exception io log error fail to respond with the error after fail request io override public string to string return async request task request id request id request request callback after query result have be write p gather stats and log error private class request write listener implement channel future listener override public void operation complete channel future future throw exception long duration nano system nano time creation nano long duration millis time unit millisecond convert duration nano time unit nanosecond if future be success log debug request be successfully answer after ms request duration millis stats report successful request duration millis else log debug request fail after ms request duration milli future cause stats report fail request 
kv state client proxy handler internal channel handler sharable public class kv state client proxy handler extend abstract server handler kv state request kv state response private static final logger log logger factory get logger kv state client proxy handler class the proxy use this handler private final kv state client proxy proxy a cache to hold the location of different state for which we have already see request private final concurrent map tuple2 job i d string completable future kv state location lookup cache new concurrent hash map network client to forward query to link kv state server impl state server instance inside the cluster private final client kv state internal request kv state response kv state client create the handler use by the link kv state client proxy impl param proxy the link kv state client proxy impl proxy use the handler param query executor thread the number of thread use to process incoming request param serializer the link message serializer use to de serialize the different message param stats server statistics collector public kv state client proxy handler final kv state client proxy impl proxy final int query executor thread final message serializer kv state request kv state response serializer final kv state request stats stats super proxy serializer stats this proxy precondition check not null proxy this kv state client create internal client query executor thread private static client kv state internal request kv state response create internal client int thread final message serializer kv state internal request kv state response message serializer new message serializer new kv state internal request kv state internal request deserializer new kv state response kv state response deserializer return new client queryable state proxy client thread message serializer new disabled kv state request stats override public completable future kv state response handle request final long request id final kv state request request completable future kv state response response new completable future execute action async response request false return response private void execute action async final completable future kv state response result final kv state request request final boolean update if result be do final completable future kv state response operation future get state request update operation future when complete async t throwable if throwable null if throwable get cause instanceof unknown kv state id exception throwable get cause instanceof unknown kv state key group location exception throwable get cause instanceof connect exception these failure be likely to be cause by out of sync kv state location therefore we retry this query and force look up the location log debug retry after fail to retrieve state due to throwable get cause get message execute action async result request true else result complete exceptionally throwable else result complete t query executor result when complete t throwable operation future cancel false private completable future kv state response get state final kv state request request final boolean force update return get kv state lookup info request get job id request get state name force update then compose async function kv state location completable future kv state response location final int key group index key group range assignment compute key group for key hash request get key hash code location get num key group final inet socket address server address location get kv state server address key group index if server address null return future util complete exceptionally new unknown kv state key group location exception get server name else query server final kv state i d kv state id location get kv state i d key group index final kv state internal request internal request new kv state internal request kv state id request get serialize key and namespace return kv state client send request server address internal request query executor lookup the link kv state location for the give job and queryable state name p the job manager will be query for the location only if force or no cached location can be find there be no guarantee about param job id job i d the state instance belong to param queryable state name name under which the state instance have be publish param force update flag to indicate whether to force a update via the lookup service return future hold the kv state location private completable future kv state location get kv state lookup info final job i d job id final string queryable state name final boolean force update final tuple2 job i d string cache key new tuple2 job id queryable state name final completable future kv state location cache future lookup cache get cache key if force update cache future null cached future be complete exceptionally log debug retrieve location for state of job from the cache queryable state name job id return cache future final kv state location oracle kv state location oracle proxy get kv state location oracle job id if kv state location oracle null log debug retrieve location for state of job from the key value state location oracle queryable state name job id final completable future kv state location location new completable future lookup cache put cache key location kv state location oracle request kv state location job id queryable state name when complete kv state location kv state location throwable throwable if throwable null if exception util strip completion exception throwable instanceof flink job not find exception if the job id be wrong remove the entry from the cache lookup cache remove cache key location complete exceptionally throwable else location complete kv state location return location else return future util complete exceptionally new unknown location exception could not retrieve location of state queryable state name of job job id potential reason be i the state be not ready or ii the job do not exist override public completable future void shutdown return kv state client shutdown 
kv state server handler internal channel handler sharable public class kv state server handler extend abstract server handler kv state internal request kv state response kv state registry hold reference to the kv state instance private final kv state registry registry create the handler use by the link kv state server impl param server the link kv state server impl use the handler param kv state registry registry to query param serializer the link message serializer use to de serialize the different message param stats server statistics collector public kv state server handler final kv state server impl server final kv state registry kv state registry final message serializer kv state internal request kv state response serializer final kv state request stats stats super server serializer stats this registry precondition check not null kv state registry override public completable future kv state response handle request final long request id final kv state internal request request final completable future kv state response response future new completable future try final kv state entry kv state registry get kv state request get kv state id if kv state null response future complete exceptionally new unknown kv state id exception get server name request get kv state id else byte serialize key and namespace request get serialize key and namespace byte serialize result get serialize value kv state serialize key and namespace if serialize result null response future complete new kv state response serialize result else response future complete exceptionally new unknown key or namespace exception get server name return response future catch throwable t string err msg error while process request with id request id cause by exception util stringify exception t response future complete exceptionally new runtime exception err msg return response future private static k n v byte get serialize value final kv state entry k n v entry final byte serialize key and namespace throw exception final internal kv state k n v state entry get state final kv state info k n v info for current thread entry get info for current thread return state get serialize value serialize key and namespace info for current thread get key serializer info for current thread get namespace serializer info for current thread get state value serializer override public completable future void shutdown return completable future complete future null 
netty message channel handler sharable static class netty message encoder extend channel outbound handler adapter override public void write channel handler context ctx object msg channel promise promise throw exception if msg instanceof netty message byte buf serialize null try serialize netty message msg write ctx alloc catch throwable t throw new i o exception error while serialize message msg t finally if serialize null ctx write serialize promise else ctx write msg promise 
abstract rest handler channel handler sharable public abstract class abstract rest handler t extend restful gateway r extend request body p extend response body m extend message parameter extend abstract handler t r m private final message header be p m message header protect abstract rest handler gateway retriever extend t leader retriever time timeout map string string response header message header be p m message header super leader retriever timeout response header message header this message header precondition check not null message header public message header be p m get message header return message header override protect completable future void respond to request channel handler context ctx http request http request handler request r m handler request t gateway completable future p response try response handle request handler request gateway catch rest handler exception e response future util complete exceptionally e return response then accept resp handler util send response ctx http request resp message header get response status code response header this method be call for every incoming request and return a link completable future contain a the response p implementation may decide whether to throw link rest handler exception s or fail the return link completable future with a link rest handler exception p fail the future with another exception type or throw unchecked exception be regard as a implementation error as it do not allow we to provide a meaningful http status code in this case a link http response status internal server error will be return param request request that should be handle param gateway leader gateway return future contain a handler response throw rest handler exception if the handling fail protect abstract completable future p handle request nonnull handler request r m request nonnull t gateway throw rest handler exception 
leader retrieval handler channel handler sharable public abstract class leader retrieval handler t extend restful gateway extend simple channel inbound handler route request protect final logger logger logger factory get logger get class protect final gateway retriever extend t leader retriever protect final time timeout protect final map string string response header protect leader retrieval handler nonnull gateway retriever extend t leader retriever nonnull time timeout nonnull map string string response header this leader retriever precondition check not null leader retriever this timeout precondition check not null timeout this response header precondition check not null response header override protect void channel read0 channel handler context channel handler context route request route request http request request route request get request optional consumer extend t opt leader consumer optional consumer of leader retriever get now opt leader consumer if present gateway try respond as leader channel handler context route request gateway catch exception e logger error error while respond to the http request e handler util send error response channel handler context request new error response body error while respond to the http request http response status internal server error response header if not present handler util send error response channel handler context request new error response body service temporarily unavailable due to a ongoing leader election please refresh http response status service unavailable response header protect abstract void respond as leader channel handler context channel handler context route request request t gateway throw exception 
static file server handler channel handler sharable public class static file server handler t extend restful gateway extend leader retrieval handler t timezone in which this server answer its if modify request private static final time zone gmt timezone time zone get time zone gmt date format for http public static final string http date format eee dd mmm yyyy hh mm ss zzz be default we allow file to be cache for minute private static final int http cache seconds the path in which the static document be private final file root path public static file server handler gateway retriever extend t retriever time timeout file root path throw i o exception super retriever timeout collection empty map this root path check not null root path get canonical file response to request override protect void respond as leader channel handler context channel handler context route request route request t gateway throw exception final http request request route request get request final string request path make sure we request the index html in case there be a directory request if route request get path end with request path route request get path index html else request path route request get path try respond to request channel handler context request request path catch rest handler exception rhe handler util send error response channel handler context route request get request new error response body rhe get message rhe get http response status response header response when run with lead job manager private void respond to request channel handler context ctx http request request string request path throw i o exception parse exception u be i syntax exception rest handler exception convert to absolute path final file file new file root path request path if file exist file do not exist try to load it with the classloader class loader cl static file server handler class get class loader try input stream resource stream cl get resource as stream web request path boolean success false try if resource stream null url root cl get resource web url request cl get resource web request path if root null request null uri root u be i new uri root get path normalize uri request u be i new uri request get path normalize check that we don t load anything from outside of the expect scope if root u r i relativize request u be i equal request u be i logger debug loading miss file from classloader request path ensure that directory to file exist file get parent file mkdir file copy resource stream file to path success true catch throwable t logger error error while respond t finally if success logger debug unable to load request file from classloader request path throw new not find exception string format unable to load request file s request path check file validity file root path logger cache validation final string if modify since request header get if modify since if if modify since null if modify since be empty simple date format date formatter new simple date format http date format locale we date if modify since date date formatter parse if modify since only compare up to the second because the datetime format we send to the client do not have millisecond long if modify since date seconds if modify since date get time long file last modify seconds file last modify if if modify since date seconds file last modify seconds if logger be debug enable logger debug respond not modify for file file get absolute path send not modify ctx return if logger be debug enable logger debug respond with file file get absolute path don t need to close this manually netty s default file region will take care of it final random access file raf try raf new random access file file r catch file not find exception e if logger be debug enable logger debug could not find file file get absolute path throw new not find exception file not find try long file length raf length http response response new default http response http ok set content type header response file set date and cache header response file if http header be keep alive request response header set connection http header value keep alive http header set content length response file length write the initial line and the header ctx write response write the content channel future last content future if ctx pipeline get ssl handler class null ctx write new default file region raf get channel file length ctx new progressive promise last content future ctx write and flush last http content empty last content else last content future ctx write and flush new http chunk input new chunk file raf file length ctx new progressive promise http chunk input will write the end marker last http content for we close the connection if no keep alive be need if http header be keep alive request last content future add listener channel future listener close catch exception e raf close logger error fail to serve file e throw new rest handler exception internal server error internal server error override public void exception catch channel handler context ctx throwable cause if ctx channel be active logger error catch exception cause handler util send error response ctx false new error response body internal server error internal server error collection empty map utility to encode header and response send the not modify response this response can be use when the file timestamp be the same as what the browser be send up param ctx the channel context to write the response to public static void send not modify channel handler context ctx full http response response new default full http response http not modify set date header response close the connection as soon as the error message be send ctx write and flush response add listener channel future listener close set the date header for the http response param response http response public static void set date header full http response response simple date format date formatter new simple date format http date format locale we date formatter set time zone gmt timezone calendar time new gregorian calendar response header set date date formatter format time get time set the date and cache header for the http response param response the http response object param file to cache file to extract the modification timestamp from public static void set date and cache header http response response file file to cache simple date format date formatter new simple date format http date format locale we date formatter set time zone gmt timezone date header calendar time new gregorian calendar response header set date date formatter format time get time cache header time add calendar second http cache seconds response header set expire date formatter format time get time response header set cache control private max age http cache seconds response header set last modify date formatter format new date file to cache last modify set the content type header for the http response param response http response param file file to extract content type public static void set content type header http response response file file string mime type mime type get mime type for file name file get name string mime final mime type null mime type mime type get default mime type response header set content type mime final check various condition for file access if all check pass this method return and processing of the request may continue if any check fail this method throw a link rest handler exception and further processing of the request must be limit to send a error response public static void check file validity file file file root path logger logger throw i o exception rest handler exception this check must be do first to prevent probe for arbitrary file if file get canonical file to path start with root path to path if logger be debug enable logger debug request path point outside the root directory file get absolute path throw new rest handler exception forbid forbid if file exist file be hide if logger be debug enable logger debug request path can not be find file get absolute path throw new rest handler exception file not find not find if file be directory file be file if logger be debug enable logger debug request path do not point to a file file get absolute path throw new rest handler exception file not find method not allow 
pipeline error handler channel handler sharable public class pipeline error handler extend simple channel inbound handler http request the logger to which the handler write the log statement private final logger logger private final map string string response header public pipeline error handler logger logger final map string string response header this logger require non null logger this response header require non null response header override protect void channel read0 channel handler context ctx http request message we can t deal with this message no one in the pipeline handle it log it logger warn unknown message receive message handler util send error response ctx message new error response body bad request receive http response status bad request collection empty map override public void exception catch channel handler context ctx throwable cause logger warn unhandled exception cause handler util send error response ctx false new error response body internal server error cause get message http response status internal server error response header 
history server static file server handler channel handler sharable public class history server static file server handler extend simple channel inbound handler route request default logger if none be specify private static final logger log logger factory get logger history server static file server handler class the path in which the static document be private final file root path public history server static file server handler file root path throw i o exception this root path check not null root path get canonical file response to request override public void channel read0 channel handler context ctx route request route request throw exception string request path route request get path try respond with file ctx route request get request request path catch rest handler exception rhe handler util send error response ctx route request get request new error response body rhe get message rhe get http response status collection empty map response when run with lead job manager private void respond with file channel handler context ctx http request request string request path throw i o exception parse exception rest handler exception make sure we request the index html in case there be a directory request if request path end with request path request path index html if request path contain we assume that the path end in either html or j request path request path json convert to absolute path final file file new file root path request path if file exist file do not exist try to load it with the classloader class loader cl history server static file server handler class get class loader try input stream resource stream cl get resource as stream web request path boolean success false try if resource stream null url root cl get resource web url request cl get resource web request path if root null request null uri root u be i new uri root get path normalize uri request u be i new uri request get path normalize check that we don t load anything from outside of the expect scope if root u r i relativize request u be i equal request u be i log debug loading miss file from classloader request path ensure that directory to file exist file get parent file mkdir file copy resource stream file to path success true catch throwable t log error error while respond t finally if success log debug unable to load request file from classloader request path throw new not find exception file not find static file server handler check file validity file root path log cache validation final string if modify since request header get if modify since if if modify since null if modify since be empty simple date format date formatter new simple date format static file server handler http date format locale we date if modify since date date formatter parse if modify since only compare up to the second because the datetime format we send to the client do not have millisecond long if modify since date seconds if modify since date get time long file last modify seconds file last modify if if modify since date seconds file last modify seconds if log be debug enable log debug respond not modify for file file get absolute path static file server handler send not modify ctx return if log be debug enable log debug respond with file file get absolute path don t need to close this manually netty s default file region will take care of it final random access file raf try raf new random access file file r catch file not find exception e if log be debug enable log debug could not find file file get absolute path handler util send error response ctx request new error response body file not find not find collection empty map return try long file length raf length http response response new default http response http ok static file server handler set content type header response file the job overview should be update as soon as possible if request path equal joboverview json static file server handler set date and cache header response file if http header be keep alive request response header set connection http header value keep alive http header set content length response file length write the initial line and the header ctx write response write the content channel future last content future if ctx pipeline get ssl handler class null ctx write new default file region raf get channel file length ctx new progressive promise last content future ctx write and flush last http content empty last content else last content future ctx write and flush new http chunk input new chunk file raf file length ctx new progressive promise http chunk input will write the end marker last http content for we close the connection if no keep alive be need if http header be keep alive request last content future add listener channel future listener close catch exception e raf close log error fail to serve file e throw new rest handler exception internal server error internal server error override public void exception catch channel handler context ctx throwable cause if ctx channel be active log error catch exception cause handler util send error response ctx false new error response body internal server error internal server error collection empty map 
http request handler channel handler sharable public class http request handler extend simple channel inbound handler http object private static final logger log logger factory get logger http request handler class private static final charset encode config constant default charset a decoder factory that always store post chunk on disk private static final http datum factory datum factory new default http datum factory true private final file tmp dir private http request current request private http post request decoder current decoder private string current request path public http request handler file tmp dir this tmp dir tmp dir override public void channel unregistered channel handler context ctx throw exception if current decoder null current decoder clean file override public void channel read0 channel handler context ctx http object msg try if msg instanceof http request current request http request msg current request path null if current decoder null current decoder destroy current decoder null if current request get method http method get current request get method http method delete directly delegate to the router ctx fire channel read current request else if current request get method http method post post come in multiple object first the request then the contents keep the request and path for the remain object of the post request current request path new query string decoder current request get uri encode path current decoder new http post request decoder datum factory current request encode else throw new i o exception unsupported http method current request get method name else if current decoder null msg instanceof http content receive new chunk give it to the current decoder http content chunk http content msg current decoder offer chunk try while current decoder have next interface http datum datum current decoder next if something ever need post parameter this will be the place to handle it all field value will be pass with type attribute if datum get http datum type http datum type file upload tmp dir null disk file upload file disk file upload datum if file be complete string name file get filename file target new file tmp dir uuid random u u i d name if tmp dir exist log external upload dir deletion tmp dir check and create upload dir tmp dir file rename to target query string encoder encoder new query string encoder current request path encoder add param filepath target get absolute path encoder add param filename name current request set uri encoder to string catch end of datum decoder exception ignore if chunk instanceof last http content http request request current request current request null current request path null current decoder destroy current decoder null fire next channel handler ctx fire channel read request catch throwable t current request null current request path null if current decoder null current decoder destroy current decoder null if ctx channel be active byte byte exception util stringify exception t get byte encode default full http response response new default full http response http version http http response status internal server error unpool wrap buffer byte response header set http header name content type text plain response header set http header name content length response content readable byte ctx write and flush response public static void log external upload dir deletion file upload dir log warn jar storage directory have be delete externally previously upload jar be no longer available upload dir get absolute path check whether the give directory exist and be writable if it doesn t exist this method will attempt to create it param upload dir directory to check throw i o exception if the directory do not exist and can not be create or if the directory isn t writable public static synchronize void check and create upload dir file upload dir throw i o exception if upload dir exist upload dir can write log info use directory for web frontend jar file upload upload dir else if upload dir mkdir upload dir can write log info create directory for web frontend jar file upload upload dir else log warn jar upload directory can not be create or be not writable upload dir get absolute path throw new i o exception string format jar upload directory s can not be create or be not writable upload dir get absolute path 
pipeline error handler channel handler sharable public class pipeline error handler extend simple channel inbound handler object the logger to which the handler write the log statement private final logger logger public pipeline error handler logger logger this logger logger override protect void channel read0 channel handler context ctx object message we can t deal with this message no one in the pipeline handle it log it logger debug unknown message receive message send error ctx unknown message receive override public void exception catch channel handler context ctx throwable cause logger debug unhandle exception cause send error ctx exception util stringify exception cause private void send error channel handler context ctx string error if ctx channel be active default full http response response new default full http response http version http http response status internal server error unpool wrap buffer error get byte config constant default charset response header set http header name content type text plain response header set http header name content length response content readable byte ctx write and flush response 
http test client channel handler sharable private static class client handler extend simple channel inbound handler http object private final blocking queue simple http response response private http response status current status private string current type private string current location private string current content public client handler block queue simple http response response this response response override protect void channel read0 channel handler context ctx http object msg throw exception log debug receive msg if msg instanceof http response http response response http response msg current status response get status current type response header get http header name content type current location response header get http header name location if http header be transfer encode chunk response log debug content be chunk if msg instanceof http content http content content http content msg add the content current content content content to string charset util utf finish with this if content instanceof last http content response add new simple http response current status current type current content current location current status null current type null current location null current content ctx close 
