composite type access expression i t case run with suite class suite suite class composite type access expression i t case field access from table class composite type access expression i t case field access after call class public class composite type access expression i t case regular test see also link field access after call for test that access a nest field of a expression or for link build in function definition flatten which produce multiple column from a single one public static class field access from table extend build in function test base parameterized parameter name index public static list test spec test datum return array as list actually in case of sql it do not use the get method but a custom logic for access nest field of a table test spec for function build in function definition get on field with datum null row of and datum type row field nest bigint not null nullable row field nest bigint not null not null test result f0 get nest f0 nest null bigint nullable test result f1 get nest f1 nest 1 l bigint not null in calcite it map to flink sql operator table item test spec for function build in function definition at on field with datum null new int null singleton map nest null row of and datum type array bigint not null nullable array bigint not null not null map string bigint not null nullable map string bigint not null not null row field nest bigint not null nullable row field nest bigint not null not null access element of map or array be a runtime operation we do not know about the size or contents during the inference therefore the result be always nullable test sql result f0 null bigint nullable test sql result f1 1 l bigint nullable test sql result f2 nest null bigint nullable test sql result f3 nest 1 l bigint nullable we know all the field of a type up front therefore we can derive more accurate type during the inference test sql result f4 nest null bigint nullable test sql result f5 nest 1 l bigint not null a class for customize test public static class field access after call rule public expect exception throw expect exception none test public void test sql access nullable row final table environment env table environment create environment setting new instance build env create temporary system function custom scalar function custom scalar function class throw expect validation exception class throw expect message invalid function call n custom scalar function int not null int env execute sql select custom scalar function custom scalar function nest test public void test sql access not null row throw exception final table environment env table environment create environment setting new instance build env create temporary system function custom scalar function custom scalar function class table result result env execute sql select custom scalar function custom scalar function nest try closeable iterator row it result collect assert that it next equal to row of 2 l assert false it have next test public void test sql access nullable row with alias throw exception final table environment env table environment create environment setting new instance build env create temporary system function row table function row table function class table result result env execute sql select t b t a from select from value lateral table row table function as t a b assert that result get table schema equal to table schema builder field b datum type array datum type string not null field a data type string build try closeable iterator row it result collect assert that it next equal to row of new string a b a assert false it have next test public void test table api access nullable row final table environment env table environment create environment setting new instance build throw expect validation exception class throw expect message invalid function call n custom scalar function int not null int env from value select call custom scalar function class call custom scalar function class get nest execute test public void test table api access not null row throw exception final table environment env table environment create environment setting new instance build table result result env from value select call custom scalar function class call custom scalar function class get nest execute try closeable iterator row it result collect assert that it next equal to row of 2 l assert false it have next test public void test table api flatten composite type throw exception final table environment env table environment create environment setting new instance build table result result env from value row field f0 row field nested0 bigint not null field nested1 string nullable not null row of row of abc select f0 flatten execute assert that result get table schema equal to table schema builder field f0 nested0 bigint nullable field f0 nested1 string nullable build try closeable iterator row it result collect assert that it next equal to row of 1 l abc assert false it have next a helper function for testing access nest field of a link logical type root row type p it have three different method that ul li create a nullable row with not null nest field li li create a not null row with not null nest field li li expect not null argument li ul public static class custom scalar function extend scalar function public long eval int i long l return i l public datum type hint row nest int not null row eval return null public datum type hint row nest int not null not null row eval int nest return row of nest table function that return a nullable row function hint output datum type hint row s string sa array string not null public static class row table function extend table function row public void eval collect null collect row of a new string a b 
