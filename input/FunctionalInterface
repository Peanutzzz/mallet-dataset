retry runner functional interface public interface retry runner task that require retry void run 
dubbo fallback functional interface public interface dubbo fallback handle the block exception and provide fallback result param invoker dubbo invoker param invocation dubbo invocation param ex block exception return fallback result result handle invoker invoker invocation invocation block exception ex 
block request handler functional interface public interface block request handler handle the block request param exchange server exchange object param t block exception return server response to return mono server response handle request server web exchange exchange throwable t 
block request handler functional interface public interface block request handler handle the block request param exchange server exchange object param t block exception return server response to return mono server response handle request server web exchange exchange throwable t 
cli frontend functional interface private interface cluster action cluster i d run the cluster action with the give link cluster client param cluster client to run the cluster action against throw flink exception if something go wrong void run action cluster client cluster i d cluster client throw flink exception 
wait strategy functional interface public interface wait strategy return the time to wait until the next attempt attempt start at code param attempt the number of the last attempt return wait time in ms long sleep time long attempt 
rest cluster client test functional interface private interface fail http request predicate boolean test message header message header message parameter message parameter request body request body static fail http request predicate never return message header message parameter request body false 
source sink datum test kit functional interface private interface x content builder provider extend serializable x content builder get builder throw i o exception 
elasticsearch6 dynamic sink functional interface interface elastic search builder provider elasticsearch sink builder row datum create builder list http host http host row elasticsearch sink function upsert sink function 
elasticsearch7 dynamic sink functional interface interface elastic search builder provider elasticsearch sink builder row datum create builder list http host http host row elasticsearch sink function upsert sink function 
h base serde functional interface private interface field encoder extend serializable byte encode row datum row int po 
h base serde functional interface private interface field decoder extend serializable nullable object decode byte value 
hive object conversion functional interface internal public interface hive object conversion extend serializable nullable object to hive object nullable object o 
abstract jdbc row converter functional interface interface jdbc deserialization converter extend serializable convert a jdbc field object of link result set to the internal datum structure object param jdbc field object deserialize object jdbc field throw s q l exception 
abstract jdbc row converter functional interface interface jdbc serialization converter extend serializable void serialize row datum row datum int index prepare statement statement throw s q l exception 
serializable timestamp assigner public evolve functional interface public interface serializable timestamp assigner t extend timestamp assigner t serializable 
timestamp assigner public functional interface public interface timestamp assigner t the value that be pass to link extract timestamp when there be no previous timestamp attach to the record long no timestamp long min value assign a timestamp to a element in millisecond since the epoch this be independent of any particular time zone or calendar p the method be pass the previously assign timestamp of the element that previous timestamp may have be assign from a previous assigner if the element do not carry a timestamp before this value be link no timestamp code long min value value long min value param element the element that the timestamp will be assign to param record timestamp the current internal timestamp of the element or a negative value if no timestamp have be assign yet return the new timestamp long extract timestamp t element long record timestamp 
timestamp assigner supplier public evolve functional interface public interface timestamp assigner supplier t extend serializable instantiate a link timestamp assigner timestamp assigner t create timestamp assigner context context static t timestamp assigner supplier t of serializable timestamp assigner t assigner return new supplier from serializable timestamp assigner assigner additional information available to link create timestamp assigner context this can be access to link org apache flink metric metric group metric group for example interface context return the metric group for the context in which the create link timestamp assigner be use p instance of this class can be use to register new metric with flink and to create a nest hierarchy base on the group name see link metric group for more information for the metric system see metric group metric group get metric group we need a actual class implement this as a lambda in link of serializable timestamp assigner would not allow the link closure cleaner to reach into the link serializable timestamp assigner class supplier from serializable timestamp assigner t implement timestamp assigner supplier t private static final long serial version u i d 1 l private final serializable timestamp assigner t assigner public supplier from serializable timestamp assigner serializable timestamp assigner t assigner this assigner assigner override public timestamp assigner t create timestamp assigner context context return assigner 
watermark generator supplier public evolve functional interface public interface watermark generator supplier t extend serializable instantiate a link watermark generator watermark generator t create watermark generator context context additional information available to link create watermark generator context this can be access to link org apache flink metric metric group metric group for example interface context return the metric group for the context in which the create link watermark generator be use p instance of this class can be use to register new metric with flink and to create a nest hierarchy base on the group name see link metric group for more information for the metric system see metric group metric group get metric group 
broadcast variable initializer public functional interface public interface broadcast variable initializer t o the method that read the datum element from the broadcast variable and create the transform datum structure p the iterable with the datum element can be traverse only once i e only the first call to code iterator will succeed param datum the sequence of element in the broadcast variable return the transform broadcast variable o initialize broadcast variable iterable t datum 
co group function public functional interface public interface co group function i n1 i n2 o extend function serializable this method must be implement to provide a user implementation of a co group it be call for each pair of element group where the element share the same key param first the record from the first input param second the record from the second param out a collector to return element throw exception the function may throw exception which will cause the program to cancel and may trigger the recovery logic void co group iterable i n1 first iterable i n2 second collector o out throw exception 
combine function public functional interface public interface combine function in out extend function serializable the combine method call potentially multiple time with subgroup of element param value the element to be combine return the single result value throw exception the function may throw exception which will cause the program to cancel and may trigger the recovery logic out combine iterable in value throw exception 
cross function public functional interface public interface cross function i n1 i n2 out extend function serializable cross udf method call once per pair of element in the cartesian product of the input param val1 element from first input param val2 element from the second input return the result element throw exception the function may throw exception which will cause the program to cancel and may trigger the recovery logic out cross i n1 val1 i n2 val2 throw exception 
filter function public functional interface public interface filter function t extend function serializable the filter function that evaluate the predicate p strong important strong the system assume that the function do not modify the element on which the predicate be apply violate this assumption can lead to incorrect result param value the value to be filter return true for value that should be retain false for value to be filter out throw exception this method may throw exception throw a exception will cause the operation to fail and may trigger recovery boolean filter t value throw exception 
flat join function public functional interface public interface flat join function i n1 i n2 out extend function serializable the join method call once per join pair of element param first the element from first input param second the element from second input param out the collector use to return zero one or more element throw exception this method may throw exception throw a exception will cause the operation to fail and may trigger recovery void join i n1 first i n2 second collector out out throw exception 
flat map function public functional interface public interface flat map function t o extend function serializable the core method of the flat map function take a element from the input datum set and transform it into zero one or more element param value the input value param out the collector for return result value throw exception this method may throw exception throw a exception will cause the operation to fail and may trigger recovery void flat map t value collector o out throw exception 
fold function public deprecate functional interface public interface fold function o t extend function serializable the core method of fold function combine two value into one value of the same type the fold function be consecutively apply to all value of a group until only a single value remain param accumulator the initial value and accumulator param value the value from the group to fold into the accumulator return the accumulator that be at the end of the folding the group throw exception this method may throw exception throw a exception will cause the operation to fail and may trigger recovery t fold t accumulator o value throw exception 
group combine function public functional interface public interface group combine function in out extend function serializable the combine method call potentially multiple time with subgroup of element param value the element to be combine param out the collector to use to return value from the function throw exception the function may throw exception which will cause the program to cancel and may trigger the recovery logic void combine iterable in value collector out out throw exception 
group reduce function public functional interface public interface group reduce function t o extend function serializable the reduce method the function receive one call per group of element param value all record that belong to the give input key param out the collector to hand result to throw exception this method may throw exception throw a exception will cause the operation to fail and may trigger recovery void reduce iterable t value collector o out throw exception 
join function public functional interface public interface join function i n1 i n2 out extend function serializable the join method call once per join pair of element param first the element from first input param second the element from second input return the result element throw exception this method may throw exception throw a exception will cause the operation to fail and may trigger recovery out join i n1 first i n2 second throw exception 
map function public functional interface public interface map function t o extend function serializable the mapping method take a element from the input datum set and transform it into exactly one element param value the input value return the transform value throw exception this method may throw exception throw a exception will cause the operation to fail and may trigger recovery o map t value throw exception 
map partition function public functional interface public interface map partition function t o extend function serializable a user implement function that modify or transform a incoming object param value all record for the mapper param out the collector to hand result to throw exception this method may throw exception throw a exception will cause the operation to fail and may trigger recovery void map partition iterable t value collector o out throw exception 
partitioner public functional interface public interface partitioner k extend java io serializable function compute the partition for the give key param key the key param num partition the number of partition to partition into return the partition index int partition k key int num partition 
reduce function public functional interface public interface reduce function t extend function serializable the core method of reduce function combine two value into one value of the same type the reduce function be consecutively apply to all value of a group until only a single value remain param value1 the first value to combine param value2 the second value to combine return the combine value of both input value throw exception this method may throw exception throw a exception will cause the operation to fail and may trigger recovery t reduce t value1 t value2 throw exception 
bulk writer functional interface interface factory t extend serializable create a writer that write to the give stream param out the output stream to write the encode datum to throw i o exception throw if the writer can not be open or if the output stream throw a exception bulk writer t create f s datum output stream out throw i o exception 
key selector public functional interface public interface key selector in key extend function serializable user define function that deterministically extract the key from a object p for example for a class pre public class word string word int count pre the key extractor could return the word as a key to group all word object by the string they contain p the code would look like this pre public string get key word w return w word pre param value the object to get the key from return the extract key throw exception throw a exception will cause the execution of the respective task to fail and trigger recovery or cancellation of the program key get key in value throw exception 
bi consumer with exception functional interface public interface bi consumer with exception t u e extend throwable perform this operation on the give argument param t the first input argument param u the second input argument throw e in case of a error void accept t t u u throw e convert a link bi consumer with exception into a link bi consumer param bi consumer with exception bi consumer with exception to convert into a link bi consumer param a first input type param b second input type return link bi consumer which rethrow all check exception as unchecked static a b bi consumer a b unchecked bi consumer with exception a b bi consumer with exception return a a b b try bi consumer with exception accept a b catch throwable t exception util rethrow t 
bi function with exception functional interface public interface bi function with exception t u r e extend throwable apply the give value t and u to obtain the result value the operation can throw a exception param t first parameter param u second parameter return result value throw e if the operation fail r apply t t u u throw e convert at link bi function with exception into a link bi function param bi function with exception function with exception to convert into a function param a input type param b output type return link bi function which throw all check exception as a unchecked exception static a b c bi function a b c unchecked bi function with exception a b c bi function with exception return a a b b try return bi function with exception apply a b catch throwable t exception util rethrow t we need this to appease the compiler return null 
check supplier functional interface public interface check supplier r extend supplier with exception r exception static r supplier r unchecked check supplier r check supplier return try return check supplier get catch exception e throw new runtime exception e static r check supplier r check supplier r supplier return try return supplier get catch runtime exception e throw new flink exception e 
function with exception public functional interface public interface function with exception t r e extend throwable call this function param value the argument to the function return the result of thus supplier throw e this function may throw a exception r apply t value throw e 
long function with exception public functional interface public interface long function with exception r e extend throwable apply this function to the give argument param value the function argument return the function result r apply long value throw e 
quad consumer public evolve functional interface public interface quad consumer s t u v perform this operation on the give argument param s first argument param t second argument param u third argument param v fourth argument void accept s s t t u u v v 
quad function public evolve functional interface public interface quad function s t u v r apply this function to the give argument param s the first function argument param t the second function argument param u the third function argument oaram v the fourth function argument return the function result r apply s s t t u u v v 
runnable with exception public functional interface public interface runnable with exception extend throw runnable exception the work method throw exception exception may be throw override void run throw exception 
supplier with exception public functional interface public interface supplier with exception r e extend throwable get the result of this supplier return the result of thus supplier throw e this function may throw a exception r get throw e 
throw consumer public functional interface public interface throw consumer t e extend throwable perform this operation on the give argument param t the input argument throw e on error during consumption void accept t t throw e 
throw runnable public evolve functional interface public interface throw runnable e extend throwable the work method throw e exception may be throw void run throw e convert a link throw runnable into a link runnable which throw all check exception as unchecked param throw runnable to convert into a link runnable return link runnable which throw all check exception as unchecked static runnable unchecked throwing runnable throw runnable return try throw runnable run catch throwable t exception util rethrow t 
tri consumer public evolve functional interface public interface tri consumer s t u perform this operation on the give argument param s first argument param t second argument param u third argument void accept s s t t u u 
tri function public evolve functional interface public interface tri function s t u be apply this function to the give argument param s the first function argument param t the second function argument param u the third function argument return the function result r apply s s t t u u 
tri function with exception public evolve functional interface public interface tri function with exception s t u r e extend throwable apply this function to the give argument param s the first function argument param t the second function argument param u the third function argument return the function result throw e if it fail r apply s s t t u u throw e convert at link tri function with exception into a link tri function param tri function with exception function with exception to convert into a function param a first input type param b second input type param c third input type param d output type return link bi function which throw all check exception as a unchecked exception static a b c d tri function a b c d unchecked tri function with exception a b c d tri function with exception return a a b b c c try return tri function with exception apply a b c catch throwable t exception util rethrow t we need this to appease the compiler return null 
link optional map functional interface public interface consumer with exception k v e extend throwable void accept nonnull string key name nullable k key nullable v value throw e 
net util functional interface public interface socket factory server socket create socket int port throw i o exception 
closure cleaner test functional interface interface serializable supplier t extend supplier t serializable 
configuration conversion test functional interface private interface configuration accessor t t access configuration configuration throw exception 
download cache factory functional interface public interface download cache factory return a link download cache instance if the instance could not be instantiate for example because a mandatory parameter be miss then a exception should be throw return download cache instance throw exception if the instance could not be instantiate download cache create throw exception 
flink resource factory functional interface public interface flink resource factory return a link flink resource instance if the instance could not be instantiate for example because a mandatory parameter be miss then a exception should be throw param setup setup instruction for the flink resource return flink resource instance throw exception if the instance could not be instantiate flink resource create flink resource setup setup throw exception 
kafka resource factory functional interface public interface kafka resource factory return a link kafka resource instance if the instance could not be instantiate for example because a mandatory parameter be miss then a empty link optional should be return return kafka resource instance throw exception if the instance could not be instantiate kafka resource create string kafka version throw exception 
h base resource factory functional interface public interface h base resource factory return a link h base resource instance if the instance could not be instantiate for example because a mandatory parameter be miss then a empty link optional should be return return h base resource instance throw exception if the instance could not be instantiate h base resource create throw exception 
avro builder functional interface public interface avro builder t extend serializable create and configure a avro writer to the give output file datum file writer t create writer output stream output stream throw i o exception 
avro row datum deserialization schema functional interface interface deserialization runtime converter extend serializable object convert object object 
csv row datum deserialization schema functional interface interface deserialization runtime converter extend serializable object convert json node json node 
hadoop path base bulk writer functional interface interface factory t extend serializable create a path base writer that write to the tt in progress path tt first and commit to tt target path tt finally param target file path the final path to commit to param in progress file path the intermediate path to write to before commit return the create writer hadoop path base bulk writer t create path target file path path in progress file path throw i o exception 
json row datum deserialization schema functional interface private interface deserialization runtime converter extend serializable object convert json node json node 
json row deserialization schema functional interface private interface deserialization runtime converter extend serializable object convert object mapper mapper json node json node 
json row serialization schema functional interface private interface serialization runtime converter extend serializable json node convert object mapper mapper json node reuse object object 
parquet builder functional interface public interface parquet builder t extend serializable create and configure a parquet writer to the give output file parquet writer t create writer output file out throw i o exception 
savepoint writer operator factory public evolve functional interface public interface savepoint writer operator factory create a link stream operator to be use for generate and snapshott state param savepoint timestamp the timestamp to associate with the generate savepoint param savepoint path the path to write the savepoint to return a stream operator for write the savepoint stream operator tag operator subtask state create operator long savepoint timestamp path savepoint path 
job manager runner factory functional interface public interface job manager runner factory job manager runner create job manager runner job graph job graph configuration configuration rpc service rpc service high availability service high availability service heartbeat service heartbeat service job manager share service job manager service job manager job metric group factory job manager job metric group factory fatal error handler fatal error handler throw exception 
blob library cache manager functional interface public interface class loader factory u r l class loader create class loader url library u r l 
partition tracker factory functional interface public interface partition tracker factory create a new partition tracker param task executor gateway lookup lookup function to access task executor gateway return create partition tracker job master partition tracker create task executor gateway lookup task executor gateway lookup lookup function for link task executor gateway functional interface interface task executor gateway lookup return a link task executor gateway correspond to the give resource i d param task executor id id of the task executor to look up return optional task executor gateway optional task executor gateway lookup resource i d task executor id 
partition tracker factory functional interface interface task executor gateway lookup return a link task executor gateway correspond to the give resource i d param task executor id id of the task executor to look up return optional task executor gateway optional task executor gateway lookup resource i d task executor id 
resource manager partition tracker factory functional interface public interface resource manager partition tracker factory resource manager partition tracker get task executor cluster partition releaser task executor cluster partition releaser 
task executor cluster partition releaser functional interface public interface task executor cluster partition releaser void release cluster partition resource i d task executor id set intermediate datum set i d datum set to release 
prefer location retriever functional interface public interface preferred location retriever return preferred location of a execution vertex param execution vertex id id of the execution vertex param producer to ignore producer vertex to ignore when calculate input location return future of preferred location completable future collection task manager location get prefer location execution vertex i d execution vertex id set execution vertex i d producer to ignore 
state location retriever functional interface public interface state location retriever return state location of a execution vertex param execution vertex id id of the execution vertex return optional that be assign with the vertex s state location if the location exist otherwise empty optional task manager location get state location execution vertex i d execution vertex id 
security context factory functional interface public interface security context factory check if this factory be compatible with the security configuration p specific implementation must override this to provide compatibility check by default it will always return code false param security config security configuration return code true if factory be compatible with the configuration default boolean be compatible with final security configuration security config return false create security context param security config security configuration use to create context return the security context object security context create context security configuration security config throw security context initialize exception 
security module factory functional interface public interface security module factory create and return a link security module this can return code null if the type of link security module that this factory can create do not work in the current environment security module create module security configuration security config 
netty shuffle descriptor functional interface public interface partition connection info extend serializable connection i would get connection id 
key state backend functional interface interface key selection listener k callback when key context be switch void key select k new key 
key state function functional interface public interface key state function k s extend state the actual method to be apply on each of the state param key the key whose state be be process param state the state associate with the aforementioned key void process k key s state throw exception 
key extractor function functional interface public interface key extractor function t key extractor function extend key for keyed object new key extractor function key nonnull override public object extract key from element nonnull keyed element return element get key return the key for the give element by which the key group can be compute nonnull object extract key from element nonnull t element suppress warning unchecked static t extend key key extractor function t for keyed object return key extractor function t for keyed object 
key group partitioner functional interface public interface element writer function t this method define how to write a single element to the output param element the element to be write param dov the output view to write the element throw i o exception on write relate problem void write element nonnull t element nonnull datum output view dov throw i o exception 
key group partitioner functional interface public interface element reader function t nonnull t read element nonnull datum input view div throw i o exception 
key group partitioner functional interface public interface key group element consumer t void consume nonnull t element nonnegative int key group id throw i o exception 
state meta info reader functional interface public interface state meta info reader read a snapshot from the give input view param input view the input to read from param user code class loader user classloader to deserialize the object in the snapshot return the deserialized snapshot throw i o exception on deserialization problem nonnull state meta info snapshot read state meta info snapshot nonnull datum input view input view nonnull class loader user code class loader throw i o exception 
state meta info writer functional interface public interface state meta info writer write the give snapshot to the output view param snapshot the snapshot to write param output view the output to write into throw i o exception on write problem void write state meta info snapshot nonnull state meta info snapshot snapshot nonnull datum output view output view throw i o exception 
priority comparator functional interface public interface priority comparator t priority comparator extend priority comparable object for priority comparable object priority comparable compare priority to compare two object for priority return a negative integer zero or a positive integer as the first argument have lower equal to or higher priority than the second param leave left operand in the comparison by priority param right leave operand in the comparison by priority return a negative integer zero or a positive integer as the first argument have lower equal to or higher priority than the second int compare priority t left t right suppress warning unchecked static t extend priority comparable priority comparator t for priority comparable object return priority comparator t for priority comparable object 
state snapshot transformer functional interface not thread safe public interface state snapshot transformer t transform or filter out state value which be include or skip in the snapshot param value non serialize form of value return value to snapshot or null which mean the entry be not include nullable t filter or transform nullable t value collection state specific transformer which say how to transform entry of the collection interface collection state snapshot transformer t extend state snapshot transformer t enum transform strategy transform all entry transform all skip first null entry p while traverse collection entry as optimisation stop transform if encounter first non null include entry and return it plus the rest untouched stop on first include default transform strategy get filter strategy return transform strategy transform all this factory create state transformer depend on the form of value to transform p if there be no transform need the factory method return code optional empty interface state snapshot transform factory t state snapshot transform factory no transform create no transform suppress warning unchecked static t state snapshot transform factory t no transform return state snapshot transform factory t no transform static t state snapshot transform factory t create no transform return new state snapshot transform factory t override public optional state snapshot transformer t create for deserialize state return optional empty override public optional state snapshot transformer byte create for serialize state return optional empty optional state snapshot transformer t create for deserialize state optional state snapshot transformer byte create for serialize state 
resource manager partition lifecycle test functional interface private interface task executor setup void accept testing task executor gateway builder task executor gateway builder throw exception 
resource manager partition lifecycle test functional interface private interface test action void accept resource manager gateway resource manager gateway resource i d task executor id1 resource i d task executor id2 throw exception 
async call test functional interface private interface rpc endpoint factory rpc endpoint create rpc service rpc service reentrant lock lock atomic boolean concurrent access 
duplicate checkpoint output stream test functional interface private interface stream test method void call throw i o exception 
task executor partition lifecycle test functional interface private interface partition tracker setup void accept testing task executor partition tracker partition tracker throw exception 
task executor partition lifecycle test functional interface private interface test action void accept job i d job id result partition deployment descriptor result partition deployment descriptor task executor task executor task executor gateway task executor gateway throw exception 
serializable function public functional interface public interface serializable function t r extend function t r serializable 
mailbox executor factory functional interface internal public interface mailbox executor factory create a new executor for the give priority the priority be use when enqueue new mail as well as yield param priority the priority of the mailbox executor return a mailbox executor with the bound priority mailbox executor create executor int priority 
processing time callback internal functional interface public interface processing time callback this method be invoke with the timestamp for which the trigger be schedule p if the triggering be delay for whatever reason trigger timer be block jvm stall due to a garbage collection the timestamp supply to this function will still be the original timestamp for which the trigger be schedule param timestamp the timestamp for which the trigger event be schedule void on processing time long timestamp throw exception 
processing time service factory functional interface internal public interface processing time service factory create a new processing time service with the mailbox executor the mailbox executor be use to defer the link processing time callback of the timer register with the link processing time service to mailbox for execution processing time service create processing time service mailbox executor mailbox executor 
fail source functional interface public interface event emit generator extend serializable void emit event source context tuple2 long int type ctx int event sequence no 
validate sink functional interface public interface result checker extend serializable boolean check result map long integer window count 
batch fine grained recovery i t case functional interface private interface failure strategy extend serializable decide whether to fail and fail the task implicitly or by throw a exception param track index index of the mapper task in the sequence return code true if task be fail implicitly or code false if task be not fail throw exception to fail the task explicitly boolean fail or not int tracking index throw exception 
