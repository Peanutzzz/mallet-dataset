gateway flow slot spi order public class gateway flow slot extend abstract link processor slot default node override public void entry context context resource wrapper resource default node node int count boolean prioritize object arg throw throwable check gateway param flow resource count arg fire entry context resource node count prioritize args private void check gateway param flow resource wrapper resource wrapper int count object arg throw block exception if arg null return list param flow rule rule gateway rule manager get convert param rule resource wrapper get name if rule null rule be empty return for param flow rule rule rule initialize the parameter metric parameter metric storage init param metric for resource wrapper rule if param flow checker pass check resource wrapper rule count arg string trigger param if arg length rule get param idx object value arg rule get param idx trigger param string value of value throw new param flow exception resource wrapper get name trigger param rule override public void exit context context resource wrapper resource wrapper int count object arg fire exit context resource wrapper count arg 
authority slot spi order public class authority slot extend abstract link processor slot default node override public void entry context context resource wrapper resource wrapper default node node int count boolean prioritize object arg throw throwable check black white authority resource wrapper context fire entry context resource wrapper node count prioritize arg override public void exit context context resource wrapper resource wrapper int count object arg fire exit context resource wrapper count arg void check black white authority resource wrapper resource context context throw authority exception map string set authority rule authority rule authority rule manager get authority rule if authority rule null return set authority rule rule authority rule get resource get name if rule null return for authority rule rule rule if authority rule checker pass check rule context throw new authority exception context get origin rule 
degrade slot spi order public class degrade slot extend abstract link processor slot default node override public void entry context context resource wrapper resource wrapper default node node int count boolean prioritize object arg throw throwable degrade rule manager check degrade resource wrapper context node count fire entry context resource wrapper node count prioritize arg override public void exit context context resource wrapper resource wrapper int count object arg fire exit context resource wrapper count arg 
flow slot spi order public class flow slot extend abstract link processor slot default node private final flow rule checker checker public flow slot this new flow rule checker package private for test param checker flow rule checker since 1.6 flow slot flow rule checker checker assert util not null checker flow checker should not be null this checker checker override public void entry context context resource wrapper resource wrapper default node node int count boolean prioritize object arg throw throwable check flow resource wrapper context node count prioritize fire entry context resource wrapper node count prioritize arg void check flow resource wrapper resource context context default node node int count boolean prioritize throw block exception checker check flow rule provider resource context node count prioritize override public void exit context context resource wrapper resource wrapper int count object arg fire exit context resource wrapper count arg private final function string collection flow rule rule provider new function string collection flow rule override public collection flow rule apply string resource flow rule map should not be null map string list flow rule flow rule flow rule manager get flow rule map return flow rule get resource 
cluster builder slot spi order public class cluster builder slot extend abstract link processor slot default node p remember that same resource link resource wrapper equal object will share the same link processor slot chain globally no matter in witch context so if code go into link entry context resource wrapper default node int boolean object the resource name must be same but context name may not p p to get total statistics of the same resource in different context same resource share the same link cluster node globally all link cluster node s be cache in this map p p the longer the application run the more stable this mapping will become so we don t concurrent map but a lock as this lock only happen at the very beginning while concurrent map will hold the lock all the time p private static volatile map resource wrapper cluster node cluster node map new hash map private static final object lock new object private volatile cluster node cluster node null override public void entry context context resource wrapper resource wrapper default node node int count boolean prioritize object arg throw throwable if cluster node null synchronize lock if cluster node null create the cluster node cluster node new cluster node resource wrapper get name resource wrapper get resource type hash map resource wrapper cluster node new map new hash map math max cluster node map size new map put all cluster node map new map put node get id cluster node cluster node map new map node set cluster node cluster node if context origin be set we should get or create a new link node of the specific origin if equal context get origin node origin node node get cluster node get or create origin node context get origin context get cur entry set origin node origin node fire entry context resource wrapper node count prioritize arg override public void exit context context resource wrapper resource wrapper int count object arg fire exit context resource wrapper count arg get link cluster node of the resource of the specific type param id resource name param type invoke type return the link cluster node public static cluster node get cluster node string id entry type type return cluster node map get new string resource wrapper id type get link cluster node of the resource name param id resource name return the link cluster node public static cluster node get cluster node string id if id null return null cluster node cluster node null for entry type node type entry type value cluster node cluster node map get new string resource wrapper id node type if cluster node null break return cluster node get link cluster node s map this map hold all link cluster node s it be key be resource name value be the related link cluster node br do not modify the map return return all link cluster node s public static map resource wrapper cluster node get cluster node map return cluster node map reset all link cluster node s reset be need when link interval property interval or link sample count property sample count be change public static void reset cluster node for cluster node node cluster node map value node reset 
log slot spi order public class log slot extend abstract link processor slot default node override public void entry context context resource wrapper resource wrapper default node obj int count boolean prioritize object arg throw throwable try fire entry context resource wrapper obj count prioritize arg catch block exception e eagle eye log util log resource wrapper get name e get class get simple name e get rule limit app context get origin count throw e catch throwable e record log warn unexpected entry exception e override public void exit context context resource wrapper resource wrapper int count object arg try fire exit context resource wrapper count arg catch throwable e record log warn unexpected entry exit exception e 
node selector slot spi order public class node selector slot extend abstract link processor slot object link default node s of the same resource in different context private volatile map string default node map new hash map string default node override public void entry context context resource wrapper resource wrapper object obj int count boolean prioritize object arg throw throwable it be interesting that we use context name rather resource name as the map key remember that same resource link resource wrapper equal object will share the same link processor slot chain globally no matter in which context so if code go into link entry context resource wrapper default node int object the resource name must be same but context name may not if we use link com alibaba csp sentinel sph u entry string resource to enter same resource in different context use context name as map key can distinguish the same resource in this case multiple link default node s will be create of the same resource name for every distinct context different context name each consider another question one resource may have multiple link default node so what be the fastest way to get total statistics of the same resource the answer be all link default node s with same resource name share one link cluster node see link cluster builder slot for detail default node node map get context get name if node null synchronize this node map get context get name if node null node new default node resource wrapper null hash map string default node cache map new hash map string default node map size cache map put all map cache map put context get name node map cache map build invocation tree default node context get last node add child node context set cur node node fire entry context resource wrapper node count prioritize arg override public void exit context context resource wrapper resource wrapper int count object arg fire exit context resource wrapper count arg 
statistic slot spi order public class statistic slot extend abstract link processor slot default node override public void entry context context resource wrapper resource wrapper default node node int count boolean prioritize object arg throw throwable try do some check fire entry context resource wrapper node count prioritize args request pass add thread count and pass count node increase thread num node add pass request count if context get cur entry get origin node null add count for origin node context get cur entry get origin node increase thread num context get cur entry get origin node add pass request count if resource wrapper get entry type entry type in add count for global inbound entry node for global statistics constant entry node increase thread num constant entry node add pass request count handle pass event with register entry callback handler for processor slot entry callback default node handler statistic slot callback registry get entry callback handler on pass context resource wrapper node count arg catch priority wait exception ex node increase thread num if context get cur entry get origin node null add count for origin node context get cur entry get origin node increase thread num if resource wrapper get entry type entry type in add count for global inbound entry node for global statistics constant entry node increase thread num handle pass event with register entry callback handler for processor slot entry callback default node handler statistic slot callback registry get entry callback handler on pass context resource wrapper node count arg catch block exception e block set block exception to current entry context get cur entry set block error e add block count node increase block qp count if context get cur entry get origin node null context get cur entry get origin node increase block qp count if resource wrapper get entry type entry type in add count for global inbound entry node for global statistics constant entry node increase block qp count handle block event with register entry callback handler for processor slot entry callback default node handler statistic slot callback registry get entry callback handler on block e context resource wrapper node count arg throw e catch throwable e unexpected internal error set error to current entry context get cur entry set error e throw e override public void exit context context resource wrapper resource wrapper int count object arg node node context get cur node if context get cur entry get block error null calculate response time use complete stat time as the time of completion long complete stat time time util current time millis context get cur entry set complete timestamp complete stat time long rt complete stat time context get cur entry get create timestamp throwable error context get cur entry get error record response time and success count record complete for node count rt error record complete for context get cur entry get origin node count rt error if resource wrapper get entry type entry type in record complete for constant entry node count rt error handle exit event with registered exit callback handler collection processor slot exit callback exit callbacks statistic slot callback registry get exit callback for processor slot exit callback handler exit callback handler on exit context resource wrapper count arg fire exit context resource wrapper count private void record complete for node node int batch count long rt throwable error if node null return node add rt and success rt batch count node decrease thread num if error null error instanceof block exception node increase exception qp batch count 
system slot spi order public class system slot extend abstract link processor slot default node override public void entry context context resource wrapper resource wrapper default node node int count boolean prioritize object arg throw throwable system rule manager check system resource wrapper fire entry context resource wrapper node count prioritize arg override public void exit context context resource wrapper resource wrapper int count object arg fire exit context resource wrapper count arg 
demo slot spi order public class demo slot extend abstract link processor slot default node override public void entry context context resource wrapper resource wrapper default node node int count boolean prioritize object arg throw throwable system out println current context context get name system out println current entry resource context get cur entry get resource wrapper get name fire entry context resource wrapper node count prioritize arg override public void exit context context resource wrapper resource wrapper int count object arg system out println exit for entry on demo slot context get cur entry get resource wrapper get name fire exit context resource wrapper count arg 
param flow slot spi order public class param flow slot extend abstract link processor slot default node override public void entry context context resource wrapper resource wrapper default node node int count boolean prioritize object arg throw throwable if param flow rule manager have rule resource wrapper get name fire entry context resource wrapper node count prioritize arg return check flow resource wrapper count arg fire entry context resource wrapper node count prioritize arg override public void exit context context resource wrapper resource wrapper int count object arg fire exit context resource wrapper count arg void apply real param idx non null param flow rule rule int length int param idx rule get param idx if param idx if param idx length rule set param idx length param idx else illegal index give it a illegal positive value latter rule checking will pass rule set param idx param idx void check flow resource wrapper resource wrapper int count object arg throw block exception if arg null return if param flow rule manager have rule resource wrapper get name return list param flow rule rule param flow rule manager get rule of resource resource wrapper get name for param flow rule rule rule apply real param idx rule arg length initialize the parameter metric parameter metric storage init param metric for resource wrapper rule if param flow checker pass check resource wrapper rule count arg string trigger param if arg length rule get param idx object value arg rule get param idx trigger param string value of value throw new param flow exception resource wrapper get name trigger param rule 
netty http command center spi order spi order lowest precedence public class netty http command center implement command center private final http server server new http server suppress warning pmd thread pool creation rule private final executor service pool executor new single thread executor new name thread factory sentinel netty command center executor override public void start throw exception pool submit new runnable override public void run try server start catch exception ex record log warn netty http command center fail to start netty transport server ex ex print stack trace override public void stop throw exception server close pool shutdown now override public void before start throw exception register handler map string command handler handler command handler provider get instance name handler server register command handler 
http heartbeat sender spi order spi order lowest precedence public class http heartbeat sender implement heartbeat sender private final closeable http client client private static final int ok status private final int timeout m private final request config request config request config custom set connection request timeout timeout ms set connect timeout timeout ms set socket timeout timeout ms build private final string console host private final int console port public http heartbeat sender this client http client create default list tuple2 string integer dashboard list transport config get console server list if dashboard list null dashboard list be empty record log info netty http heartbeat sender no dashboard server available console host null console port else console host dashboard list get r1 console port dashboard list get r2 record log info netty http heartbeat sender dashboard address parse console host console port override public boolean send heartbeat throw exception if string util be empty console host return false u be i builder uri builder new u be i builder uri builder set scheme http set host console host set port console port set path transport config get heartbeat api path set parameter app app name util get app name set parameter app type string value of sentinel config get app type set parameter v constant sentinel version set parameter version string value of system current time millis set parameter hostname host name util get host name set parameter ip transport config get heartbeat client ip set parameter port transport config get port set parameter pid string value of pid util get pid http get request new http get uri builder build request set config request config send heartbeat request closeable http response response client execute request response close int status code response get status line get status code if status code ok status return true else if client error code status code server error code status code record log warn http heartbeat sender fail to send heartbeat to console host console port http status code status code return false override public long interval ms return private boolean client error code int code return code code private boolean server error code int code return code code 
