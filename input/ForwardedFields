k mean forward field public static final class select nearest center extend rich map function point tuple2 integer point private collection centroid centroid read the centroid value from a broadcast variable into a collection override public void open configuration parameter throw exception this centroid get runtime context get broadcast variable centroid override public tuple2 integer point map point p throw exception double min distance double max value int closest centroid id check all cluster center for centroid centroid centroid compute distance double distance p euclidean distance centroid update nearest cluster if necessary if distance min distance min distance distance closest centroid id centroid id emit a new record with the center id and the datum point return new tuple2 closest centroid id p 
k mean forward field f0 f1 public static final class count appender implement map function tuple2 integer point tuple3 integer point long override public tuple3 integer point long map tuple2 integer point t return new tuple3 t f0 t f1 1 l 
k mean forward field public static final class centroid accumulator implement reduce function tuple3 integer point long override public tuple3 integer point long reduce tuple3 integer point long val1 tuple3 integer point long val2 return new tuple3 val1 f0 val1 f1 add val2 f1 val1 f2 val2 f2 
k mean forward field id public static final class centroid averager implement map function tuple3 integer point long centroid override public centroid map tuple3 integer point long value return new centroid value f0 value f1 div value f2 
connected component forward field f0 public static final class duplicate value t implement map function t tuple2 t t override public tuple2 t t map t vertex return new tuple2 t t vertex vertex 
enum triangle forward field 0 ; 1 public static class tuple edge converter implement map function tuple2 integer integer edge private final edge out edge new edge override public edge map tuple2 integer integer t throw exception out edge copy vertex from tuple2 t return out edge 
enum triangle forward field private static class triad builder implement group reduce function edge triad private final list integer vertex new array list integer private final triad out triad new triad override public void reduce iterable edge edge iter collector triad out throw exception final iterator edge edge edge iter iterator clear vertex list vertex clear read first edge edge first edge edge next out triad set first vertex first edge get first vertex vertex add first edge get second vertex build and emit triad while edge have next integer higher vertex id edge next get second vertex combine vertex with all previously read vertex for integer lower vertex id vertex out triad set second vertex lower vertex id out triad set third vertex higher vertex id out collect out triad vertex add higher vertex id 
page rank forward field public static final class build outgoing edge list implement group reduce function tuple2 long long tuple2 long long private final array list long neighbor new array list long override public void reduce iterable tuple2 long long value collector tuple2 long long out neighbor clear long id 0 l for tuple2 long long n value id n f0 neighbor add n f1 out collect new tuple2 long long id neighbor to array new long neighbor size 
page rank forward field public static final class dampener implement map function tuple2 long double tuple2 long double private final double dampen private final double random jump public dampener double dampen double num vertex this dampen dampen this random jump dampen num vertex override public tuple2 long double map tuple2 long double value value f1 value f1 dampen random jump return value 
key extract mapper internal forward field public final class key extract mapper t k extend rich map function t tuple2 k t private static final long serial version u i d 1 l private final key selector t k key selector private final tuple2 k t tuple new tuple2 k t public key extract mapper key selector t k key selector this key selector key selector override public tuple2 k t map t value throw exception k key key selector get key value tuple f0 key tuple f1 value return tuple 
key remove mapper internal forward field public final class key remove mapper t k extend rich map function tuple2 k t t private static final long serial version u i d 1 l override public t map tuple2 k t value return value f1 
plan filter operator internal forward field public class plan filter operator t extend filter operator base t flat map function t t public plan filter operator filter function t udf string name type information t type super new flat map filter t udf new unary operator information t t type type name see flat map function param t public static final class flat map filter t extend wrapping function filter function t implement flat map function t t private static final long serial version u i d 1 l private flat map filter filter function t wrap super wrap override public final void flat map t value collector t out throw exception if this wrap function filter value out collect value 
two key extract mapper internal forward field public final class two key extract mapper t k1 k2 extend rich map function t tuple3 k1 k2 t private static final long serial version u i d 1 l private final key selector t k1 key selector1 private final key selector t k2 key selector2 private final tuple3 k1 k2 t tuple new tuple3 k1 k2 t public two key extract mapper key selector t k1 key selector1 key selector t k2 key selector2 this key selector1 key selector1 this key selector2 key selector2 override public tuple3 k1 k2 t map t value throw exception k1 key1 key selector1 get key value k2 key2 key selector2 get key value tuple f0 key1 tuple f1 key2 tuple f2 value return tuple 
semantic property translation test forward field private static class wildcard forward mapper t implement map function t t override public t map t value return value 
semantic property translation test forward field 0 ; 2 private static class individual forward mapper x y z implement map function tuple3 x y z tuple3 x y z override public tuple3 x y z map tuple3 x y z value return value 
semantic property translation test forward field 2 ; 1 0 ; 2 private static class shuffling mapper x implement map function tuple3 x x x tuple3 x x x override public tuple3 x x x map tuple3 x x x value return value 
degree annotation function forward field public static class map edge to source id k ev implement map function edge k ev vertex k long value private vertex k long value output new vertex null new long value override public vertex k long value map edge k ev value throw exception output f0 value f0 return output 
degree annotation function forward field public static class map edge to target id k ev implement map function edge k ev vertex k long value private vertex k long value output new vertex null new long value override public vertex k long value map edge k ev value throw exception output f0 value f1 return output 
degree annotation function forward field public static class degree count k implement reduce function vertex k long value override public vertex k long value reduce vertex k long value leave vertex k long value right throw exception long value count left f1 count set value count get value right f1 get value return left 
vertex degree forward field private static final class reduce bitmask t implement group reduce function tuple3 t t byte value tuple2 t byte value private tuple2 t byte value output new tuple2 null new byte value override public void reduce iterable tuple3 t t byte value value collector tuple2 t byte value out throw exception byte bitmask for tuple3 t t byte value value value output f0 value f0 bitmask value f2 get value output f1 set value bitmask out collect output 
vertex degree forward field private static class degree count t implement group reduce function tuple2 t byte value vertex t degree private vertex t degree output new vertex null new degree override public void reduce iterable tuple2 t byte value value collector vertex t degree out throw exception long degree long out degree long in degree for tuple2 t byte value edge value output f0 edge f0 byte bitmask edge f1 get value degree if bitmask edge order forward get bitmask out degree else if bitmask edge order reverse get bitmask in degree else out degree in degree output f1 get degree set value degree output f1 get out degree set value out degree output f1 get in degree set value in degree out collect output 
maximum degree forward field private static class degree filter k implement flat map function vertex k long value tuple1 k private long maximum degree private tuple1 k output new tuple1 public degree filter long maximum degree this maximum degree maximum degree override public void flat map vertex k long value value collector tuple1 k out throw exception if value f1 get value maximum degree output f0 value f0 out collect output 
translate forward field private static class translate vertex id old new vv extend wrap function translate function old new implement map function vertex old vv vertex new vv private vertex new vv vertex new vertex public translate vertex id translate function old new translator super translator override public vertex new vv map vertex old vv value throw exception vertex f0 wrap function translate value f0 vertex f0 vertex f1 value f1 return vertex 
translate forward field private static class translate edge id old new ev extend wrap function translate function old new implement map function edge old ev edge new ev private edge new ev edge new edge public translate edge id translate function old new translator super translator override public edge new ev map edge old ev value throw exception edge f0 wrap function translate value f0 edge f0 edge f1 wrap function translate value f1 edge f1 edge f2 value f2 return edge 
translate forward field private static class translate vertex value k old new extend wrapping function translate function old new implement map function vertex k old vertex k new private vertex k new vertex new vertex public translate vertex value translate function old new translator super translator override public vertex k new map vertex k old value throw exception vertex f0 value f0 vertex f1 wrap function translate value f1 vertex f1 return vertex 
translate forward field private static class translate edge value k old new extend wrapping function translate function old new implement map function edge k old edge k new private edge k new edge new edge public translate edge value translate function old new translator super translator override public edge k new map edge k old value throw exception edge f0 value f0 edge f1 value f1 edge f2 wrap function translate value f2 edge f2 return edge 
graph generator util forward field f0 private static class create vertex implement map function long value vertex long value null value private vertex long value null value vertex new vertex null null value get instance override public vertex long value null value map long value value throw exception vertex f0 value return vertex 
grid graph forward field f0 private static class link vertex to neighbor implement flat map function long value edge long value null value private long vertex count private list tuple2 long boolean dimension private long value target new long value private edge long value null value edge new edge null target null value get instance public link vertex to neighbor long vertex count list tuple2 long boolean dimension this vertex count vertex count this dimension dimension override public void flat map long value source collector edge long value null value out throw exception edge f0 source long val source get value the distance between neighbor in a give iteration long increment vertex count the value in the remain dimension long remainder val for tuple2 long boolean dimension dimension increment dimension f0 the index within this dimension long index remainder increment if index target set value val increment out collect edge else if dimension f1 target set value val increment dimension f0 out collect edge if index dimension f0 target set value val increment out collect edge else if dimension f1 target set value val increment dimension f0 out collect edge remainder increment 
singleton edge graph forward field f0 private static class link vertex to singleton neighbor implement map function long value edge long value null value private long value source new long value private long value target new long value private edge long value null value edge new edge source target null value get instance override public edge long value null value map long value value throw exception long val value get value source set value val if val target set value val else target set value val return edge 
star graph forward field f0 private static class link vertex to center implement flat map function long value edge long value null value private long value center new long value private edge long value null value center to leaf new edge center null null value get instance private edge long value null value leaf to center new edge null center null value get instance override public void flat map long value leaf collector edge long value null value out throw exception center to leaf f1 leaf out collect center to leaf leaf to center f0 leaf out collect leaf to center 
graph forward field f0 f1 f1 f0 f2 private static final class reverse edge map k ev implement map function edge k ev edge k ev public edge k ev output new edge public edge k ev map edge k ev edge output set field edge f1 edge f0 edge f2 return output 
graph forward field f0 f1 private static final class extract edge i d mapper k ev implement map function edge k ev tuple2 k k override public tuple2 k k map edge k ev edge throw exception return new tuple2 edge f0 edge f1 
graph forward field f0 private static final class apply neighbor reduce function k vv implement reduce function tuple2 k vv private reduce neighbor function vv function public apply neighbor reduce function reduce neighbor function vv fun this function fun override public tuple2 k vv reduce tuple2 k vv first tuple2 k vv second throw exception first f1 function reduce neighbor first f1 second f1 return first 
graph forward field f0 private static final class apply reduce function k ev implement reduce function tuple2 k ev private reduce edge function ev function public apply reduce function reduce edge function ev fun this function fun override public tuple2 k ev reduce tuple2 k ev first tuple2 k ev second throw exception first f1 function reduce edge first f1 second f1 return first 
gather sum apply iteration suppress warning serial forward field f0 private static final class gather udf k vv ev m extend rich map function tuple2 k neighbor vv ev tuple2 k m implement result type queryable tuple2 k m private final gather function vv ev m gather function private transient type information tuple2 k m result type private gather udf gather function vv ev m gather function type information tuple2 k m result type this gather function gather function this result type result type override public tuple2 k m map tuple2 k neighbor vv ev neighbor tuple m result this gather function gather neighbor tuple f1 return new tuple2 neighbor tuple f0 result override public void open configuration parameter throw exception if get runtime context have broadcast variable number of vertex collection long value number of vertex get runtime context get broadcast variable number of vertex this gather function set number of vertex number of vertex iterator next get value if get iteration runtime context get superstep number this gather function init get iteration runtime context this gather function pre superstep override public void close throw exception this gather function post superstep override public type information tuple2 k m get produce type return this result type 
local clustering coefficient forward field private static class count triangle t implement reduce function tuple2 t long value override public tuple2 t long value reduce tuple2 t long value leave tuple2 t long value right throw exception leave f1 set value leave f1 get value right f1 get value return left 
triangle listing forward field private static final class reduce bitmask t implement group reduce function tuple3 t t byte value tuple3 t t byte value override public void reduce iterable tuple3 t t byte value value collector tuple3 t t byte value out throw exception tuple3 t t byte value output null byte bitmask for tuple3 t t byte value value value output value bitmask value f2 get value output f2 set value bitmask out collect output 
triangle listing forward field private static final class generate triplet t extend copyable value t implement group reduce function tuple3 t t byte value tuple4 t t t byte value private tuple4 t t t byte value output new tuple4 null null null new byte value private list tuple2 t byte value visit new array list override public void reduce iterable tuple3 t t byte value value collector tuple4 t t t byte value out throw exception int visit count iterator tuple3 t t byte value iter value iterator while true tuple3 t t byte value edge iter next byte bitmask edge f2 get value output f0 edge f0 output f2 edge f1 for int i i visit count i tuple2 t byte value previous visit get i output f1 previous f0 output f3 set value byte previous f1 get value bitmask u v w bitmask out collect output if iter have next break byte shift bitmask byte bitmask if visit count visit size visit add new tuple2 edge f1 copy new byte value shift bitmask else tuple2 t byte value update visit get visit count edge f1 copy to update f0 update f1 set value shift bitmask visit count 
local clustering coefficient forward field private static class count triangle t implement reduce function tuple2 t long value override public tuple2 t long value reduce tuple2 t long value leave tuple2 t long value right throw exception leave f1 set value leave f1 get value right f1 get value return left 
triangle listing forward field private static final class filter by i d t extend comparable t et implement flat map function edge t et tuple2 t t private tuple2 t t edge new tuple2 override public void flat map edge t et value collector tuple2 t t out throw exception if value f0 compare to value f1 edge f0 value f0 edge f1 value f1 out collect edge 
triangle listing forward field private static final class filter by degree t extend comparable t et implement flat map function edge t tuple3 et long value long value tuple2 t t private tuple2 t t edge new tuple2 override public void flat map edge t tuple3 et long value long value value collector tuple2 t t out throw exception tuple3 et long value long value degree value f2 long source degree degree f1 get value long target degree degree f2 get value if source degree target degree source degree target degree value f0 compare to value f1 edge f0 value f0 edge f1 value f1 out collect edge 
triangle listing forward field private static final class generate triplet t extend copyable value t implement group reduce function tuple2 t t tuple3 t t t private tuple3 t t t output new tuple3 private list t visit new array list override public void reduce iterable tuple2 t t value collector tuple3 t t t out throw exception int visit count iterator tuple2 t t iter value iterator while true tuple2 t t edge iter next output f0 edge f0 output f2 edge f1 for int i i visit count i output f1 visit get i out collect output if iter have next break if visit count visit size visit add edge f1 copy else edge f1 copy to visit get visit count visit count 
community detection suppress warning serial forward field f0 private static final class add score to vertex value mapper k implement map function vertex k long vertex k tuple2 long double public vertex k tuple2 long double map vertex k long vertex return new vertex vertex get id new tuple2 vertex get value 1.0 
function forward field protect static final class sum score t implement reduce function tuple2 t double value override public tuple2 t double value reduce tuple2 t double value leave tuple2 t double value right throw exception leave f1 set value leave f1 get value right f1 get value return left 
hit forward field private static class extract edge i d t et implement map function edge t et tuple2 t t private tuple2 t t output new tuple2 override public tuple2 t t map edge t et value throw exception output f0 value f0 output f1 value f1 return output 
hit forward field private static class initialize score t implement map function tuple2 t t tuple3 t double value double value private tuple3 t double value double value output new tuple3 null new double value 0.0 new double value 1.0 override public tuple3 t double value double value map tuple2 t t value throw exception output f0 value f1 return output 
hit forward field private static class sum score t implement reduce function tuple3 t double value double value override public tuple3 t double value double value reduce tuple3 t double value double value leave tuple3 t double value double value right throw exception leave f1 set value leave f1 get value right f1 get value leave f2 set value leave f2 get value right f2 get value return left 
hit forward field vertex id0 hub score authority score private static class translate result t implement map function tuple3 t double value double value result t private result t output new result override public result t map tuple3 t double value double value value throw exception output set vertex id0 value f0 output set hub score value f1 output set authority score value f2 return output 
page rank forward field private static class extract source degree t et implement map function edge t tuple2 et degree edge t long value edge t long value output new edge override public edge t long value map edge t tuple2 et degree edge throw exception output f0 edge f0 output f1 edge f1 output f2 edge f2 f1 get out degree return output 
page rank forward field private static class initialize source vertex t implement flat map function vertex t degree tuple2 t double value private tuple2 t double value output new tuple2 null new double value 0.0 override public void flat map vertex t degree vertex collector tuple2 t double value out throw exception if vertex f1 get in degree get value output f0 vertex f0 out collect output 
page rank forward field private static class initialize vertex score t extend rich map function vertex t degree tuple2 t double value private tuple2 t double value output new tuple2 override public void open configuration parameter throw exception super open parameter collection long value vertex count get runtime context get broadcast variable vertex count iterator long value vertex count iterator vertex count iterator output f1 new double value vertex count iterator have next 1.0 vertex count iterator next get value double na n override public tuple2 t double value map vertex t degree vertex throw exception output f0 vertex f0 return output 
page rank forward field private static class sum vertex score t implement reduce function tuple2 t double value override public tuple2 t double value reduce tuple2 t double value first tuple2 t double value second throw exception first f1 set value first f1 get value second f1 get value return first 
page rank forward field private static class adjust score t extend rich map function tuple2 t double value tuple2 t double value private double damp factor private long vertex count private double uniformly distribute score public adjust score double damp factor this damp factor damp factor override public void open configuration parameter throw exception super open parameter collection tuple2 t double value sum of score get runtime context get broadcast variable sum of score iterator tuple2 t double value sum of score iterator sum of score iterator float point precision error be also include in sum of sink double sum of sink sum of score iterator have next sum of score iterator next f1 get value collection long value vertex count get runtime context get broadcast variable vertex count iterator long value vertex count iterator vertex count iterator this vertex count vertex count iterator have next vertex count iterator next get value this uniformly distribute score damp factor damp factor sum of sink this vertex count override public tuple2 t double value map tuple2 t double value value throw exception value f1 set value uniformly distribute score damp factor value f1 get value return value 
page rank forward field vertex id0 page rank score private static class translate result t implement map function tuple2 t double value result t private result t output new result override public result t map tuple2 t double value value throw exception output set vertex id0 value f0 output set page rank score value f1 return output 
edge metric forward field private static final class reduce edge stats t implement group reduce function tuple4 t t degree long value tuple3 t degree long value tuple3 t degree long value output new tuple3 override public void reduce iterable tuple4 t t degree long value value collector tuple3 t degree long value out throw exception tuple4 t t degree long value value value iterator next output f0 value f0 output f1 value f2 output f2 value f3 out collect output 
adamic adar forward field private static class vertex inverse log degree t implement map function vertex t long value tuple3 t long value float value private tuple3 t long value float value output new tuple3 null null new float value override public tuple3 t long value float value map vertex t long value value throw exception output f0 value f0 output f1 value f1 long degree value f1 get value when the degree be one the logarithm be zero so avoid divide by this value float inverse log degree degree 0.0 f 1.0 f float math log value f1 get value output f2 set value inverse log degree return output 
adamic adar forward field private static class generate group span t implement group reduce function tuple3 t t float value tuple4 int value t t float value private int value group span value new int value private tuple4 int value t t float value output new tuple4 group span value null null null override public void reduce iterable tuple3 t t float value value collector tuple4 int value t t float value out throw exception int group count int group span group span value set value group span for tuple3 t t float value edge value output f1 edge f0 output f2 edge f1 output f3 edge f2 out collect output if group count group size group count group span value set value group span 
adamic adar forward field private static class generate group t implement flat map function tuple4 int value t t float value tuple4 int value t t float value override public void flat map tuple4 int value t t float value value collector tuple4 int value t t float value out throw exception int span value f0 get value for int idx idx span idx value f0 set value idx out collect value 
adamic adar forward field private static class generate group pair t extend copyable value t implement group reduce function tuple4 int value t t float value tuple3 t t float value private tuple3 t t float value output new tuple3 private boolean initialized false private list t visit new array list group size override public void reduce iterable tuple4 int value t t float value value collector tuple3 t t float value out throw exception int visit count for tuple4 int value t t float value edge value output f1 edge f2 output f2 edge f3 for int i i visit count i output f0 visit get i out collect output if visit count group size if initialize initialized true for int i i group size i visit add edge f2 copy else edge f2 copy to visit get visit count visit count 
adamic adar forward field vertex id0 vertex id1 private static class compute score t extend rich group reduce function tuple3 t t float value result t private float minimum score private float minimum ratio private result t output new result public compute score float minimum score float minimum ratio this minimum score minimum score this minimum ratio minimum ratio override public void open configuration parameter throw exception super open parameter if minimum ratio 0.0 f collection tuple2 float value long value var var get runtime context get broadcast variable sum of score and number of neighbor pair tuple2 float value long value sum and count var iterator next float average score sum and count f0 get value sum and count f1 get value minimum score math max minimum score average score minimum ratio override public void reduce iterable tuple3 t t float value value collector result t out throw exception double sum tuple3 t t float value edge null for tuple3 t t float value next value edge next sum next f2 get value if sum minimum score output set vertex id0 edge f0 output set vertex id1 edge f1 output set adamic adar score float sum out collect output 
jaccard index forward field private static class generate group span t et implement group reduce function edge t tuple2 et long value tuple4 int value t t int value private final int group size private int value group span value new int value private tuple4 int value t t int value output new tuple4 group span value null null new int value public generate group span int group size this group size group size override public void reduce iterable edge t tuple2 et long value value collector tuple4 int value t t int value out throw exception int group count int group span group span value set value group span for edge t tuple2 et long value edge value long degree edge f2 f1 get value if degree integer max value throw new runtime exception degree overflow int value group span u v d v output f1 edge f0 output f2 edge f1 output f3 set value int degree out collect output if group count group size group count group span value set value group span 
jaccard index forward field private static class generate group t implement flat map function tuple4 int value t t int value tuple4 int value t t int value override public void flat map tuple4 int value t t int value value collector tuple4 int value t t int value out throw exception int span value f0 get value for int idx idx span idx value f0 set value idx out collect value 
jaccard index forward field vertex id0 vertex id1 private static class compute score t implement group reduce function tuple3 t t int value result t private boolean unbounded score private long minimum score numerator private long minimum score denominator private long maximum score numerator private long maximum score denominator private result t output new result public compute score boolean unbounded score int minimum score numerator int minimum score denominator int maximum score numerator int maximum score denominator this unbounded score unbounded score this minimum score numerator minimum score numerator this minimum score denominator minimum score denominator this maximum score numerator maximum score numerator this maximum score denominator maximum score denominator override public void reduce iterable tuple3 t t int value value collector result t out throw exception int count tuple3 t t int value edge null for tuple3 t t int value next value edge next count int distinct neighbor edge f2 get value count if unbounded score count minimum score denominator distinct neighbor minimum score numerator count maximum score denominator distinct neighbor maximum score numerator output set vertex id0 edge f0 output set vertex id1 edge f1 output set share neighbor count count output set distinct neighbor count distinct neighbor out collect output 
vertex centric iteration suppress warning serial forward field f0 private static class message combiner udf k message extend rich group reduce function tuple2 k either null value message tuple2 k either null value message implement result type queryable tuple2 k either null value message group combine function tuple2 k either null value message tuple2 k either null value message final message combiner k message combiner function private transient type information tuple2 k either null value message result type private message combiner udf message combiner k message combine function type information tuple2 k either null value message message type info this combiner function combine function this result type message type info override public type information tuple2 k either null value message get produce type return result type override public void reduce iterable tuple2 k either null value message message collector tuple2 k either null value message out throw exception final iterator tuple2 k either null value message message iterator message iterator if message iterator have next final tuple2 k either null value message first message iterator next final k vertex i d first f0 final message iterator message message iter new message iterator message iter set first first f1 right suppress warning unchecked iterator tuple2 either null value message downcast iter iterator tuple2 either null value message iterator message iterator message iter set source downcast iter combiner function set vertex i d out combiner function combine message message iter override public void combine iterable tuple2 k either null value message value collector tuple2 k either null value message out throw exception this reduce value out 
edge to tuple2 map forward field f0 f1 public class edge to tuple2 map k ev implement map function edge k ev tuple2 k k private static final long serial version u i d 1 l private tuple2 k k output new tuple2 override public tuple2 k k map edge k ev edge output f0 edge f0 output f1 edge f1 return output 
edge to tuple3 map forward field f0 f1 f2 public class edge to tuple3 map k ev implement map function edge k ev tuple3 k k ev private static final long serial version u i d 1 l override public tuple3 k k ev map edge k ev edge return edge 
graph util forward field public static final class identity mapper t implement map function t t public t map t value return value 
tuple2 to edge map forward field f0 f1 public class tuple2 to edge map k implement map function tuple2 k k edge k null value private static final long serial version u i d 1 l private edge k null value edge new edge null null null value get instance override public edge k null value map tuple2 k k tuple edge f0 tuple f0 edge f1 tuple f1 return edge 
tuple2 to vertex map forward field f0 f1 public class tuple2 to vertex map k vv implement map function tuple2 k vv vertex k vv private static final long serial version u i d 1 l private vertex k vv vertex new vertex override public vertex k vv map tuple2 k vv tuple vertex f0 tuple f0 vertex f1 tuple f1 return vertex 
tuple3 to edge map forward field f0 f1 f2 public class tuple3 to edge map k ev implement map function tuple3 k k ev edge k ev private static final long serial version u i d 1 l private edge k ev edge new edge override public edge k ev map tuple3 k k ev tuple edge f0 tuple f0 edge f1 tuple f1 edge f2 tuple f2 return edge 
vertex to tuple2 map forward field f0 f1 public class vertex to tuple2 map k vv implement map function vertex k vv tuple2 k vv private static final long serial version u i d 1 l override public tuple2 k vv map vertex k vv vertex return vertex 
iteration compiler test forward field public static final class reduce101 extend rich group reduce function tuple1 long tuple1 long override public void reduce iterable tuple1 long value collector tuple1 long out 
iteration compiler test forward field public static final class duplicate value extend rich map function tuple1 long tuple2 long long override public tuple2 long long map tuple1 long value throw exception return new tuple2 long long value f0 value f0 
relational query compiler test forward field f0 f4 f1 private static class filter o implement flat map function tuple5 long string string string integer tuple2 long integer override public void flat map tuple5 long string string string integer value collector tuple2 long integer out throw exception not go to be execute 
relational query compiler test forward field f0 f1 private static class agg li o implement group reduce function tuple3 long integer double tuple3 long integer double group combine function tuple3 long integer double tuple3 long integer double override public void reduce iterable tuple3 long integer double value collector tuple3 long integer double out throw exception not go to be execute override public void combine iterable tuple3 long integer double value collector tuple3 long integer double out throw exception not go to be execute 
