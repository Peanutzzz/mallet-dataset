kafka consumer test base retry on exception time exception kafka common not leader for partition exception class public void run simple concurrent producer consumer topology throw exception final string topic concurrent producer consumer topic uuid random u u i d to string final string additional empty topic additional empty topic uuid random u u i d to string final int parallelism final int element per partition final int total element parallelism element per partition create test topic topic parallelism create test topic additional empty topic parallelism create a empty topic which will remain empty all the time final stream execution environment env stream execution environment get execution environment env set parallelism parallelism env enable checkpoint env set restart strategy restart strategy no restart fail immediately type information tuple2 long string long string type type information of new type hint tuple2 long string type information serialization schema tuple2 long string source schema new type information serialization schema long string type env get config type information serialization schema tuple2 long string sink schema new type information serialization schema long string type env get config add producer dataflow datum stream tuple2 long string stream env add source new rich parallel source function tuple2 long string private boolean running true override public void run source context tuple2 long string ctx throw interrupted exception int cnt get runtime context get index of this subtask element per partition int limit cnt element per partition while run cnt limit ctx collect new tuple2 l cnt kafka cnt cnt we delay datum generation a bit so that we be sure that some checkpoint be trigger for flink thread sleep override public void cancel run false property producer property flink kafka producer base get property from broker list broker connection string producer property set property retry producer property put all secure prop kafka server produce into kafka stream topic sink schema producer property null add consumer dataflow list string topic new array list topic add topic topic add additional empty topic property prop new property prop put all standard prop prop put all secure prop flink kafka consumer base tuple2 long string source kafka server get consumer topic source schema prop datum stream source tuple2 long string consume env add source source set parallelism parallelism consume add sink new rich sink function tuple2 long string private int el cnt private bit set validator new bit set total element override public void invoke tuple2 long string value throw exception string sp value f1 split int v integer parse int sp assert equal value f0 long v assert false receive tuple twice validator get v validator set v el cnt if el cnt total element check if everything in the bitset be set to true int nc if nc validator next clear bit total element fail the bitset be not set to on all element next clear nc set validator throw new success exception override public void close throw exception super close set parallelism try try execute propagate exception env run simple concurrent producer consumer topology catch program invocation exception job execution exception e look for not leader for partition exception throwable cause e get cause search for nest success exception int depth while cause null depth if cause instanceof kafka common not leader for partition exception throw exception cause cause cause get cause throw e delete test topic topic 
retry on exception test test retry on exception time number of run exception illegal argument exception class public void test successful test run for successful test 
retry on exception test test retry on exception time number of run exception illegal argument exception class public void test match exception run for test with match exception if run for test with match exception number of run throw new illegal argument exception 
retry on exception test test retry on exception time number of run exception runtime exception class public void test subclass exception run for test with subclass exception if run for test with subclass exception number of run throw new illegal argument exception 
retry on exception test test retry on exception time number of run exception illegal argument exception class public void test pass after one failure run for pass after one failure if run for pass after one failure throw new illegal argument exception 
