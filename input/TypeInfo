timestamp hive input split type info timestamp hive input split split type info factory class public class timestamp hive input split extend hive table input split implement timestamp input split private static final long serial version u i d 1 l the modification time of the file this split belong to private final long modification time the state of the split this information be use when restore from a checkpoint and allow to resume read the underlie file from the point we leave off private serializable split state public timestamp hive input split long modification time hive table input split split super split get split number split get hadoop input split split get job conf split get hive table partition this modification time modification time override public void set split state serializable state this split state state override public serializable get split state return this split state override public long get modification time return modification time note again this class have a natural ordering that be inconsistent with equal override public int compare to timestamp input split o timestamp hive input split split timestamp hive input split o int mod time comp long compare this modification time split modification time if mod time comp 0 l return mod time comp int sd comp this hive table partition get storage descriptor compare to split hive table partition get storage descriptor return sd comp sd comp this get split number o get split number override public boolean equal object o if this o return true if o null get class o get class return false if super equal o return false timestamped hive input split that timestamp hive input split o return modification time that modification time override public int hash code return object hash super hash code modification time override public string to string return timestamp hive input split modification time modification time split state split state hive table partition hive table partition link type info factory for link timestamp hive input split public static class split type info factory extend type info factory timestamp hive input split implement serializable private static final long serial version u i d 1 l override public type information timestamp hive input split create type info type t map generic parameter return new basic type info timestamp hive input split timestamp hive input split class new class split type serializer instance null private static class split type serializer extend type serializer singleton timestamp hive input split private static final split type serializer instance new split type serializer private static final long serial version u i d 1 l override public boolean be immutable type return false override public timestamp hive input split create instance return null override public timestamp hive input split copy timestamp hive input split from try return instantiation util clone from thread current thread get context class loader catch i o exception class not find exception e throw new flink runtime exception could not copy element via serialization from e override public timestamp hive input split copy timestamp hive input split from timestamp hive input split reuse return copy from override public int get length return override public void serialize timestamp hive input split record datum output view target throw i o exception try final datum output view stream out view wrapper new datum output view stream target instantiation util serialize object out view wrapper record override public timestamp hive input split deserialize datum input view source throw i o exception try final datum input view stream in view wrapper new datum input view stream source return instantiation util deserialize object in view wrapper thread current thread get context class loader catch class not find exception e throw new i o exception could not deserialize object e override public timestamp hive input split deserialize timestamp hive input split reuse datum input view source throw i o exception return deserialize source override public void copy datum input view source datum output view target throw i o exception timestamp hive input split tmp deserialize source serialize tmp target override public type serializer snapshot timestamp hive input split snapshot configuration return new split type serializer split serializer snapshot serializer configuration snapshot for compatibility and format evolution suppress warning weaker access public static final class split serializer snapshot extend simple type serializer snapshot timestamp hive input split public split serializer snapshot super split type serializer new 
either public type info either type info factory class public abstract class either l be create a left value of either public static l r either l be leave l value return new left l r value create a right value of either public static l r either l be right r value return new right l r value retrieve the left value of either return the left value throw illegal state exception if call on a right public abstract l leave throw illegal state exception retrieve the right value of either return the right value throw illegal state exception if call on a left public abstract r right throw illegal state exception return true if this be a left value false if this be a right value public final boolean be left return get class left class return true if this be a right value false if this be a left value public final boolean be right return get class right class a left value of link either param l the type of left param be the type of right public static class leave l r extend either l be private l value private right l r right public leave l value this value java util object require non null value override public l leave return value override public r right throw new illegal state exception can not retrieve right value on a left set the encapsulate value to another value param value the new value of the encapsulate value public void set value l value this value value override public boolean equal object object if object instanceof leave final left other left object return value equal other value return false override public int hash code return value hash code override public string to string return leave value to string create a left value of link either public static l r leave l r of l leave return new left l r leave a right value of link either param l the type of left param be the type of right public static class right l r extend either l be private r value private left l r leave public right r value this value java util object require non null value override public l leave throw new illegal state exception can not retrieve left value on a right override public r right return value set the encapsulate value to another value param value the new value of the encapsulate value public void set value r value this value value override public boolean equal object object if object instanceof right final right other right object return value equal other value return false override public int hash code return value hash code override public string to string return right value to string create a right value of link either public static l r right l r of r right return new right l r right utility function for link either serializer to support object reuse to support object reuse both subclass of either contain a reference to a instance of the other type this method provide access to and initialize the cross reference param input container for left or right value param leave serializer for create a instance of the left type param l the type of left param be the type of right return input if leave type else input s left reference internal public static l r leave l r obtain left either l be input type serializer l leave serializer if input be left return leave l r input else right l r right right l r input if right left null right leave left of left serializer create instance right leave right right return right leave utility function for link either serializer to support object reuse to support object reuse both subclass of either contain a reference to a instance of the other type this method provide access to and initialize the cross reference param input container for left or right value param right serializer for create a instance of the right type param l the type of left param be the type of right return input if right type else input s right reference internal public static l r right l r obtain right either l be input type serializer r right serializer if input be right return right l r input else leave l r leave left l r input if leave right null left right right of right serializer create instance leave right leave left return left right 
type info factory test type info faulty type info factory class public static class my faulty y empty 
type info factory test type info my tuple type info factory class public static class my tuple t0 t1 empty 
type info factory test type info my option type info factory class public static class my option t empty 
type info factory test type info my either type info factory class public static class my either a b empty 
type info factory test type info int like type info factory class public static class int like empty 
value array type info value array type info factory class public interface value array t extend iterable t i o readable writable serializable normalizable key value array t resettable value value array t copyable value value array t return the number of element store in the array return the number of element store in the array int size a bound array fill when the allocate capacity have be fully use a unbounded array will only fill when the underlie datum structure have reach capacity for example the 2 ^ 31 element limit for java array return whether the array be full boolean be full append the value to this array if and only if the array capacity would not be exceed param value the value to add to this array return whether the value be add to the array boolean add t value append all of the value in the specified array to the end of this array if the combined array would exceed capacity then no value be append param source array contain value to be add to this array return whether the value be add to the array boolean add all value array t source save the array index which can be restore by call code reset p this be not serialize and be not part of the contract for link equal object void mark restore the array index to when code mark be last call void reset reset the array to the empty state the implementation be not expect to release the underlie datum structure this allow the array to be reuse with minimal impact on the garbage collector p this may reset the link mark in order to allow array be shrink void clear 
long value with proper hash code type info long value with proper hash code long value with proper hash code type info factory class public class long value with proper hash code extend long value override public int hash code return int this get value this get value initialize the encapsulate long with public long value with proper hash code super initialize the encapsulate long with the specify value param value initial value of the encapsulate long public long value with proper hash code final long value super value use by link type extractor to create a link type information for link long value with proper hash code public static class long value with proper hash code type info factory extend type info factory long value with proper hash code override public type information long value with proper hash code create type info type t map string type information generic parameter suppress warning unchecked type information long value with proper hash code type info new long value with proper hash code type info return type info a link type information for the link long value with proper hash code type see org apache flink api java typeutil value type info long value type info public static class long value with proper hash code type info extend type information long value with proper hash code implement atomic type long value with proper hash code private static final long serial version u i d 1 l override public int get arity return override public int get total field return suppress warning unchecked override public class long value with proper hash code get type class return long value with proper hash code class override public boolean be basic type return false override public boolean be tuple type return false override public boolean be key type return comparable class be assignable from long value with proper hash code class override suppress warning unchecked public type serializer long value with proper hash code create serializer execution config execution config return new long value with proper hash code serializer suppress warning unchecked rawtype override public type comparator long value with proper hash code create comparator boolean sort order ascend execution config execution config return type comparator long value with proper hash code type comparator new long value comparator sort order ascend override public map string type information get generic parameter return collection empty map override public int hash code return override public boolean equal object obj return obj instanceof long value with proper hash code type info override public boolean can equal object obj return obj instanceof long value with proper hash code type info override public string to string return long value with proper hash code type info class get simple name serializer for link long value with proper hash code see org apache flink api common typeutil base long value serializer public static final class long value with proper hash code serializer extend type serializer singleton long value with proper hash code private static final long serial version u i d 1 l override public boolean be immutable type return false override public long value with proper hash code create instance return new long value with proper hash code override public long value with proper hash code copy long value with proper hash code from return copy from new long value with proper hash code override public long value with proper hash code copy long value with proper hash code from long value with proper hash code reuse reuse set value from get value return reuse override public int get length return override public void serialize long value with proper hash code record datum output view target throw i o exception record write target override public long value with proper hash code deserialize datum input view source throw i o exception return deserialize new long value with proper hash code source override public long value with proper hash code deserialize long value with proper hash code reuse datum input view source throw i o exception reuse read source return reuse override public void copy datum input view source datum output view target throw i o exception target write long source read long override public type serializer snapshot long value with proper hash code snapshot configuration return new long value with proper hash code serializer snapshot serializer configuration snapshot for compatibility and format evolution suppress warning weaker access public static final class long value with proper hash code serializer snapshot extend simple type serializer snapshot long value with proper hash code public long value with proper hash code serializer snapshot super long value with proper hash code serializer new 
list view type info list view type info factory class public evolve public class list view t implement datum view private static final long serial version u i d l public transient type information element type public final list t list public list view type information element type list t list this element type element type this list list create a list view for element of the specify type param element type the type of the list view element public list view type information element type this element type new array list create a list view public list view this null return a iterable of the list view throw exception throw if the system can not get datum return the iterable of the list public iterable t get throw exception return list add the give value to the list throw exception throw if the system can not add datum param value the element to be append to this list view public void add t value throw exception list add value add all of the element of the specify list to this list view throw exception throw if the system can not add all datum param list the list with the element that will be store in this list view public void add all list t list throw exception this list add all list remove the give value from the list param value the element to be remove from this list view public boolean remove t value throw exception return list remove value remove all of the element from this list view override public void clear list clear override public boolean equal object o if this o return true if o null get class o get class return false list view list view list view o return object equal element type list view element type object equal list list view list override public int hash code return object hash element type list 
map view type info map view type info factory class public evolve public class map view k v implement datum view private static final long serial version u i d l public transient type information key type public transient type information value type public final map k v map public map view type information key type type information value type map k v map this key type key type this value type value type this map map create a map view with the specify key and value type param key type the type of key of the map view param value type the type of the value of the map view public map view type information key type type information value type this key type value type new hash map create a map view public map view this null null return the value for the specify key or code null if the key be not in the map view param key the look up key return the value for the specify key throw exception throw if the system can not get datum public v get k key throw exception return map get key insert a value for the give key into the map view if the map view already contain a value for the key the existing value be overwritten param key the key for which the value be insert param value the value that be insert for the key throw exception throw if the system can not put datum public void put k key v value throw exception map put key value insert all mapping from the specify map to this map view param map the map whose entry be insert into this map view throw exception throw if the system can not access the map public void put all map k v map throw exception this map put all map delete the value for the give key param key the key for which the value be delete throw exception throw if the system can not access the map public void remove k key throw exception map remove key check if the map view contain a value for a give key param key the key to check return true if there exist a value for the give key false otherwise throw exception throw if the system can not access the map public boolean contain k key throw exception return map contain key key return all entry of the map view return a iterable of all the key value pair in the map view throw exception throw if the system can not access the map public iterable map entry k v entry throw exception return map entry set return all the key in the map view return a iterable of all the key in the map throw exception throw if the system can not access the map public iterable k key throw exception return map key set return all the value in the map view return a iterable of all the value in the map throw exception throw if the system can not access the map public iterable v value throw exception return map value return a iterator over all entry of the map view return a iterator over all the mapping in the map throw exception throw if the system can not access the map public iterator map entry k v iterator throw exception return map entry set iterator return true if the map view contain no key value mapping otherwise false return true if the map view contain no key value mapping otherwise false throw exception throw if the system can not access the state public boolean be empty throw exception return map be empty remove all entry of this map override public void clear map clear override public boolean equal object other if other instanceof map view return map equal map view other map else return false override public int hash code return map hash code 
