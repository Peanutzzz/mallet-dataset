foo service application scop public class foo service sentinel resource bind value api foo block handler foo block handler exception to trace illegal argument exception class public string foo int i throw exception if i throw new illegal access exception if i throw new illegal argument exception return hello for i sentinel resource binding value api foo with fallback block handler foo block handler fallback foo fallback func exception to trace illegal argument exception class public string foo with fallback int i throw exception if i throw new illegal access exception if i throw new illegal argument exception return hello for i sentinel resource binding value api another foo with default fallback default fallback global default fallback fallback class foo util class public string another foo int i if i throw new illegal argument exception oops return hello for i sentinel resource binding block handler global block handler block handler class foo util class public int random return thread local random current next int sentinel resource bind value api baz block handler baz block handler exception to ignore illegal monitor state exception class public string baz string name if name equal fail throw new illegal monitor state exception boom return cheer name public string foo block handler int i block exception ex return oops i public string foo fallback func int i return eee 
test service impl application scop public class test service impl implement test service override sentinel resource bind value test block handler handle exception block handler class exception util class public void test system out println test override sentinel resource bind value hello fallback hello fallback public string hello long s if s throw new illegal argument exception invalid arg return string format hello at d s override sentinel resource bind value hello another default fallback default fallback exception to ignore illegal state exception class public string hello another string name if name null bad equal name throw new illegal argument exception oops if foo equal name throw new illegal state exception oops return hello name public string hello fallback long s throwable ex do some log here return oops error occur at s msg ex get message public string default fallback system out println go to default fallback return default fallback 
app lifecycle bean application scop public class app lifecycle bean private static final logger logger logger get logger listener bean void on start observe startup event ev logger info the application be start flow rule rule new flow rule set count set grade rule constant flow grade qp set resource get hello txt set limit app default as flow rule class flow rule manager load rule array as list rule system rule system rule new system rule system rule set limit app default system rule set avg rt system rule manager load rule array as list system rule degrade rule degrade rule1 new degrade rule greeting1 set count set grade rule constant degrade grade exception count set time window set min request amount degrade rule degrade rule2 new degrade rule greeting2 set count set grade rule constant degrade grade exception count set time window set min request amount degrade rule manager load rule array as list degrade rule1 degrade rule2 
greet service application scop register for reflection public class greeting service sentinel resource bind value greeting1 fallback global default fallback fallback class greet fallback class block handler global block handler block handler class greet fallback class public string greet string name if degrade equal name throw new runtime exception test sentinel fallback return hello name sentinel resource bind value greeting2 fallback greet fallback public string greet with fallback name string name if degrade equal name throw new runtime exception test sentinel fallback return hello name public string greet fallback string name return greet fallback name 
foo service application scop public class foo service sentinel resource bind value api foo block handler foo block handler exception to trace illegal argument exception class public string foo int i throw exception if i throw new illegal access exception if i throw new illegal argument exception return hello for i sentinel resource binding value api foo with fallback block handler foo block handler fallback foo fallback func exception to trace illegal argument exception class public string foo with fallback int i throw exception if i throw new illegal access exception if i throw new illegal argument exception return hello for i sentinel resource binding value api another foo with default fallback default fallback global default fallback fallback class foo util class public string another foo int i if i throw new illegal argument exception oops return hello for i sentinel resource binding block handler global block handler block handler class foo util class public int random return thread local random current next int sentinel resource bind value api baz block handler baz block handler exception to ignore illegal monitor state exception class public string baz string name if name equal fail throw new illegal monitor state exception boom return cheer name public string foo block handler int i block exception ex return oops i public string foo fallback func int i return eee 
