dubbo app context filter activate group consumer public class dubbo app context filter implement filter override public result invoke invoker invoker invocation invocation throw rpc exception string application invoker get url get parameter common constant application key if application null rpc context get context set attachment dubbo util sentinel dubbo application key application return invoker invoke invocation 
sentinel dubbo consumer filter activate group consumer public class sentinel dubbo consumer filter extend base sentinel dubbo filter public sentinel dubbo consumer filter record log info sentinel apache dubbo consumer filter initialize override string get method name invoker invoker invocation invocation return dubbo util get resource name invoker invocation dubbo config get dubbo consumer prefix override string get interface name invoker invoker return dubbo util get interface name invoker override public result invoke invoker invoker invocation invocation throw rpc exception invoke mode invoke mode rpc util get invoke mode invoker get url invocation if invoke mode sync invoke mode return sync invoke invoker invocation else return async invoke invoker invocation private result sync invoke invoker invoker invocation invocation entry interface entry null entry method entry null string method resource name get method name invoker invocation string interface resource name get interface name invoker try interface entry sph u entry interface resource name resource type constant common rpc entry type out method entry sph u entry method resource name resource type constant common rpc entry type out invocation get argument result result invoker invoke invocation if result have exception tracer trace entry result get exception interface entry tracer trace entry result get exception method entry return result catch block exception e return dubbo fallback registry get consumer fallback handle invoker invocation e catch rpc exception e tracer trace entry e interface entry tracer trace entry e method entry throw e finally if method entry null method entry exit invocation get argument if interface entry null interface entry exit private result async invoke invoker invoker invocation invocation link list entry holder queue new link list string method resource name get method name invoker invocation string interface resource name get interface name invoker try queue push new entry holder sph u async entry interface resource name resource type constant common rpc entry type out null queue push new entry holder sph u async entry method resource name resource type constant common rpc entry type out invocation get argument invocation get argument result result invoker invoke invocation result when complete with context new bi consumer result throwable override public void accept result result throwable throwable while queue be empty entry holder holder queue pop tracer trace entry result get exception holder entry exit entry holder return result catch block exception e while queue be empty exit entry queue pop return dubbo fallback registry get consumer fallback handle invoker invocation e class entry holder final private entry entry final private object param public entry holder entry entry object param this entry entry this param param private void exit entry entry holder holder if holder param null holder entry exit holder param else holder entry exit 
sentinel dubbo provider filter activate group provider public class sentinel dubbo provider filter extend base sentinel dubbo filter public sentinel dubbo provider filter record log info sentinel apache dubbo provider filter initialize override string get method name invoker invoker invocation invocation return dubbo util get resource name invoker invocation dubbo config get dubbo provider prefix override string get interface name invoker invoker return dubbo util get interface name invoker override public result invoke invoker invoker invocation invocation throw rpc exception get origin caller string application dubbo util get application invocation entry interface entry null entry method entry null string method resource name get method name invoker invocation string interface resource name get interface name invoker try only need to create entrance context at provider side as context will take effect at entrance of invocation chain only for inbound traffic context util enter method resource name application interface entry sph u entry interface resource name resource type constant common rpc entry type in method entry sph u entry method resource name resource type constant common rpc entry type in invocation get argument result result invoker invoke invocation if result have exception tracer trace entry result get exception interface entry tracer trace entry result get exception method entry return result catch block exception e return dubbo fallback registry get provider fallback handle invoker invocation e catch rpc exception e tracer trace entry e interface entry tracer trace entry e method entry throw e finally if method entry null method entry exit invocation get argument if interface entry null interface entry exit context util exit 
dubbo app context filter activate group consumer public class dubbo app context filter implement filter override public result invoke invoker invoker invocation invocation throw rpc exception string application invoker get url get parameter constant application key if application null rpc context get context set attachment dubbo util dubbo application key application return invoker invoke invocation 
sentinel dubbo consumer filter activate group consumer public class sentinel dubbo consumer filter extend abstract dubbo filter implement filter public sentinel dubbo consumer filter record log info sentinel dubbo consumer filter initialize override public result invoke invoker invoker invocation invocation throw rpc exception entry interface entry null entry method entry null try string resource name get resource name invoker invocation dubbo config get dubbo consumer prefix interface entry sph u entry invoker get interface get name resource type constant common rpc entry type out method entry sph u entry resource name resource type constant common rpc entry type out invocation get argument result result invoker invoke invocation if result have exception throwable e result get exception record common exception tracer trace entry e interface entry tracer trace entry e method entry return result catch block exception e return dubbo fallback registry get consumer fallback handle invoker invocation e catch rpc exception e tracer trace entry e interface entry tracer trace entry e method entry throw e finally if method entry null method entry exit invocation get argument if interface entry null interface entry exit 
sentinel dubbo provider filter activate group provider public class sentinel dubbo provider filter extend abstract dubbo filter implement filter public sentinel dubbo provider filter record log info sentinel dubbo provider filter initialize override public result invoke invoker invoker invocation invocation throw rpc exception get origin caller string origin dubbo origin parser registry get dubbo origin parser parse invoker invocation if null origin origin entry interface entry null entry method entry null try string resource name get resource name invoker invocation dubbo config get dubbo provider prefix string interface name invoker get interface get name context util enter resource name origin interface entry sph u entry interface name resource type constant common rpc entry type in method entry sph u entry resource name resource type constant common rpc entry type in invocation get argument result result invoker invoke invocation if result have exception throwable e result get exception record common exception tracer trace entry e interface entry tracer trace entry e method entry return result catch block exception e return dubbo fallback registry get provider fallback handle invoker invocation e catch rpc exception e tracer trace entry e interface entry tracer trace entry e method entry throw e finally if method entry null method entry exit invocation get argument if interface entry null interface entry exit context util exit 
